#+title:  Old Release notes | Org mode
#+author:    Carsten Dominik
#+email:     carsten at orgmode dot org
#+setupfile: setup.org
#+description: Org: an Emacs Mode for Notes, Planning and Authoring
#+include: "./resources/preamble.html" export html
#+link:      git https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=%s
#+link:      doc https://orgmode.org/worg/doc.html#%s
#+html_head:     <link rel="stylesheet" href="/resources/style/org-changes.css" type="text/css" />
#+include: "./resources/preamble.html" export html

#+include: "./resources/normal-outline-3.html" export html

* Version 9.3

** Incompatible changes
*** Change bracket link escaping syntax

Org used to percent-encode sensitive characters in the URI part of the
bracket links.

Now, escaping mechanism uses the usual backslash character, according
to the following rules, applied in order:

1. All consecutive =\= characters at the end of the link must be
   escaped;
2. Any =]= character at the very end of the link must be escaped;
3. All consecutive =\= characters preceding =][= or =]]= patterns must
   be escaped;
4. Any =]= character followed by either =[= or =]= must be escaped;
5. Others =]= and =\= characters need not be escaped.

When in doubt, use the function ~org-link-escape~ in order to turn
a link string into its properly escaped form.

The following function will help switching your links to the new
syntax:

#+begin_src emacs-lisp
(defun org-update-link-syntax (&optional no-query)
  "Update syntax for links in current buffer.
Query before replacing a link, unless optional argument NO-QUERY
is non-nil."
  (interactive "P")
  (org-with-point-at 1
    (let ((case-fold-search t))
      (while (re-search-forward "\\[\\[[^]]*?%\\(?:2[05]\\|5[BD]\\)" nil t)
        (let ((object (save-match-data (org-element-context))))
          (when (and (eq 'link (org-element-type object))
                     (= (match-beginning 0)
                        (org-element-property :begin object)))
            (goto-char (org-element-property :end object))
            (let* ((uri-start (+ 2 (match-beginning 0)))
                   (uri-end (save-excursion
                              (goto-char uri-start)
                              (re-search-forward "\\][][]" nil t)
                              (match-beginning 0)))
                   (uri (buffer-substring-no-properties uri-start uri-end)))
              (when (or no-query
                        (y-or-n-p
                         (format "Possibly obsolete URI syntax: %S.  Fix? "
                                 uri)))
                (setf (buffer-substring uri-start uri-end)
                      (org-link-escape (org-link-decode uri)))))))))))
#+end_src

The old ~org-link-escape~ and ~org-link-unescape~ functions have been
renamed into ~org-link-encode~ and ~org-link-decode~.

*** Change match group number in ~org-link-bracket-re~

Link description, if any, is located in match group 2 instead of match
group 3.

*** ob-clojure does not auto prepend ~(ns ..)~ statement anymore

When tangling, user usually just wants to tangle literally code instead
of prepend inserting a ~(ns ..)~ statement before source block
code.  Now, when you have no ~:ns~ header argument specified, this
behavior will not happen automatically.

*** Change in behavior on exit from an Org edit buffer

Org will no longer attempt to restore the window configuration in the
frame to which the user returns after editing a source block with
~org-edit-src-code~.  Instead, the window configuration will remain as
it is.

*** Change default value for ~org-email-link-description-format~

When linking from a mail buffer, Org used to truncate the subject of
the message to 30 characters in order to build the description of the
link.  This behavior was considered as too surprising.  As
a consequence, Org no longer truncates subjects.

You can get the old behaviour back with the following:

: (setq org-email-link-description-format "Email %c: %.30s")

*** ~:file~ header argument no longer assume "file" ~:results~

The "file" ~:results~ value is now mandatory for a code block
returning a link to a file.  The ~:file~ or ~:file-ext~ header
arguments no longer imply a "file" result is expected.

*** Plain numbers are hours in Column View mode

See [[git:3367ac9457]] for details.

*** All LaTeX preview backends use now xcolor

The dvipng backend was previously relying on fg and bg parameters to
be passed to the CLI. This didn't work when xcolor was directly or
indirectly used in the document (e.g. tkiz is a user of xcolor). Since
every other backend was already using xcolor to set fg and bg, the CLI
alternative was removed and there is no more a :use-xcolor options
since now it's implicitly always true.

*** Org-Attach Git commit

[[*Org-Attach has been refactored and extended][Refactoring of Org-Attach]] affected the Git commit functionality.  Not
much, but the following changes are required if you still need to
auto-commit attachments to git:

- Customization of ~org-attach-annex-auto-get~ needs to be renamed to
  ~org-attach-git-annex-auto-get~.

- Customization of ~org-attach-commit~ is no longer needed.  Instead
  one need to require the =org-attach-git= module in the startup.

** New features
*** New option to wrap source code lines in HTML export

When new option ~html-wrap-src-lines~ (with variable
~org-html-wrap-src-lines~) is non-nil, HTML export wraps source code
lines in HTML ~code~ elements.

*** New option to handle schedules and deadlines in iCalendar export

Export ignore done tasks with a deadline when
~org-icalendar-use-deadline~ contains ~event-if-todo-not-done~.
Likewise, scheduled done tasks are also ignored when
~org-icalendar-use-scheduled~ contains the same symbol.

*** Add split-window-right option for src block edit window placement

Given the increasing popularity of wide screen monitors, splitting
horizontally may make more sense than splitting vertically.  An
option, ~split-window-right~, to request horizontal splitting has been
added to ~org-src-window-setup~.

*** Org-Attach has been refactored and extended

Org attach has been refactored and the functionality extended.  It
should now be easier to understand how it works.  A few improvements
and extra options have been added as well.

From the initial comment in org-attach source-code:

- Attachments are managed either by using a custom property DIR or by
  using property ID from org-id.  When DIR is defined, a location in
  the filesystem is directly attached to the outline node.  When
  org-id is used, attachments are stored in a folder named after the
  ID, in a location defined by ~org-attach-id-dir~.  DIR has
  precedence over ID when both parameters are defined for the current
  outline node (also when inherited parameters are taken into
  account).

From now on inheritance requires no extra property and will adhere to
~org-attach-use-inheritance~ by default.  Inheritance can be
customized to always be activated or never be activated in
~org-attach-use-inheritance~.

The ATTACH_DIR property is deprecated in favour of the shorter
property DIR.  Links to folders inside the DIR property can now be
declared as relative links.  This is not enabled by default, but can
be set in ~org-attach-dir-relative~.

When adding new attachment to the outline node the preferred way of
doing so can be customized.  Take a look at
~org-attach-preferred-new-method~.  It defaults to using ID since that
was the behaviour before this change.

If both DIR and ID properties are set on the same node, DIR has
precedence and will be used.

One can now also choose to build attachment-directory-paths in a
customized way.  This is an advanced topic, but in some case it makes
sense to parse an ID in a different way than the default one.  Create
your own function and add it to the beginning of
~org-attach-id-to-path-function~list~ if you want to customize the ID
based folder structure.

If you've used ATTACH_DIR properties to manage attachments, use the
following code to rename that property to DIR which supports the same
functionality.  ATTACH_DIR_INHERIT is no longer supported and is
removed.

#+begin_src emacs-lisp
  (defun org-update-attach-properties ()
      "Change properties for Org-Attach."
      (interactive)
      (org-with-point-at 1
	(while (outline-next-heading)
	  (let ((DIR (org--property-local-values "ATTACH_DIR" nil)))
	    (when DIR
	      (org-set-property "DIR" (car DIR))
	      (org-delete-property "ATTACH_DIR"))))
	(org-delete-property-globally "ATTACH_DIR_INHERIT")))
#+end_src

For those who hate breaking changes, even though the changes are made
to clean things up; fear not.  ATTACH_DIR will still continue to work.
It's just not documented any longer.  When you get the chance, run the
code above to clean things up anyways!

**** New hooks
Two hooks are added to org-attach:
- org-attach-after-change-hook
- org-attach-open-hook

They are added mostly for internal restructuring purposes, but can
ofc. be used for other things as well.

*** New link-type: Attachment

Attachment-links are now first-class citizens.  They mimic file-links
in everything they do but use the existing attachment-folder as a base
when expanding the links. Both =DIR= and =ID= properties are used to
try to resolve the links, in exactly the same way as Org-Attach uses
those properties.

*** Handle overlay specification for notes in Beamer export

This aligns Beamer notes with slide overlays.

*** Add support for lettered lists in Texinfo

Using =:enum A= or =:enum a= Texinfo attribute switches an otherwise
numbered list to a lettered list.

*** Add a dispatcher command to insert dynamic blocks

You can add new dynamic blocks with function
~org-dynamic-block-define~.  All such dynamic blocks can be used by
~org-dynamic-block-insert-dblock~ command.

*** Babel

**** ob-emacs-lisp sets ~lexical-binding~ in Org edit buffers

When editing an Elisp src block, the editing buffer's
~lexical-binding~ is set according to the src block's =:lexical=
parameter.

**** Add LaTeX output support in PlantUML

*** New minor mode to display headline numbering

Use =<M-x org-num-mode>= to get a visual indication of the numbering
in the outline.  The numbering is also automatically updated upon
changes in the buffer.

*** New property =HTML_HEADLINE_CLASS= in HTML export

The new property =HTML_HEADLINE_CLASS= assigns a class attribute to
a headline.

*** Allow LaTeX attributes and captions for "table.el" tables

Supported LaTeX attributes are ~:float~, ~:center~, ~:font~ and
~:caption~.

*** Attach buffer contents to headline

With =<b>= key from attachment dispatcher (=<C-c C-a>=), it is now
possible to write the contents of a buffer to a file in the headline
attachment directory.

*** iCalendar export respects a =CLASS= property

Set the =CLASS= property on an entry to specify a visibility class for
that entry only during iCalendar export. The property can be set to
anything the calendar server supports. The iCalendar standard defines
the values =PUBLIC=, =CONFIDENTIAL=, =PRIVATE=, which can be
interpreted as publicly visible, accessible to a specific group, and
private respectively.

This property can be inherited during iCalendar export, depending on
the value of ~org-use-property-inheritance~.

*** New parameter for =INCLUDE= keyword

Add =:coding CODING-SYSTEM= to include files using a different coding
system than the main Org document.  For example:

#+begin_example
,#+INCLUDE: "myfile.cmd" src cmd :coding cp850-dos
#+end_example

*** New values in clock tables' step: =month= and =year=
*** ODT export handles numbers cookies in lists
*** New cell movement functions in tables

~S-<UP>~, ~S-<DOWN>~, ~S-<RIGHT>~, and ~S-<LEFT>~ now move cells in
the corresponding direction by swapping with the adjacent cell.

*** New option to natively fontify LaTeX snippets and environments

A 'native option was added to org-highlight-latex-and-related. It
matches the same structures than 'latex but it calls
org-src-font-lock-fontify-block instead, thus bringing about full
LaTeX font locking.

*** ~org-clone-subtree-with-time-shift~ learnt to shift backward in time

=<C-c C-x c>= (~org-clone-subtree-with-time-shift~) now takes a
negative value as a valid repeater to shift time stamps in backward
in cloned subtrees.  You can give, for example, ‘-3d’ to shift three
days in the past.

*** Toggle display of all vs. undone scheduled habits conveniently

=<C-u K>= (~org-habit-toggle-display-in-agenda~) in an agenda toggles
the display of all habits to those which are undone and scheduled.
This is a function for convenience.

*** New parameter for SQL Babel blocks: ~:dbconnection~

The new parameter ~:dbconnection~ allows to specify a connection name
in a SQL block header: this name is used to look up connection
parameters in ~sql-connection-alist~.

*** New =:scale= attribute supported by LaTeX exporters

The builtin "latex" exporters now accept and use a =:scale= attribute,
which scales an image by a given factor.

This attribute is wrapped adound the =scale= parameter of LaTeX's
=\includegraphics= (bitmap images) or a TiKZ's =\scalebox=.
Therefore, its value should be some string palatable to LaTeX as
a positive float Its default value is an empty string (i.e. disabled).

This attribute overrides the =:width= and =:height= attributes.

#+begin_example
,#+name: Beastie
,#+caption: I think I saw this curious horse already, but where ?
,#+LATEX_ATTR: :scale 2
[[https://orgmode.org/img/org-mode-unicorn-logo.png]]
#+end_example

*** Allow specifying the target for a table of contents

The =+TOC= keyword now accepts a =:target:= attribute that specifies
the headline to use for making the table of contents.

#+begin_example
,* Target
  :PROPERTIES:
  :CUSTOM_ID: TargetSection
  :END:
,** Heading A
,** Heading B
,* Another section
,#+TOC: headlines 1 :target "#TargetSection"
#+end_example

** New functions
*** ~org-dynamic-block-insert-dblock~

Use default keybinding =<C-c C-x x>= to run command
~org-dynamic-block-insert-dblock~.  It will prompt user to select
dynamic block in ~org-dynamic-block-alist~.

*** ~org-table-cell-up~
*** ~org-table-cell-down~
*** ~org-table-cell-left~
*** ~org-table-cell-right~
*** ~org-habit-toggle-display-in-agenda~
** Removed functions and variables
*** Removed Org Drill

You can install it back from MELPA.

*** ~org-babel-set-current-result-hash~
*** ~org-capture-insert-template-here~
*** ~org-attach-directory~

It has been deprecated in favour of ~org-attach-id-dir~ which is less
ambiguous given the restructured org-attach.

*** ~org-enable-fixed-width-editor~

This variable was not used through the code base.

** Miscellaneous
*** Change signature for ~org-list-to-subtree~

The function now accepts the level of the subtree as an optional
argument.  It no longer deduces it from the current level.

*** LaTeX preview is simplified

Function ~org-latex-preview~, formerly known as
~org-toggle-latex-fragment~, has a hopefully simpler and more
predictable behavior.  See its docstring for details.

*** ~org-table-copy-down~ supports patterns

When ~org-table-copy-increment~ is non-nil, it is now possible to
increment fields like =A1=, or =0A=, i.e., any string prefixed or
suffixed with a whole number.

*** No more special indentation for description items

Descriptions items are indented like regular ones, i.e., text starts
after the bullet.  Special indentation used to introduce bugs when
inserting sub-items in a description list.

*** New hook: ~org-todo-repeat-hook~

This hook was actually introduced in Org 9.2.1, but wasn't advertised.

*** Org Table reads numbers starting with 0 as strings
*** Disable fast tag selection interface via prefix arg

A call of ~org-set-tags-command~ with prefix argument C-u C-u avoids
the fast tag selection interface and instead offers the plain
interface.

*** ~:mkdirp~ now supports create directory for ~:dir~ path

The ~:mkdirp~ header argument used to only work for ~:tangle~ tangle
files. Now ~:mkdirp~ works for ~:dir~ too. This is more convenient for
specify default directory and with ~:file~ header argument.

*** New variable: ~org-agenda-breadcrumbs-separator~

If breadcrumbs are showed in org-agenda with the help of "%b" format
in ~org-agenda-prefix-format~, user can customize breadcrumbs's
separator using ~org-agenda-breadcrumbs-separator~.

*** New variable ~org-attach-commands~

This variable makes it possible to customize the list of commands for
the attachment dispatcher.

*** New ID method based on timestamp

If one chooses, it is now possible to create ID's based on timestamp
(ISO8601) instead of UUID by changing org-id-method to ts.

For an improved folder structure when using timestamp as ID, make sure
to promote ~org-attach-id-ts-folder-format~ to the first element of
~org-attach-id-to-path-function-list~ in your configuration at the
same time.

*** New customization: ~org-id-locations-relative~

New customization to make the persisting of org-id-locations between
sessions to store links to files as relative instead of absolute.  The
links will be stored as relative to the path of org-id-locations-file.

*** ~org-ctrl-c-tab~ is functional before the first headline

I.e. treat the whole file as if it was a subtree.

Also fold everything below the chosen level.  Former behavior was to
leave unfolded subtrees unfolded.

*** ~org-kill-note-or-show-branches~ is functional before the first headline

I.e. treat the whole file as if it was a subtree.

*** Respect narrowing when agenda command is restricted to buffer

* Version 9.2
** Incompatible changes
*** Removal of OrgStruct mode mode and radio lists

OrgStruct minor mode and radio lists mechanism (~org-list-send-list~
and ~org-list-radio-lists-templates~) are removed from the code base.

Note that only radio /lists/ have been removed, not radio tables.

If you want to manipulate lists like in Org in other modes, we suggest
to use orgalist.el, which you can install from GNU ELPA.

If you want to use Org folding outside of Org buffers, you can have a
look at the outshine package in the MELPA repository.

*** Change in the structure template expansion

Org 9.2 comes with a new template expansion mechanism, combining
~org-insert-structure-template~ bound to ~C-c C-,~.

If you customized the ~org-structure-template-alist~ option manually,
you probably need to udpate it, see the docstring for accepted values.

If you prefer using previous patterns, e.g. =<s=, you can activate
them again by requiring Org Tempo library:

: (require 'org-tempo)

or add it to ~org-modules~.

If you need complex templates, look at the ~tempo-define-template~
function or at solutions like Yasnippet.

*** Change to Noweb expansion

Expansion check =:noweb-ref= only if no matching named block is found
in the buffer.  As a consequence, any =:noweb-ref= value matching the
name of a source block in the buffer is ignored. A simple fix is to
give every concerned source-block, including the named one, a new,
unique, Noweb reference.

#+BEGIN_SRC org
  ,#+NAME: foo
  ,#+BEGIN_SRC emacs-lisp
    1
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb-ref foo
    2
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb yes
    <<foo>>
  ,#+END_SRC
#+END_SRC

should become

#+BEGIN_SRC org
  ,#+NAME: foo
  ,#+BEGIN_SRC emacs-lisp :noweb-ref bar
    1
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb-ref bar
    2
  ,#+END_SRC

  ,#+BEGIN_SRC emacs-lisp :noweb yes
    <<bar>>
  ,#+END_SRC
#+END_SRC

*** Default/accepted values of ~org-calendar-to-agenda-key~

The default value and accepted value of  ~org-calendar-to-agenda-key~
changed.  This is an excerpt of the new docstring:

: When set to ‘default’, bind the function to ‘c’, but only if it is
: available in the Calendar keymap.  This is the default choice because
: ‘c’ can then be used to switch back and forth between agenda and calendar.
:
: When nil, ‘org-calendar-goto-agenda’ is not bound to any key.

Check the full docstring for more.

*** Change the signature of the ~org-set-effort~ function

Here is the new docstring:

: (org-set-effort &optional INCREMENT VALUE)
:
: Set the effort property of the current entry.
: If INCREMENT is non-nil, set the property to the next allowed
: value.  Otherwise, if optional argument VALUE is provided, use
: it.  Eventually, prompt for the new value if none of the previous
: variables is set.

*** Placeholders in =(eval ...)= macros are always strings

Within =(eval ...)= macros, =$1=-like placeholders are always replaced
with a string.  As a consequence, they must not be enclosed within
quotes. As an illustration, consider the following, now valid,
examples:

#+begin_example
  ,#+macro: join (eval (concat $1 $2))
  ,#+macro: sum (eval (+ (string-to-number $1) (string-to-number $2)))

  {{{join(a,b)}}} => ab
  {{{sum(1,2)}}}  => 3
#+end_example

However, there is no change in non-eval macros:

#+begin_example
  ,#+macro: disp argument: $1

  {{{disp(text)}}} => argument: text
#+end_example

*** =align= STARTUP value no longer narrow table columns

Columns narrowing (or shrinking) is now dynamic. See [[*Dynamically
narrow table columns]] for details. In particular, it is decoupled from
aligning.

If you need to automatically shrink columns upon opening an Org
document, use =shrink= value instead, or in addition to align:

#+BEGIN_EXAMPLE
,#+STARTUP: align shrink
#+END_EXAMPLE

*** ~org-get-tags~ meaning change

Function ~org-get-tags~ used to return local tags to the current
headline.  It now returns all the inherited tags in addition to the
local tags.  In order to get the old behaviour back, you can use:

: (org-get-tags nil t)

*** Alphabetic sorting in tables and lists

When sorting alphabetically, ~org-table-sort-lines~ and ~org-sort-list~
now sort according to the locale’s collation rules instead of by
code-point.

*** Change the name of the :tags clocktable option to :match

The =:match= (renamed from =:tags=) option allows to limit clock entries
to those matching a todo-tags matcher.

The old =:tags= option can be set to =t= to display a headline's tags in a
dedicated column.

This is consistent with the naming of =org-dblock-write:columnview=
options, where =:match= is also used as a headlines filter.

** New features
*** Add ~:results link~ support for Babel

With this output format, create a link to the file specified in
~:file~ header argument, without actually writing any result to it:

#+begin_example
,#+begin_src shell :dir "data/tmp" :results link :file "crackzor_1.0.c.gz"
wget -c "http://ben.akrin.com/crackzor/crackzor_1.0.c.gz"
,#+end_src

,#+results:
[[file:data/tmp/crackzor_1.0.c.gz]]
#+end_example

*** Add ~:session~ support of ob-js for js-comint
#+begin_src js :session "*Javascript REPL*"
console.log("stardiviner")
#+end_src
*** Add ~:session~ support of ob-js for Indium
#+begin_src js :session "*JS REPL*"
console.log("stardiviner")
#+end_src
*** Add ~:session~ support of ob-js for skewer-mode
#+begin_src js :session "*skewer-repl*"
console.log("stardiviner")
#+end_src
*** Add support for links to LaTeX equations in HTML export
Use MathJax links when enabled (by ~org-html-with-latex~), otherwise
add a label to the rendered equation.
*** Org Tempo may used for snippet expansion of structure template.
See manual and the commentary section in ~org-tempo.el~ for details.
*** Exclude unnumbered headlines from table of contents
Set their =UNNUMBERED= property to the special =notoc= value.  See
manual for details.
*** ~org-archive~ functions update status cookies

Archiving headers through ~org-archive-subtree~ and
~org-archive-to-archive-sibling~ such as the ones listed below:

#+BEGIN_SRC org
  ,* Top [1/2]
  ,** DONE Completed
  ,** TODO Working
#+END_SRC

Will update the status cookie in the top level header.

*** Disable =org-agenda-overriding-header= by setting to empty string

The ~org-agenda-overriding-header~ inserted into agenda views can now
be disabled by setting it to an empty string.

*** Dynamically narrow table columns

With ~C-c TAB~, it is now possible to narrow a column to the width
specified by a width cookie in the column, or to 1 character if there
is no such cookie.  The same keybinding expands a narrowed column to
its previous state.

Editing the column automatically expands the whole column to its full
size.

*** =org-columns-summary-types= entries can take an optional COLLECT function

You can use this to make collection of a property from an entry
conditional on another entry. E.g. given this configuration:

#+BEGIN_SRC emacs-lisp
  (defun custom/org-collect-confirmed (property)
    "Return `PROPERTY' for `CONFIRMED' entries"
    (let ((prop (org-entry-get nil property))
	  (confirmed (org-entry-get nil "CONFIRMED")))
      (if (and prop (string= "[X]" confirmed))
	  prop
	"0")))

  (setq org-columns-summary-types
	'(("X+" org-columns--summary-sum
	   custom/org-collect-confirmed)))
#+END_SRC

You can have a file =bananas.org= containing:

#+BEGIN_SRC org
  ,#+columns: %ITEM %CONFIRMED %Bananas{+} %Bananas(Confirmed Bananas){X+}

  ,* All shipments
  ,** Shipment 1
     :PROPERTIES:
     :CONFIRMED: [X]
     :Bananas:  4
     :END:

  ,** Shipment 2
     :PROPERTIES:
     :CONFIRMED: [ ]
     :BANANAS:  7
     :END:
#+END_SRC

... and when going to the top of that file and entering column view
you should expect to see something like:

| ITEM          | CONFIRMED | Bananas | Confirmed Bananas |
|---------------+-----------+---------+-------------------|
| All shipments |           |      11 |                 4 |
| Shipment 1    | [X]       |       4 |                 4 |
| Shipment 2    | [ ]       |       7 |                 7 |

#+BEGIN_EXAMPLE
  ,#+STARTUP: shrink
#+END_EXAMPLE
*** Allow to filter by tags/property when capturing colview

You can now use =:match= to filter entries using a todo/tags/properties
matcher.

*** Add support for Oracle's database alias in Babel blocks
=ob-sql= library already support running SQL blocks against an Oracle
database using ~sqlplus~.  Now it's possible to use alias names
defined in =TNSNAMES= file instead of specifying full connection
parameters.  See example bellow.

#+BEGIN_SRC org
  you can use the previous full connection parameters
  ,#+BEGIN_SRC sql :engine oracle :dbuser me :dbpassword my_insecure_password :database my_db_name :dbhost my_db_host :dbport 1521
  select sysdate from dual;
  ,#+END_SRC

  or the alias defined in your TNSNAMES file
  ,#+BEGIN_SRC sql :engine oracle :dbuser me :dbpassword my_insecure_password :database my_tns_alias
  select sysdate from dual;
  ,#+END_SRC
#+END_SRC

*** ~org-agenda-set-restriction-lock~ toggle agenda restriction at point

You can set an agenda restriction lock with =C-x C-x <= or with =<= at the
beginning of a headline when using Org speed commands.  Now, if there
is already a restriction at point, hitting =<= again (or =C-x C-x <=) will
remove it.

** New commands and functions

*** ~org-insert-structure-template~

This function can be used to wrap existing text of Org elements in
a #+BEGIN_FOO/#+END_FOO block.  Bound to C-c C-x w by default.

*** ~org-export-excluded-from-toc-p~

See docstring for details.

*** ~org-timestamp-to-time~
*** ~org-timestamp-from-string~
*** ~org-timestamp-from-time~
*** ~org-attach-dired-to-subtree~

See docstring for details.

*** ~org-toggle-narrow-to-subtree~

Toggle the narrowing state of the buffer: when in a narrowed state,
widen, otherwise call ~org-narrow-to-subtree~ to narrow.

This is attached to the "s" speed command, so that hitting "s" twice
will go back to the widen state.

*** ~org-browse-news~

Browse https://orgmode.org/Changes.html to let users read informations
about the last major release.

There is a new menu entry for this in the "Documentation" menu item.

*** ~org-info-find-node~

From an Org file or an agenda switch to a suitable info page depending
on the context.

The function is bound to =C-c C-x I=.

** Removed commands and functions
*** ~org-outline-overlay-data~
Use ~org-save-outline-visibility~ instead.
*** ~org-set-outline-overlay-data~
Use ~org-save-outline-visibility~ instead.
*** ~org-get-string-indentation~
It was not used throughout the code base.
*** ~org-fix-indentation~
It was not used throughout code base.
*** ~org-context-p~
Use ~org-element-at-point~ instead.
*** ~org-preserve-lc~
It is no longer used in the code base.
*** ~org-try-structure-completion~
Org Tempo may be used as a replacement.  See details above.
** Removed options

*** org-babel-use-quick-and-dirty-noweb-expansion

See [[*Change to Noweb expansion][Change to Noweb expansion]] for explanations.

** Miscellaneous

*** New default value for ~org-texinfo-table-scientific-notation~

It is now nil, which means numbers in scientific notation are not
handled specially by default.

*** New default value for ~org-latex-table-scientific-notation~

It is now nil, which means numbers in scientific notation are not
handled specially by default.

*** New face: ~org-upcoming-distant-deadline~

It is meant to be used as the face for distant deadlines, see
~org-agenda-deadline-faces~

*** ~org-paste-subtree~ no longer breaks sections

Unless point is at the beginning of a headline, ~org-paste-subtree~
now pastes the tree before the next visible headline.  If you need to
break the section, use ~org-yank~ instead.

*** ~org-table-insert-column~ inserts a column to the right

It used to insert it on the left.  With this change,
~org-table-insert-column~ and ~org-table-delete-column~ are
reciprocal.

*** ~org-publish-resolve-external-link~ accepts a new optional argument.
*** ~org-irc.el~ now supports exporting =irc:= links properly

Previously, irc links were exported by ~ox-md~ and ~ox-html~ as normal
file links, which lead to them being broken in web browsers. Now both
of these exporters will properly export to =irc:= links, which will
open properly in irc clients from web browsers.

*** ~org-comment-dwim~ (bound to =M-;=) now comments headings, if point is on a heading
*** Add support for open source block in window below

Set option ~org-src-window-setup~ to ~split-window-below~.

*** Alphabetic sorting in headings and tags now uses the locale’s sorting rules

When sorting alphabetically, ~org-sort-entries~ and
~org-tags-sort-function~ now sort according to the locale’s collation
rules instead of by code-point.
*** New speed command "k" to kill (cut) the subtree at point
* Version 9.1

** Incompatible changes

*** Variables relative to clocksum duration are obsolete

~org-time-clocksum-format~, ~org-time-clocksum-use-fractional~ and
~org-time-clocksum-fractional-format~ are obsolete.  If you changed
them, consider modifying ~org-duration-format~ instead.

Variable ~org-time-clocksum-use-effort-durations~ is also obsolete.
Consider setting ~org-duration-units~ instead.

*** ~org-at-timestamp-p~ optional argument accepts different values

See docstrings for the allowed values.  For backward compatibility,
~(org-at-timestamp-p t)~ is still supported, but should be updated
accordingly.

*** ~org-capture-templates~ no longer accepts S-expressions as file names

Since functions are allowed there, a straightforward way to migrate
is to turn, e.g.,

: (file (sexp))

into

: (file (lambda () (sexp)))

*** Deleted contributed packages

=org-ebib.el, =org-bullets.el= and =org-mime.el= have been deleted
from the contrib/ directory.

You can now find them here :

- https://github.com/joostkremers/ebib
- https://github.com/sabof/org-bullets
- https://github.com/org-mime/org-mime

*** Change ~org-texinfo-classes~ value

The value cannot support functions to create sectionning commands
anymore.  Also, the sectionning commands should include commands for
appendices.  See the docstring for more information.

*** Removal of ~:sitemap-sans-extension~

The publishing property is no longer recognized, as a consequence of
changes to site-map generation.

You can get the same functionality by setting ~:sitemap-format-entry~
to the following

#+BEGIN_SRC elisp
(lambda (entry style project)
  (cond ((not (directory-name-p entry))
	 (format "[[file:%s][%s]]"
		 (file-name-sans-extension entry)
		 (org-publish-find-title entry project)))
	((eq style 'tree) (file-name-nondirectory (directory-file-name entry)))
	(t entry)))
#+END_SRC

*** Change signature for ~:sitemap-function~

~:sitemap-function~ now expects to be called with two arguments.  See
~org-publish-project-alist~ for details.

*** Change signature for some properties in ~org-list-to-generic~

~:istart~, ~:icount~, ~:iend~ and ~:isep~ now expect the type of the
list as their first argument.

*** Change signature for ~org-get-repeater~

The optional argument is now a string to extract the repeater from.
See docstring for details.

*** Change signature for ~org-time-string-to-time~

See docstring for changes.

*** Change order of items in ~org-agenda-time-grid~

~org-agenda-time-grid~ gained an extra item to allow users to customize
the string displayed after times in the agenda. See docstring for
details.

*** ~tags-todo~ custom searches now include DONE keywords

Use "/!" markup when filtering TODO keywords to get only not-done TODO
keywords.

*** Removal of =ob-scala.el=

See [[https://github.com/ensime/emacs-scala-mode/issues/114][this github issue]].

You can use =ob-scala.el= as packaged in scala-mode, available from the
MELPA repository.

** New features
*** iCalendar export uses inheritance for TIMEZONE and LOCATION properties
Both these properties can be inherited during iCalendar export,
depending on the value of ~org-use-property-inheritance~.
*** iCalendar export respects a TIMEZONE property
Set the TIMEZONE property on an entry to specify a time zone for that
entry only during iCalendar export.  The property value should be
specified as in "Europe/London".
*** ~org-attach~ can move directory contents
When setting a new directory for an entry, org-attach offers to move
files over from the old directory.  Using a prefix arg will reset the
directory to old, ID based one.
*** New Org duration library
This new library implements tools to read and print time durations in
various formats (e.g., "H:MM", or "1d 2h 3min"...).

See ~org-duration-to-minutes~ and ~org-duration-from-minutes~
docstrings.

*** Agenda
**** New variable : ~org-agenda-show-future-repeats~
**** New variable : ~org-agenda-prefer-last-repeat~
**** New variable : ~org-deadline-past-days~
See docstring for details.
**** Binding C-c C-x < for ~org-agenda-set-restriction-lock-from-agenda~
**** New auto-align default setting for =org-agenda-tags-column=

=org-agenda-tags-column= can now be set to =auto=, which will
automatically align tags to the right edge of the window.  This is now
the default setting.

*** New value for ~org-publish-sitemap-sort-folders~

The new ~ignore~ value effectively allows toggling inclusion of
directories in published site-maps.

*** Babel

**** Scheme: support for tables
**** Scheme: new variable: ~org-babel-scheme-null-to~

This new custom option allows to use a empty list or null symbol to
format the table output, initially assigned to ~hlines~.

**** Scheme: new header ~:prologue~

A new block code header has been created for Org Babel that enables
developers to prepend code to the scheme block being processed.

Multiple ~:prologue~ headers can be added each of them using a string
with the content to be added.

The scheme blocks are prepared by surronding the code in the block
with a let form. The content of the ~:prologue~ headers are prepended
before this let form.

**** Support for hledger accounting reports added
**** Clojure: new setting ~org-babel-clojure-sync-nrepl-timeout~

Creation of a new setting to specify the Cider timeout.  By setting
the =org-babel-clojure-sync-nrepl-timeout= setting option.  The value
is in seconds and if set to =nil= then no timeout will occur.
**** Clojure: new header ~:show-process~

A new block code header has been created for Org Babel that enables
developers to output the process of an ongoing process into a new
window/buffer.

You can tell Org Babel to output the process of a running code block.

To show that output you only have to specify the =:show-process=
option in the code block's header like this:

#+begin_example
,#+BEGIN_SRC clojure :results output :show-process t
  (dotimes [n 10]
    (println n ".")
    (Thread/sleep 500))
,#+END_SRC
#+end_example

If =:show-process= is specified that way, then when you will run the
code using =C-c C-c= a new window will open in Emacs.  Everything that
is output by the REPL will immediately be added to that new window.

When the processing of the code is finished, then the window and its
buffer will be closed and the results will be reported in the
=#+RESULTS= section.

Note that the =:results= parameter's behavior is *not* changed.  If
=silent= is specified, then no result will be displayed.  If =output=
is specified then all the output from the window will appears in the
results section.  If =value= is specified, then only the last returned
value of the code will be displayed in the results section.

**** Maxima: new headers ~:prologue~ and ~:epilogue~
Babel options ~:prologue~ and ~:epilogue~ have been implemented for
Maxima src blocks which prepend and append, respectively, the given
code strings.  This can be useful for specifying formatting settings
which would add clutter to exported code.  For instance, you can use
this ~:prologue "fpprintprec: 2; linel: 50;"~ for presenting Maxima
results in a beamer presentation.
**** PlantUML: add support for header arguments

[[http://plantuml.com/][Plantuml]] source blocks now support the [[https://orgmode.org/manual/prologue.html#prologue][~:prologue~]], [[https://orgmode.org/manual/epilogue.html#epilogue][~:epilogue~]] and
[[https://orgmode.org/manual/var.html#var][~:var~]] header arguments.

**** SQL: new engine added ~sqsh~

A new engine was added to support ~sqsh~ command line utility for use
against Microsoft SQL Server or Sybase SQL server.

More information on ~sqsh~ can be found here: [[https://sourceforge.net/projects/sqsh/][sourceforge/sqsh]]

To use ~sqsh~ in an *sql* =SRC_BLK= set the =:engine= like this:

#+begin_example
,#+BEGIN_SRC sql :engine sqsh :dbhost my_host :dbuser master :dbpassword pass :database support
Select * From Users
Where clue > 0
,#+END_SRC
#+end_example

**** SQL: new engine added =vertica=

A new engine was added to support vsql command line utility for use
against HP Vertica.

More information on =vsql= can be found here: [[https://my.vertica.com/docs/7.2.x/HTML/index.htm#Authoring/ConnectingToHPVertica/vsql/UsingVsql.htm][my.vertica.com]]

To use =vertica= in an sql =SRC_BLK= set the =:engine= like this:

#+BEGIN_EXAMPLE
  ,#+BEGIN_SRC sql :engine vertica :dbhost my_host :dbuser dbadmin :dbpassword pw :database vmart
  SELECT * FROM nodes;
  ,#+END_SRC
#+END_EXAMPLE
**** C++: New header ~:namespaces~

The new ~:namespaces~ export option can be used to specify namespaces
to be used within a C++ org source block.  Its usage is similar to
~:includes~, in that it can accept multiple, space-separated
namespaces to use.  This header is equivalent to adding ~using
namespace <name>;~ in the source block. Here is a "Hello World" in C++
using ~:namespaces~:

#+begin_example
  ,#+BEGIN_SRC C++ :results output :namespaces std :includes <iostream>
    cout << "Hello World" << endl;
  ,#+END_SRC
#+end_example

**** Support for Vala language

[[https://wiki.gnome.org/Projects/Vala][Vala]] language blocks support two special header arguments:

- ~:flags~ passes arguments to the compiler
- ~:cmdline~ passes commandline arguments to the generated executable

Support for [[https://orgmode.org/manual/var.html#var][~:var~]] does not exist yet, also there is no [[https://orgmode.org/manual/session.html#session][~:session~]]
support because Vala is a compiled language.

The Vala compiler binary can be changed via the ~defcustom~
~org-babel-vala-compiler~.

*** New ~function~ scope argument for the Clock Table
Added a nullary function that returns a list of files as a possible
argument for the scope of the clock table.
*** Export
**** Implement vernacular table of contents in Markdown exporter
Global table of contents are generated using vanilla Markdown syntax
instead of HTML.  Also #+TOC keyword, including local table of
contents, are now supported.
**** Add Slovanian translations
**** Implement ~org-export-insert-image-links~
This new function is meant to be used in back-ends supporting images
as descriptions of links, a.k.a. image links.  See its docstring for
details.
**** New macro : ~{{{n}}}~
This macro creates and increment multiple counters in a document.  See
manual for details.
**** Add global macros through ~org-export-global-macros~
With this variable, one can define macros available for all documents.
**** New keyword ~#+EXPORT_FILE_NAME~
Similarly to ~:EXPORT_FILE_NAME:~ property, this keyword allows the
user to specify the name of the output file upon exporting the
document.  This also has an effect on publishing.
**** Horizontal rules are no longer ignored in LaTeX table math mode
**** Use ~compilation-mode~ for compilation output
**** Plain lists accept a new ~:separator~ attribute in Texinfo

The new ~:separator~ attribute splits a tag from a description list
item into multiple parts.  This allows to have two-column tables with
multiple entries in the first column.  See manual for more details.

**** ~latex-environment~ elements support ~caption~ keywords for LaTeX export
*** ~org-edit-special~ can edit LaTeX environments

Using ~C-c '~ on a LaTeX environment opens a sub-editing buffer.  By
default, major mode in that buffer is ~latex-mode~, but it can be
changed by configuring ~org-src-lang-modes~.

*** ~org-list-to-generic~ includes a new property: ~:ifmt~

~:ifmt~ is a function to be called on the body of each item.  See
~org-list-to-generic~ documentation for details.

*** New variable : ~org-bibtex-headline-format-function~
This allow to use a different title than entry title.

*** ~org-attach~ supports attaching files from URLs

Using ~C-c C-a u~ prompts for a URL pointing to a file to be attached
to the document.

*** New option for ~org-refile-use-outline-path~
~org-refile-use-outline-path~ now supports the setting ~buffer-name~,
which causes refile targets to be prefixed with the buffer’s
name. This is particularly useful when used in conjunction with
~uniquify.el~.

*** ~org-file-contents~ now allows the FILE argument to be a URL.
This allows ~#+SETUPFILE:~ to accept a URL instead of a local file
path.  The URL contents are auto-downloaded and saved to a temporary
cache ~org--file-cache~.  A new optional argument ~NOCACHE~ is added
to ~org-file-contents~.

*** ~org-mode-restart~ now resets the newly added ~org--file-cache~.
Using ~C-c C-c~ on any keyword (like ~#+SETUPFILE~) will reset the
that file cache.

*** New option : ~org-table-duration-hour-zero-padding~
This variable allow computed durations in tables to be zero-padded.

*** New mode switch for table formulas : =U=
This mode omits seconds in durations.

** Removed functions

*** Org Timeline

This feature has been removed.  Use a custom agenda view, possibly
narrowed to current buffer to achieve a similar functionality.

*** ~org-agenda-skip-entry-when-regexp-matches~ is obsolete

Use ~org-agenda-skip-if~ instead.

*** ~org-agenda-skip-subtree-when-regexp-matches~ is obsolete

Use ~org-agenda-skip-if~ instead.

*** ~org-agenda-skip-entry-when-regexp-matches-in-subtree~ is obsolete

Use ~org-agenda-skip-if~ instead.

*** ~org-minutes-to-clocksum-string~ is obsolete

Use ~org-duration-from-minutes~ instead.

*** ~org-hh:mm-string-to-minutes~ is obsolete

Use ~org-duration-to-minutes~ instead.

*** ~org-duration-string-to-minutes~ is obsolete

Use ~org-duration-to-minutes~ instead.

*** ~org-gnus-nnimap-cached-article-number~ is removed.

This function relied on ~nnimap-group-overview-filename~, which was
removed from Gnus circa September 2010.

** Removed options

*** ~org-agenda-repeating-timestamp-show-all~ is removed.

For an equivalent to a ~nil~ value, set
~org-agenda-show-future-repeats~ to nil and
~org-agenda-prefer-last-repeat~ to ~t~.

*** ~org-gnus-nnimap-query-article-no-from-file~ is removed.

This variable has no effect, as it was relying on a function that was
removed from Gnus circa September 2010.

*** ~org-usenet-links-prefer-google~ is obsolete.

Use ~org-gnus-prefer-web-links~ instead.

*** ~org-publish-sitemap-file-entry-format~ is deprecated

One can provide new ~:sitemap-format-entry~ property for a function
equivalent to the removed format string.

*** ~org-enable-table-editor~ is removed.

Setting it to a ~nil~ value broke some other features (e.g., speed
keys).

*** ~org-export-use-babel~ cannot be set to ~inline-only~

The variable is now a boolean.

*** ~org-texinfo-def-table-markup~ is obsolete

Use ~org-texinfo-table-default-markup~ instead.

** New functions

*** ~org-publish-find-property~

This function can be used as a tool to format entries in a site-map,
in addition to ~org-publish-find-title~ and ~org-publish-find-date~.

*** ~org-list-to-org~

It is the reciprocal of ~org-list-to-lisp~, which see.

*** ~org-agenda-set-restriction-lock-from-agenda~

Call ~org-agenda-set-restriction-lock~ from the agenda.

** Miscellaneous

*** The Library of Babel now on Worg

The library-of-babel.org used to be accessible from the =doc/=
directory, distributed with Org’s core.  It is now accessible
from the Worg community-driven documentation [[https://orgmode.org/worg/library-of-babel.html][here]].

If you want to contribute to it, please see [[https://orgmode.org/worg/org-contribute.html][how to contribute]].

*** Allow multiple columns view

Columns view is not limited to a single buffer anymore.
*** Org Attach obeys ~dired-dwim-target~

When a Dired buffer is opened next to the Org document being edited,
the prompt for file to attach can start in the Dired buffer's
directory if `dired-dwim-target' in non-nil.

*** ~org-fill-paragraph~ can now fill a whole region
*** More specific anniversary descriptions

Anniversary descriptions (used in the agenda view, for instance)
include the point in time, when the anniversary appears.  This is,
in its most general form, just the date of the anniversary.  Or
more specific terms, like "today", "tomorrow" or "in n days" are
used to describe the time span.

This feature allows to automatically change the description of an
anniversary, depending on if it occurs in the next few days or
far away in the future.

*** Computed dates in tables appear as inactive time stamps

*** Save point before opening a file with an unknown search option

When following a file link with a search option (e.g., =::#custom-id=)
that doesn't exist in the target file, save positon before raising an
error.  As a consequence, it is possible to jump back to the original
document with ~org-mark-ring-goto~ (default binding =C-c &=).

*** ~org-get-heading~ accepts two more optional arguments

See docstring for details.

*** New option ~org-babel-uppercase-example-markers~

This variable is a ~defcustom~ and replaces the variable
~org-babel-capitalize-example-region-markers~, which is a ~defvar~ and
is now obselete.
*** =INCLUDE= keywords in commented trees are now ignored.
*** Default value for ~org-texinfo-text-markup-alist~ changed.

Now ~=...=~ markup uses ~@samp{}~ instead of ~@verb{}~.  You can use
~@verb{}~ again by customizing the variable.
*** Texinfo exports example blocks as ~@example~
*** Texinfo exports inline src blocks as ~@code{}~
*** Texinfo default table markup is ~@asis~
It used to be ~@samp~ but ~@asis~ is neutral and, therefore, more
suitable as a default value.
*** Texinfo default process includes ~--no-split~ option
*** New entities : ~\dollar~ and ~\USD~
*** ~org-parse-time-string~ accepts a new optional argument
=ZONE= specifies the current time zone.
*** ~org-time-string-to-seconds~ now accepts an optional =ZONE= argument
*** Support for date style URLs in =org-protocol://open-source=
    URLs like =https://cool-blog.com/2017/05/20/cool-post/= are
    covered by rewrite rules.

*** Add (C) =COMMENT= support to ~org-structure-template-alist~

* Version 9.0

** Incompatible changes

*** Emacs 23 support has been dropped

From now on, Org expects at least Emacs 24.3, although Emacs 24.4 or
above is suggested.

*** XEmacs support has been dropped

Incomplete compatibility layer with XEmacs has been removed.  If you
want to take over maintainance of this compatibility, please contact
our mailing list.

*** New syntax for export blocks

Export blocks are explicitly marked as such at the syntax level to
disambiguate their parsing from special blocks.  The new syntax is

#+BEGIN_SRC org
,#+BEGIN_EXPORT backend
...
,#+END_EXPORT
#+END_SRC

instead of

#+BEGIN_SRC org
,#+BEGIN_backend
...
,#+END_backend
#+END_SRC

As a consequence, =INCLUDE= keywords syntax is modified, e.g.,

#+BEGIN_SRC org
,#+INCLUDE: "file.org" HTML
#+END_SRC

becomes

#+BEGIN_SRC org
,#+INCLUDE: "file.org" export html
#+END_SRC

The following function repairs export blocks and =INCLUDE= keywords
using previous syntax:

#+BEGIN_SRC emacs-lisp
(defun org-repair-export-blocks ()
  "Repair export blocks and INCLUDE keywords in current buffer."
  (interactive)
  (when (eq major-mode 'org-mode)
    (let ((case-fold-search t)
          (back-end-re (regexp-opt
                        '("HTML" "ASCII" "LATEX" "ODT" "MARKDOWN" "MD" "ORG"
                          "MAN" "BEAMER" "TEXINFO" "GROFF" "KOMA-LETTER")
                        t)))
      (org-with-wide-buffer
       (goto-char (point-min))
       (let ((block-re (concat "^[ \t]*#\\+BEGIN_" back-end-re)))
         (save-excursion
           (while (re-search-forward block-re nil t)
             (let ((element (save-match-data (org-element-at-point))))
               (when (eq (org-element-type element) 'special-block)
                 (save-excursion
                   (goto-char (org-element-property :end element))
                   (save-match-data (search-backward "_"))
                   (forward-char)
                   (insert "EXPORT")
                   (delete-region (point) (line-end-position)))
                 (replace-match "EXPORT \\1" nil nil nil 1))))))
       (let ((include-re
              (format "^[ \t]*#\\+INCLUDE: .*?%s[ \t]*$" back-end-re)))
         (while (re-search-forward include-re nil t)
           (let ((element (save-match-data (org-element-at-point))))
             (when (and (eq (org-element-type element) 'keyword)
                        (string= (org-element-property :key element) "INCLUDE"))
               (replace-match "EXPORT \\1" nil nil nil 1)))))))))
#+END_SRC

Moreover, ~:export-block~ keyword used in ~org-export-define-backend~ and
~org-export-define-derived-backend~ is no longer used and needs to be
removed.

*** Footnotes

**** [1]-like constructs are not valid footnotes

Using =[1]= as a footnote was already discouraged in the manual, since
it introduced too many false-positives in many Org documents.  These
constructs are now unsupported.

If you used =[N]= in some of your documents, consider turning them into
=[fn:N]=.

**** /Org Footnote/ library doesn't handle non-Org buffers

Commands for footnotes in an Org document no longer try to do
something in non-Org ones.  If you need to have footnotes there,
consider using the =footnote.el= library, shipped with Emacs.

In particular, ~org-footnote-tag-for-non-org-mode-files~ no longer
exists.

*** ~org-file-apps~ no longer accepts S-expressions as commands

The variable now accepts functions of two arguments instead of plain
S-expressions.  Replacing a S-expresion with an appropriate function
is straightforward.  For example

: ("pdf" . (foo))

becomes

: ("pdf" . (lambda (file link) (foo)))

*** The ~{{{modification-time}}}~ macro can get time via =vc=

The modification time will be determined via =vc.el= if the second
argument is non-nil.  See the manual for details.

*** Preparation and completion functions in publishing projects change signature

Preparation and completion functions are now called with an argument,
which is the project property list.  It used to be dynamically scoped
through the ~project-plist~ variable.

*** Old Babel header properties are no longer supported

Using header arguments as property names is no longer possible.  As
such, the following

#+BEGIN_EXAMPLE
,* Headline
:PROPERTIES:
:exports: code
:var: a=1 b=2
:var+: c=3
:END:
#+END_EXAMPLE

should be written instead

#+BEGIN_EXAMPLE
,* Headline
:PROPERTIES:
:header-args: :exports code
:header-args: :var a=1 b=2
:header-args+: :var c=3
:END:
#+END_EXAMPLE

Please note that, however, old properties were defined at the source
block definition.  Current ones are defined where the block is called.

** New features

*** ~org-eww~ has been moved into core
*** New org-protocol key=value syntax

Org-protocol can now handle query-style parameters such as:

#+begin_example
org-protocol://store-link?url=http:%2F%2Flocalhost%2Findex.html&title=The%20title
org-protocol://capture?template=x&title=Hello&body=World&url=http:%2F%2Fexample.com
#+end_example

Old-style links such as
: org-protocol://store-link:/http:%2F%2Flocalhost%2Findex.html/The%20title
continue to be supported.

If you have defined your own handler functions for
~org-protocol-protocol-alist~, change them to accept either a property
list (for new-style links) or a string (for old-style links).  Use
~org-protocol-parse-parameters~ to convert old-style links into property
lists.

*** New Org linter library

~org-lint~ can check syntax and report common issues in Org documents.

*** New option ~date-tree-last~ for ~org-agenda-insert-diary-strategy~

When ~org-agenda-insert-diary-strategy~ is set to ~date-tree-last~, diary
entries are added to last in the date tree.

*** New ~vbar~ entity

~\vbar~ or ~\vbar{}~ will be exported unconditionnally as a =|=,
unlike to existing ~\vert~, which is expanded as ~&vert;~ when using
a HTML derived export back-end.

*** Export

**** New =#+latex_compiler= keyword to set LaTeX compiler.

PDFLaTeX, XeLaTeX, and LuaLaTeX are supported.  See the manual for
details.

**** New option ~org-export-with-broken-links~

This option tells the export process how to behave when encountering
a broken internal link.  See its docstring for more information.

**** Attributes support in custom language environments for LaTeX export

Custom language environments for LaTeX export can now define the
string to be inserted during export, using attributes to indicate the
position of the elements. See variable ~org-latex-custom-lang-environments~
for more details.

**** New Texinfo ~options~ attribute on special blocks

Using ~:options~ as a Texinfo attribute, it is possible to add
information to custom environments.  See manual for details.

**** New HTML ~id~ attributes on special, example and quote blocks

If the block has a =#+NAME:= attribute assigned, then the HTML element
will have an ~id~ attribute with that name in the HTML export. This
enables one to create links to these elements in other places, e.g.,
~<a href="#name">text</a>~.

**** Listings with captions are now numbered in HTML export

The class associated to the numbering is "listing-number".  If you
don't want these blocks to be numbered, as it was the case until now,
You may want to add ~.listing-number { display: none; }~ to the CSS
used.

**** Line Numbering in SRC/EXAMPLE blocks support arbitrary start number

The ~-n~ option to ~SRC~ and ~EXAMPLE~ blocks can now take a numeric
argument to specify the staring line number for the source or example
block.  The ~+n~ option can now take a numeric argument that will be
added to the last line number from the previous block as the starting
point for the SRC/EXAMPLE block.

#+BEGIN_SRC org
,#+BEGIN_SRC emacs-lisp -n 20
;; this will export with line number 20
(message "This is line 21")
,#+END_SRC
,#+BEGIN_SRC emacs-lisp +n 10
;; This will be listed as line 31
(message "This is line 32")
,#+END_SRC
#+END_SRC

**** Allow toggling center for images in LaTeX export

With the global variable ~org-latex-images-centered~ or the local
attribute ~:center~ it is now possible to center an image in LaTeX
export.

**** Default CSS class ~org-svg~ for SVG images in HTML export

SVG images exported in HTML are now by default assigned a CSS class
~org-svg~ if no CSS class is specified with the ~:class~ attribute. By
default, the CSS styling of class ~org-svg~ specifies an image width of
90\thinsp{}% of the container the image.

**** Markdown footnote export customization

Variables ~org-md-footnotes-section~ and ~org-md-footnote-format~
introduced for =ox-md.el=.  Both new variables define template strings
which can be used to customize the format of the exported footnotes
section and individual footnotes, respectively.

*** Babel

**** Blocks with coderefs labels can now be evaluated

The labels are removed prior to evaluating the block.

**** Support for Lua language
**** Support for SLY in Lisp blocks

See ~org-babel-lisp-eval-fn~ to activate it.

**** Support for Stan language

New ob-stan.el library.

Evaluating a Stan block can produce two different results.

1. Dump the source code contents to a file.

   This file can then be used as a variable in other blocks, which
   allows interfaces like RStan to use the model.

2. Compile the contents to a model file.

   This provides access to the CmdStan interface.  To use this, set
   ~org-babel-stan-cmdstan-directory~ and provide a ~:file~ argument
   that does not end in ".stan".

For more information and usage examples, visit
https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-stan.html

**** Support for Oracle databases via ~sqlplus~

=ob-sql= library supports running SQL blocks against an Oracle
database using ~sqlplus~.  Use with properties like this (all
mandatory):

#+BEGIN_EXAMPLE
:engine oracle
:dbhost <host.com>
:dbport <1521>
:dbuser <username>
:database <database>
:dbpassword <secret>
#+END_EXAMPLE

**** Improved support to Microsoft SQL Server via ~sqlcmd~

=ob-sql= library removes support to the ~msosql~ engine which uses the
deprecated ~osql~ command line tool, and replaces it with ~mssql~
engine which uses the ~sqlcmd~ command line tool.  Use with properties
like this:

#+BEGIN_EXAMPLE
:engine mssql
:dbhost <host.com>
:dbuser <username>
:dbpassword <secret>
:database <database>
#+END_EXAMPLE

If you want to use the *trusted connection* feature, omit *both* the
=dbuser= and =dbpassword= properties and add =cmdline -E= to the properties.

If your Emacs is running in a Cygwin environment, the =ob-sql= library
can pass the converted path to the =sqlcmd= tool.

**** Improved support of header arguments for postgresql 

The postgresql engine in a sql code block supports now ~:dbport~ nd
~:dbpassword~ as header arguments.

**** Support for additional plantuml output formats

The support for output formats of [[http://plantuml.com/][plantuml]] has been extended to now
include:

All Diagrams:
- png ::
- svg ::
- eps ::
- pdf ::
- vdx ::
- txt :: ASCII art
- utxt :: ASCII art using unicode characters

Class Diagrams:
- xmi ::
- html ::

State Diagrams:
- scxml ::

The output formats are determined by the file extension specified
using the :file property, e.g.:

#+begin_src plantuml :file diagram.png
@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml
#+end_src

Please note that *pdf* *does not work out of the box* and needs additional
setup in addition to plantuml.  See [[http://plantuml.com/pdf.html]] for
details and setup information.

*** Rewrite of radio lists

Radio lists, i.e, Org plain lists in foreign buffers, have been
rewritten to be on par with Radio tables.  You can use a large set of
parameters to control how a given list should be rendered.  See manual
for details.

*** org-bbdb-anniversaries-future

Used like ~org-bbdb-anniversaries~, it provides a few days warning for
upcoming anniversaries (default: 7 days).

*** Clear non-repeated SCHEDULED upon repeating a task

If the task is repeated, and therefore done at least one, scheduling
information is no longer relevant.  It is therefore removed.

See [[git:481719fbd5751aaa9c672b762cb43aea8ee986b0][commit message]] for more information.

*** Support for ISO week trees

ISO week trees are an alternative date tree format that orders entries
by ISO week and not by month.

For example:

: * 2015
: ** 2015-W35
: ** 2015-W36
: *** 2015-08-31 Monday

They are supported in org-capture via ~file+weektree~ and
~file+weektree+prompt~ target specifications.

*** Accept ~:indent~ parameter when capturing column view

When defining a "columnview" dynamic block, it is now possible to add
an :indent parameter, much like the one in the clock table.

On the other hand, stars no longer appear in an ITEM field.

*** Columns view

**** ~org-columns~ accepts a prefix argument

When called with a prefix argument, ~org-columns~ apply to the whole
buffer unconditionally.

**** New variable : ~org-agenda-view-columns-initially~

The variable used to be a ~defvar~, it is now a ~defcustom~.

**** Allow custom summaries

It is now possible to add new summary types, or override those
provided by Org by customizing ~org-columns-summary-types~, which see.

**** Allow multiple summaries for any property

Columns can now summarize the same property using different summary
types.

*** Preview LaTeX snippets in buffers not visiting files
*** New option ~org-attach-commit~

When non-nil, commit attachments with git, assuming the document is in
a git repository.

*** Allow conditional case-fold searches in ~org-occur~

When set to ~smart~, the new variable ~org-occur-case-fold-search~ allows
to mimic =isearch.el=: if the regexp searched contains any upper case
character (or character class), the search is case sensitive.
Otherwise, it is case insensitive.

*** More robust repeated =ox-latex= footnote handling

Repeated footnotes are now numbered by referring to a label in the
first footnote.

*** The ~org-block~ face is inherited by ~src-blocks~

This works also when =org-src-fontify-natively= is non-nil.  It is also
possible to specify per-languages faces.  See =org-src-block-faces= and
the manual for details.

*** Links are now customizable

Links can now have custom colors, tooltips, keymaps, display behavior,
etc.  Links are now centralized in ~org-link-parameters~.

** New functions

*** ~org-next-line-empty-p~

It replaces the deprecated ~next~ argument to ~org-previous-line-empty-p~.

*** ~org-show-children~

It is a faster implementation of ~outline-show-children~.

** Removed functions

*** ~org-agenda-filter-by-tag-refine~ has been removed.

Use ~org-agenda-filter-by-tag~ instead.

*** ~org-agenda-todayp~ is deprecated.

Use ~org-agenda-today-p~ instead.

*** ~org-babel-get-header~ is removed.

Use ~org-babel--get-vars~ or ~assq~ instead, as applicable.

*** ~org-babel-trim~ is deprecated.

Use ~org-trim~ instead.

*** ~org-element-remove-indentation~ is deprecated.

Use ~org-remove-indentation~ instead.

*** ~org-image-file-name-regexp~ is deprecated

Use ~image-file-name-regexp~ instead.
The never-used-in-core ~extensions~ argument has been dropped.

*** ~org-list-parse-list~ is deprecated

Use ~org-list-to-lisp~ instead.

*** ~org-on-heading-p~ is deprecated

A comment to this effect was in the source code since 7.8.03, but
now a byte-compiler warning will be generated as well.

*** ~org-table-p~ is deprecated

Use ~org-at-table-p~ instead.

*** ~org-table-recognize-table.el~ is deprecated

It was not called by any org code since 2010.

*** Various reimplementations of cl-lib functions are deprecated

The affected functions are:
- ~org-count~
- ~org-remove-if~
- ~org-remove-if-not~
- ~org-reduce~
- ~org-every~
- ~org-some~

Additionally, ~org-sublist~ is deprecated in favor of ~cl-subseq~.  Note
the differences in indexing conventions: ~org-sublist~ is 1-based and
end-inclusive; ~cl-subseq~ is 0-based and end-exclusive.

** Removed options

*** Remove all options related to ~ido~ or ~iswitchb~

This includes ~org-completion-use-iswitchb~ and ~org-completion-use-ido~.
Instead Org uses regular functions, e.g., ~completion-read~ so as to
let those libraries operate.

*** Remove ~org-list-empty-line-terminates-plain-lists~

Two consecutive blank lines always terminate all levels of current
plain list.

*** ~fixltx2e~ is removed from ~org-latex-default-packages-alist~

fixltx2e is obsolete, see LaTeX News 22.

** Miscellaneous
*** Add Icelandic smart quotes
*** Allow multiple receiver locations in radio tables and lists
*** Allow angular links within link descriptions

It is now allowed to write, e.g.,
~[[http:orgmode.org][<file:unicorn.png>]]~ as an equivalent to
~[[http:orgmode.org][file:unicorn.png]]~.  The advantage of the former
is that spaces are allowed within the path.

*** Beamer export back-ends uses ~org-latex-prefer-user-labels~
*** ~:preparation-function~ called earlier during publishing

Functions in this list are called before any file is associated to the
current projet.  Thus, they can be used to generate to be published
Org files.

*** Function ~org-remove-indentation~ changes.

The new algorithm doesn't remove TAB characters not used for
indentation.

*** Secure placeholders in capture templates

Placeholders in capture templates are no longer expanded recursively.
However, ~%(...)~ constructs are expanded very late, so you can fill
the contents of the S-exp with the replacement text of non-interactive
placeholders.  As before, interactive ones are still expanded as the
very last step, so the previous statement doesn't apply to them.

Note that only ~%(...)~ placeholders initially present in the
template, or introduced using a file placeholder, i.e., ~%[...]~ are
expanded.  This prevents evaluating potentially malicious code when
another placeholder, e.g., ~%i~ expands to a S-exp.

*** Links stored by ~org-gnus-store-link~ in nnir groups

Since gnus nnir groups are temporary, ~org-gnus-store-link~ now refers
to the article's original group.

*** ~org-babel-check-confirm-evaluate~ is now a function instead of a macro

The calling convention has changed.

*** HTML export table row customization changes

Variable ~org-html-table-row-tags~ has been split into
~org-html-table-row-open-tag~ and ~org-html-table-row-close-tag~.
Both new variables can be either a string or a function which will be
called with 6 parameters.

*** =ITEM= special property returns headline without stars
*** Rename ~org-insert-columns-dblock~ into ~org-columns-insert-dblock~

The previous name is, for the time being, kept as an obsolete alias.

*** ~org-trim~ can preserve leading indentation.

When setting a new optional argument to a non-nil value, ~org-trim~
preserves leading indentation while removing blank lines at the
beginning of the string.  The behavior is identical for white space at
the end of the string.

*** Function ~org-info-export~ changes.

HTML links created from certain info links now point to =gnu.org= URL's rather
than just to local files. For example info links such as =info:emacs#List
Buffers= used to be converted to HTML links like this:

: <a href="emacs.html#List-Buffers">emacs#List Buffers</a>

where local file =emacs.html= is referenced.
For most folks this file does not exist.
Thus the new behavior is to generate this HTML link instead:

: <a href="http://www.gnu.org/software/emacs/manual/html_mono/emacs.html#List-Buffers">emacs#List Buffers</a>

All emacs related info links are similarly translated plus few other
=gnu.org= manuals.

*** Repeaters with a ~++~ interval and a time can be shifted to later today

Previously, if a recurring task had a timestamp of
~<2016-01-01 Fri 20:00 ++1d>~ and was completed on =2016-01-02= at
=08:00=, the task would skip =2016-01-02= and would be rescheduled for
=2016-01-03=.  Timestamps with ~++~ cookies and a specific time will
now shift to the first possible future occurrence, even if the
occurrence is later the same day the task is completed.  (Timestamps
already in the future are still shifted one time further into the
future.)

*** ~org-mobile-action-alist~ is now a defconst

It used to be a defcustom, with a warning that it shouldn't be
modified anyway.

*** ~file+emacs~ and ~file+sys~ link types are deprecated

They are still supported in Org 9.0 but will eventually be removed in
a later release.  Use ~file~ link type along with universal arguments
to force opening it in either Emacs or with system application.

*** New defcustom ~org-babel-J-command~ stores the j command
*** New defalias ~org-babel-execute:j~

Allows J source blocks be indicated by letter j.  Previously the
indication letter was solely J.

*** ~org-open-line~ ignores tables at the very beginning of the buffer

When ~org-special-ctrl-o~ is non-nil, it is impractical to create
a blank line above a table at the beginning of the document. Now, as
a special case, ~org-open-line~ behaves normally in this situation.

*** ~org-babel-hash-show-time~ is now customizable

The experimental variable used to be more or less confidential, as
a ~defvar~.

*** New ~:format~ property to parsed links

It defines the format of the original link.  Possible values are:
~plain~, ~bracket~ and ~angle~.

* Version 8.3

** Incompatible changes

*** Properties drawers syntax changes

Properties drawers are now required to be located right after a
headline and its planning line, when applicable.

It will break some documents as TODO states changes were sometimes
logged before the property drawer.

The following function will repair them:

#+BEGIN_SRC emacs-lisp
(defun org-repair-property-drawers ()
  "Fix properties drawers in current buffer.
 Ignore non Org buffers."
  (when (eq major-mode 'org-mode)
    (org-with-wide-buffer
     (goto-char (point-min))
     (let ((case-fold-search t)
           (inline-re (and (featurep 'org-inlinetask)
                           (concat (org-inlinetask-outline-regexp)
                                   "END[ \t]*$"))))
       (org-map-entries
        (lambda ()
          (unless (and inline-re (org-looking-at-p inline-re))
            (save-excursion
              (let ((end (save-excursion (outline-next-heading) (point))))
                (forward-line)
                (when (org-looking-at-p org-planning-line-re) (forward-line))
                (when (and (< (point) end)
                           (not (org-looking-at-p org-property-drawer-re))
                           (save-excursion
                             (and (re-search-forward org-property-drawer-re end t)
                                  (eq (org-element-type
                                       (save-match-data (org-element-at-point)))
                                      'drawer))))
                  (insert (delete-and-extract-region
                           (match-beginning 0)
                           (min (1+ (match-end 0)) end)))
                  (unless (bolp) (insert "\n"))))))))))))
#+END_SRC 
*** =#+CATEGORY= keywords no longer apply partially to document

It was possible to use several such keywords and have them apply to
the text below until the next one, but strongly deprecated since Org
5.14 (2008).

=#+CATEGORY= keywords are now global to the document.  You can use node
properties to set category for a subtree, e.g.,

#+BEGIN_SRC org
,* Headline
   :PROPERTIES:
   :CATEGORY: some category
   :END:
#+END_SRC
*** New variable to control visibility when revealing a location

~org-show-following-heading~, ~org-show-siblings~,
~org-show-entry-below~ and ~org-show-hierarchy-above~ no longer exist.
Instead, visibility is controlled through a single variable:
~org-show-context-detail~, which see.

*** Replace disputed keys again when reading a date

~org-replace-disputed-keys~ has been ignored when reading date since
version 8.1, but the former behavior is restored again.

Keybinding for reading date can be customized with a new variable
~org-read-date-minibuffer-local-map~.

*** No default title is provided when =TITLE= keyword is missing

Skipping =TITLE= keyword no longer provides the current file name, or
buffer name, as the title. Instead, simply ignore the title.

*** Functions signature changes

The following functions require an additional argument.  See their
docstring for more information.

- ~org-export-collect-footnote-definitions~
- ~org-html-format-headline-function~
- ~org-html-format-inlinetask-function~
- ~org-latex-format-headline-function~
- ~org-latex-format-inlinetask-function~
- ~org-link-search~

*** Default bindings of =C-c C-n= and =C-c C-p= changed

The key sequences =C-c C-n= and =C-c C-p= are now bound to
~org-next-visible-heading~ and ~org-next-visible-heading~
respectively, rather than the =outline-mode= versions of these
functions.  The Org version of these functions skips over inline tasks
(and even-level headlines when ~org-odd-levels-only~ is set).

*** ~org-element-context~ no longer return objects in keywords

~org-element-context~ used to return objects on some keywords, i.e.,
=TITLE=, =DATE= and =AUTHOR=.  It now returns only the keyword.

*** Behavior of ~org-return~ changed

If point is before or after the headline title, insert a new line
without changing the headline.

*** ~org-timer-default-timer~ type changed from number to string

If you have, in your configuration, something like =(setq
org-timer-default-timer 10)= replace it with =(setq
org-timer-default-timer "10")=.
** New features

*** Hierarchies of tags
The functionality of nesting tags in hierarchies is added to org-mode.
This is the generalization of what was previously called "Tag groups"
in the manual.  That term is now changed to "Tag hierarchy".

The following in-buffer definition:
#+BEGIN_SRC org
  ,#+TAGS: [ Group : SubOne SubTwo ]
  ,#+TAGS: [ SubOne : SubOne1 SubOne2 ]
  ,#+TAGS: [ SubTwo : SubTwo1 SubTwo2 ]
#+END_SRC

Should be seen as the following tree of tags:
- Group
  - SubOne
    - SubOne1
    - SubOne2
  - SubTwo
    - SubTwo1
    - SubTwo2

Searching for "Group" should return all tags defined above.  Filtering
on SubOne filters also it's sub-tags.  Etc.

There is no limit on the depth for the tag hierarchy.

*** Additional syntax for non-unique grouptags
Additional syntax is defined for grouptags if the tags in the group
don't have to be distinct on a heading.

Grouptags had to previously be defined with { }.  This syntax is
already used for exclusive tags and Grouptags need their own,
non-exclusive syntax.  This behaviour is achieved with [ ].  Note: {
} can still be used also for Grouptags but then only one of the
given tags can be used on the headline at the same time.  Example:

[ group : sub1 sub2 ]

#+BEGIN_SRC org
  ,* Test                                                            :sub1:sub2:
#+END_SRC

This is a more general case than the already existing syntax for
grouptags; { }.

*** Define regular expression patterns as tags
Tags can be defined as grouptags with regular expressions as
"sub-tags".

The regular expressions in the group must be marked up within { }.
Example use:

: #+TAGS: [ Project : {P@.+} ]

Searching for the tag Project will now list all tags also including
regular expression matches for P@.+.  Good for example if tags for a
certain project is tagged with a common project-identifier,
i.e. P@2014_OrgTags.

*** Filtering in the agenda on grouptags (Tag hierarchies)
Filtering in the agenda on grouptags filter all of the related tags.
Exception if filter is applied with a (double) prefix-argument.

Filtering in the agenda on subcategories does not filter the "above"
levels anymore.

If a grouptag contains a regular expression the regular expression
is also used as a filter.

*** Minor refactoring of ~org-agenda-filter-by-tag~
Now uses the argument arg and optional argument exclude instead of
strip and narrow.  ARG because the argument has multiple purposes and
makes more sense than strip now.  The term narrowing is changed to
exclude.

The main purpose is for the function to make more logical sense when
filtering on tags now when tags can be structured in hierarchies.

*** Babel: support for sed scripts

Thanks to Bjarte Johansen for this feature.

*** Babel: support for Processing language

New ob-processing.el library.

This library implements necessary functions for implementing editing
of Processing code blocks, viewing the resulting sketches in an
external viewer, and HTML export of the sketches.

Check the documentation for more.

Thanks to Jarmo Hurri for this feature.

*** New behaviour for `org-toggle-latex-fragment'
The new behaviour is the following:

- With a double prefix argument or with a single prefix argument
  when point is before the first headline, toggle overlays in the
  whole buffer;

- With a single prefix argument, toggle overlays in the current
  subtree;

- On latex code, toggle overlay at point;

- Otherwise, toggle overlays in the current section.

*** Additional markup with =#+INCLUDE= keyword

The content of the included file can now be optionally marked up, for
instance as HTML.  See the documentation for details.

*** File links with =#+INCLUDE= keyword

Objects can be extracted via =#+INCLUDE= using file links.  It is
possible to include only the contents of the object.  See manual for
more information.

*** Drawers do not need anymore to be referenced in =#+DRAWERS=

One can use a drawer without listing it in the =#+DRAWERS= keyword,
which is now obsolete.  As a consequence, this change also deprecates
~org-drawers~ variable.

*** ~org-edit-special~ can edit export blocks

Using C-c ' on an export block now opens a sub-editing buffer.  Major
mode in that buffer is determined by export backend name (e.g.,
"latex" \to "latex-mode").  You can define exceptions to this rule by
configuring ~org-src-lang-modes~, which see.

*** Additional =:hline= processing to ob-shell

If the argument =:hlines yes= is present in a babel call, an optional
argument =:hlines-string= can be used to define a string to use as a
representation for the lisp symbol ='hline= in the shell program.  The
default is =hline=.

*** Markdown export supports switches in source blocks

For example, it is now possible to number lines using the =-n= switch
in a source block.

*** New option in ASCII export

Plain lists can have an extra margin by setting
~org-ascii-list-margin~ variable to an appopriate integer.

*** New blocks in ASCII export

ASCII export now supports =#+BEGIN_JUSTIFYRIGHT= and
=#+BEGIN_JUSTIFYLEFT= blocks.  See documentation for details.

*** More back-end specific publishing options

The number of publishing options specific to each back-end has been
increased.  See manual for details.

*** Export inline source blocks

Inline source code was used to be removed upon exporting.  They are
now handled as standard code blocks, i.e., the source code can appear
in the output, depending on the parameters.

*** Extend ~org-export-first-sibling-p~ and ~org-export-last-sibling-p~

These functions now support any element or object, not only headlines.

*** New function: ~org-export-table-row-in-header-p~

*** New function: ~org-export-get-reference~

*** New function: ~org-element-lineage~

This function deprecates ~org-export-get-genealogy~.  It also provides
more features.  See docstring for details.

*** New function: ~org-element-copy~

*** New filter: ~org-export-filter-body-functions~

Functions in this filter are applied on the body of the exported
document, befor wrapping it within the template.

*** Various improvements on radio tables

Radio tables feature now relies on Org's export framework ("ox.el").
~:no-escape~ parameter no longer exists, but additional global
parameters are now supported: ~:raw~, ~:backend~.  Moreover, there are
new parameters specific to some pre-defined translators, e.g.,
~:environment~ and ~:booktabs~ for ~orgtbl-to-latex~.  See translators
docstrings (including ~orgtbl-to-generic~) for details.

*** Non-floating minted listings in Latex export

It is not possible to specify =#+attr_latex: :float nil= in conjunction with
source blocks exported by the minted package.

*** Field formulas can now create columns as needed

Previously, evaluating formulas that referenced out-of-bounds columns
would throw an error. A new variable
~org-table-formula-create-columns~ was added to adjust this
behavior. It is now possible to silently add new columns, to do so
with a warning or to explicitly ask the user each time.

*** ASCII plot

Ability to plot values in a column through ASCII-art bars.  See manual
for details.

*** New hook: ~org-archive-hook~

This hook is called after successfully archiving a subtree, with point
on the original subtree, not yet deleted.

*** New option: ~org-attach-archive-delete~

When non-nil, attachments from archived subtrees are removed.

*** New option: ~org-latex-caption-above~

This variable generalizes ~org-latex-table-caption-above~, which is
now deprecated.  In addition to tables, it applies to source blocks,
special blocks and images.  See docstring for more information.

*** New option: ~org-latex-prefer-user-labels~

See docstring for more information.

*** Export unnumbered headlines

Headlines, for which the property ~UNNUMBERED~ is non-nil, are now
exported without section numbers irrespective of their levels.  The
property is inherited by children.

*** Tables can be sorted with an arbitrary function

It is now possible to specify a function, both programatically,
through a new optional argument, and interactively with ~f~ or ~F~
keys, to sort a table.

*** Table of contents can be local to a section

The ~TOC~ keywords now accepts an optional ~local~ parameter.  See
manual for details.

*** Countdown timers can now be paused

~org-timer-pause-time~ now pauses and restarts both relative and
countdown timers.

*** New option ~only-window~ for ~org-agenda-window-setup~

When ~org-agenda-window-setup~ is set to ~only-window~, the agenda is
displayed as the sole window of the current frame.

*** ~{{{date}}}~ macro supports optional formatting argument

It is now possible to supply and optional formatting argument to
~{{{date}}}~. See manual for details.

*** ~{{{property}}}~ macro supports optional search argument

It is now possible to supply an optional search option to
~{{{property}}}~ in order to retrieve remote properties optional.  See
manual for details.

*** New option ~org-export-with-title~

It is possible to suppress the title insertion with ~#+OPTIONS:
title:nil~ or globally using the variable ~org-export-with-title~.

*** New entities family: "\_ "

"\_ " are used to insert up to 20 contiguous spaces in various
back-ends.  In particular, this family can be used to introduce
leading spaces within table cells.

*** New MathJax configuration options

Org uses the MathJax CDN by default.  See the manual and the docstring
of ~org-html-mathjax-options~ for details.

*** New behaviour in `org-export-options-alist'

When defining a back-end, it is now possible to specify to give
`parse' behaviour on a keyword.  It is equivalent to call
`org-element-parse-secondary-string' on the value.

However, parsed =KEYWORD= is automatically associated to an
=:EXPORT_KEYWORD:= property, which can be used to override the keyword
value during a subtree export.  Moreover, macros are expanded in such
keywords and properties.

*** Viewport support in html export

Viewport for mobile-optimized website is now automatically inserted
when exporting to html.  See ~org-html-viewport~ for details.

*** New ~#+SUBTITLE~ export keyword

Org can typeset a subtitle in some export backends.  See the manual
for details.

*** Remotely edit a footnote definition

Calling ~org-edit-footnote-reference~ (C-c ') on a footnote reference
allows to edit its definition, as long as it is not anonymous, in
a dedicated buffer.  It works even if buffer is currently narrowed.

*** New function ~org-delete-indentation~ bound to ~M-^~

Work as ~delete-indentation~ unless at heading, in which case text is
added to headline text.

*** Support for images in Texinfo export

~Texinfo~ back-end now handles images.  See manual for details.

*** Support for captions in Texinfo export

Tables and source blocks can now have captions.  Additionally, lists
of tables and lists of listings can be inserted in the document with
=#+TOC= keyword.

*** Countdown timer support hh:mm:ss format

In addition to setting countdown timers in minutes, they can also be
set using the hh:mm:ss format.

*** Extend ~org-clone-subtree-with-time-shift~

~org-clone-subtree-with-time-shift~ now accepts 0 as an argument for
the number of clones, which removes the repeater from the original
subtree and creates one shifted, repeating clone.

*** New time block for clock tables: ~untilnow~

It encompasses all past closed clocks.

*** Support for the ~polyglossia~ LaTeX package

See the docstring of ~org-latex-classes~ and
~org-latex-guess-polyglossia-language~ for details.

*** None-floating tables, graphics and blocks can have captions

*** `org-insert-heading' can be forced to insert top-level headline

** Removed functions

*** Removed function ~org-translate-time~

Use ~org-timestamp-translate~ instead.

*** Removed function ~org-beamer-insert-options-template~

This function inserted a Beamer specific template at point or in
current subtree.  Use ~org-export-insert-default-template~ instead, as
it provides more features and covers all export back-ends.  It is also
accessible from the export dispatcher.

*** Removed function ~org-timer-cancel-timer~

~org-timer-stop~ now stops both relative and countdown timers.

*** Removed function ~org-export-solidify-link-text~

This function, being non-bijective, introduced bug in internal
references.  Use ~org-export-get-reference~ instead.

*** Removed function ~org-end-of-meta-data-and-drawers~

The function is superseded by ~org-end-of-meta-data~, called with an
optional argument.

*** Removed functions ~org-table-colgroup-line-p~, ~org-table-cookie-line-p~

These functions were left-over from pre 8.0 era.  They are not correct
anymore.  Since they are not needed, they have no replacement.
** Removed options

*** ~org-list-empty-line-terminates-plain-lists~ is deprecated

It will be kept in code base until next release, for backward
compatibility.

If you need to separate consecutive lists with blank lines, always use
two of them, as if this option was nil (default value).

*** ~org-export-with-creator~ is a boolean

Special ~comment~ value is no longer allowed.  It is possible to use
a body filter to add comments about the creator at the end of the
document instead.

*** Removed option =org-babel-sh-command=

This undocumented option defaulted to the value of =shell-file-name=
at the time of loading =ob-shell=.  The new behaviour is to use the
value of =shell-file-name= directly when the shell langage is =shell=.
To chose a different shell, either customize =shell-file-name= or bind
this variable locally.

*** Removed option =org-babel-sh-var-quote-fmt=

This undocumented option was supposed to provide different quoting
styles when changing the shell type.  Changing the shell type can now
be done directly from the source block and the quoting style has to be
compatible across all shells, so a customization doesn't make sense
anymore.  The chosen hard coded quoting style conforms to POSIX.

*** Removed option ~org-insert-labeled-timestamps-at-point~

Setting this option to anything else that the default value (nil)
would create invalid planning info.  This dangerous option is now
removed.

*** Removed option ~org-koma-letter-use-title~

Use org-export-with-title instead.  See also below.

*** Removed option ~org-entities-ascii-explanatory~

This variable has no effect since Org 8.0.

*** Removed option ~org-table-error-on-row-ref-crossing-hline~

This variable has no effect since August 2009.

*** Removed MathML-related options from ~org-html-mathjax-options~

MathJax automatically chooses the best display technology based on the
end-users browser.  You may force initial usage of MathML via
~org-html-mathjax-template~ or by setting the ~path~ property of
~org-html-mathjax-options~.

*** Removed comment-related filters

~org-export-filter-comment-functions~ and
~org-export-filter-comment-block-functions~ variables do not exist
anymore.
** Miscellaneous

*** Strip all meta data from ITEM special property

ITEM special property does not contain TODO, priority or tags anymore.

*** File names in links accept are now compatible with URI syntax

Absolute file names can now start with =///= in addition to =/=. E.g.,
=[[file:///home/me/unicorn.jpg]]=.

*** Footnotes in included files are now local to the file

As a consequence, it is possible to include multiple Org files with
footnotes in a master document without being concerned about footnote
labels colliding.

*** Mailto links now use regular URI syntax

This change deprecates old Org syntax for mailto links:
=mailto:user@domain::Subject=.

*** =QUOTE= keywords do not exist anymore

=QUOTE= keywords have been deprecated since Org 8.2.

*** Select tests to perform with the build system

The build system has been enhanced to allow test selection with a
regular expression by defining =BTEST_RE= during the test invocation.
This is especially useful during bisection to find just when a
particular test failure was introduced.

*** Exact heading search for external links ignore spaces and cookies

Exact heading search for links now ignore spaces and cookies. This is
the case for links of the form ~file:projects.org::*task title~, as
well as links of the form ~file:projects.org::some words~
when ~org-link-search-must-match-exact-headline~ is not nil.

*** ~org-latex-hyperref-template~, ~org-latex-title-command~ formatting

New formatting keys are supported.  See the respective docstrings.
Note, ~org-latex-hyperref-template~ has a new default value.

*** ~float, wasysym, marvosym~ are removed from ~org-latex-default-packages-alist~

If you require any of these package add them to your preamble via
~org-latex-packages-alist~. Org also uses default LaTeX ~\tolerance~
now.

*** When exporting, throw an error on unresolved id/fuzzy links and code refs

This helps spotting wrong links. 

* Version 8.2

** Incompatible changes

*** =xdg-open= has been removed again from =org-file-apps-defaults-gnu=

    This did not work properly in some environments as xdg-open is
    desktop specific.

** Important bug fixes

*** Match string for sparse trees can now contain a slash in a property value

    You can now have searches like SOMEPROP="aaa/bbb".  Until now,
    this would break because the slash would be interpreted as the
    separator starting a TOTO match string.

** New features

*** Changes in the default packages loaded for LaTeX

    - =rotating= is now a default package, to support sideways tables.
    - =amsmath= is a default package
    - =eucal= package removed, no longer needed since amsmath is
      present

    Furthermore, the manual now specifically notes if an additional
    package is needed for one of the documented attributes.

*** Microsoft Outlook support has been added to /org-mac-link.el/

    Thanks to Marc McLean for this patch.

*** Lazy autoloading of /org-id.el/ to follow links

    When following a link that has an =id:= prefix, /org-id.el/ will
    now automatically be loaded.

    Thanks to Oleh for this patch

*** New functions for paragraph motion
    
    The commands =C-down= and =C-up= now invoke special commands
    that use knowledge from the org-elements parser to move the cursor
    in a paragraph-like way.

    Thanks to Nicolas Goaziou for the implementation.

*** New agenda fortnight view

    The agenda has now, in addition to day, week, month, and year
    views, also a fortnight view covering 14 days.

    Thanks to Michael Gauland for the implementation.

** New options

*** New option: [[doc:org-special-ctrl-o][org-special-ctrl-o]]

    This variable can be used to turn off the special behavior of
    =C-o= in tables.
    
* Version 8.1

** Incompatible changes

*** Combine org-mac-message.el and org-mac-link-grabber into org-mac-link.el

Please remove calls to =(require 'org-mac-message)= and =(require
'org-mac-link-grabber)= in your =.emacs= initialization file.  All you
need now is =(require 'org-mac-link)=.

Additionally, replace any calls to =ogml-grab-link= to
=org-mac-grab-link=.  For example, replace this line:

: (define-key org-mode-map (kbd "C-c g") 'omgl-grab-link)

with this:

: (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)

*** HTML export: Replace =HTML_HTML5_FANCY= by =:html-html5-fancy= (...)

Some of the HTML specific export options in Org <8.1 are either nil or
t, like =#+HTML_INCLUDE_STYLE=.  We replaced these binary options with
option keywords like :html-include-style.

So you need to replace

: #+HTML_INCLUDE_STYLE: t

by 

: #+OPTIONS: :html-include-style t

Options affected by this change: =HTML5_FANCY=, =HTML_INCLUDE_SCRIPTS=
and =HTML_INCLUDE_STYLE=.

** Important bugfixes

*** [[doc:org-insert-heading][org-insert-heading]] has been rewritten and bugs are now fixed
*** The replacement of disputed keys is now turned of when reading a date

** New features

*** You can now use =xdg-open= to control how to open files
*** =C-c ^ x= will now sort checklist items by their checked status

See [[doc:org-sort-list][org-sort-list]]: hitting =C-c ^ x= will put checked items at the end
of the list.
*** Various LaTeX export enhancements

- Support SVG images
- Support for .pgf files
- LaTeX Babel blocks can now be exported as =.tikz= files
- Allow =latexmk= as an option for [[doc:org-latex-pdf-process][org-latex-pdf-process]]
- When using =\usepackage[AUTO]{inputenc}=, AUTO will automatically be
  replaced with a coding system derived from =buffer-file-coding-system=.
- The dependency on the =latexsym= LaTeX package has been removed, we
  now use =amssymb= symbols by default instead.

*** Remapping =forward-paragraph= and =backward-paragraph=

=forward-paragraph= and =backward-paragraph= are now remapped to
[[doc:org-forward-element][org-forward-element]] and [[doc:org-backward-element][org-backward-element]] respectively.
E.g. hitting =C-<down>= on a headline will move to the next headline.

*** New entities in =org-entities.el=
    
Add support for ell, imath, jmath, varphi, varpi, aleph, gimel, beth,
dalet, cdots, S (§), dag, ddag, colon, therefore, because, triangleq,
leq, geq, lessgtr, lesseqgtr, ll, lll, gg, ggg, prec, preceq,
preccurleyeq, succ, succeq, succurleyeq, setminus, nexist(s), mho,
check, frown, diamond.  Changes loz, vert, checkmark, smile and tilde.

** New options

*** New option [[doc:org-bookmark-names-plist][org-bookmark-names-plist]]

This allows to specify the names of automatic bookmarks.
*** New option [[doc:org-agenda-ignore-drawer-properties][org-agenda-ignore-drawer-properties]]

This allows more flexibility when optimizing the agenda generation.
See https://orgmode.org/worg/agenda-optimization.html for details.
*** New option: [[doc:org-html-link-use-abs-url][org-html-link-use-abs-url]] to force using absolute URLs

This is an export/publishing option, and should be used either within
the =#+OPTIONS= line(s) or within a [[doc:org-publish-project-alist][org-publish-project-alist]].

Setting this option to =t= is needed when the HTML output does not
allow relative URLs.  For example, the =contrib/lisp/ox-rss.el=
library produces a RSS feed, and RSS feeds need to use absolute URLs,
so a combination of =:html-link-home "..." and :html-link-use-abs-url
t= is required---see the configuration example in the comment section
of =ox-rss.el=.

*** New option [[doc:org-babel-ditaa-java-cmd][org-babel-ditaa-java-cmd]]

This makes java executable configurable for ditaa blocks.

*** New options [[doc:org-babel-latex-htlatex][org-babel-latex-htlatex]] and [[doc:org-babel-latex-htlatex-packages][org-babel-latex-htlatex-packages]]

This enables SVG generation from latex code blocks.

*** New option: [[doc:org-habit-show-done-alwyays-green][org-habit-show-done-alwyays-green]]

See [[http://lists.gnu.org/archive/html/emacs-orgmode/2013-05/msg00214.html][this message]] from Max Mikhanosha.

*** New option: [[doc:org-babel-inline-result-wrap][org-babel-inline-result-wrap]]

If you set this to the following

: (setq org-babel-inline-result-wrap "$%s$")

then inline code snippets will be wrapped into the formatting string.

** New contributed packages

- =ox-bibtex.el= by Nicolas Goaziou :: an utility to handle BibTeX
     export to both LaTeX and HTML exports.  It uses the [[http://www.lri.fr/~filliatr/bibtex2html/][bibtex2html]]
     software.

- =org-screenshot.el= by Max Mikhanosha :: an utility to handle
     screenshots easily from Org, using the external tool [[http://freecode.com/projects/scrot][scrot]].

* Version 8.0.3

** Installation

Installation instructions have been updated and simplified.

If you have troubles installing or updating Org, focus on these
instructions:

- when updating via a =.zip/.tar.gz= file, you only need to set the
  =load-path= in your =.emacs=.  Set it before any other Org
  customization that would call autoloaded Org functions.

- when updating by pulling Org's Git repository, make sure to create the
  correct autoloads.  You can do this by running =~$ make autoloads= (to
  only create the autoloads) or by running =~$ make= (to also compile
  the Emacs lisp files.)  =~$ make help= and =~$ make helpall= gives you
  detailed explanations.

- when updating through ELPA (either from GNU ELPA or from Org ELPA),
  you have to install Org's ELPA package in a session where no Org
  function has been called already.
  
When in doubt, run =M-x org-version RET= and see if you have a mixed-up
installation.

See https://orgmode.org/org.html#Installation for details.

** Incompatible changes

Org 8.0 is the most disruptive major version of Org.

If you configured export options, you will have to update some of them.

If you used =#+ATTR_*= keywords, the syntax of the attributes changed and
you will have to update them.

Below is a list of changes for which you need to take action.

See https://orgmode.org/worg/org-8.0.html for the most recent version of
this list and for detailed instructions on how to migrate.

**** New export engine

Org 8.0 comes with a new export engine written by Nicolas Goaziou.  This
export engine relies on ~org-element.el~ (Org's syntax parser), which was
already in Org's core.  This new export engine triggered the rewriting of
/all/ export back-ends.

The most visible change is the export dispatcher, accessible through the
keybinding =C-c C-e=.  By default, this menu only shows some of the
built-in export formats, but you can add more formats by loading them
directly (e.g., =(require 'ox-texinfo)= or by configuring the option
[[doc:org-export-backends][org-export-backends]].

More contributed back-ends are available from the =contrib/= directory, the
corresponding files start with the =ox-= prefix.

If you customized an export back-end (like HTML or LaTeX), you will need to
rename some options so that your customization is not lost.  Typically, an
option starting with =org-export-html-= is now named =org-html-=.  See the
manual for details and check [[https://orgmode.org/worg/org-8.0.html][this Worg page]] for directions.

**** New syntax for #+ATTR_HTML/LaTeX/... options

     : #+ATTR_HTML width="200px"

     should now be written

     : #+ATTR_HTML :width 200px

     Keywords like =#+ATTR_HTML= and =#+ATTR_LaTeX= are defined in their
     respective back-ends, and the list of supported parameters depends on
     each backend.  See Org's manual for details.

**** ~org-remember.el~ has been removed

     You cannot use =remember.el= anymore to capture notes.

     Support for remember templates has been obsoleted since long, it is
     now fully removed.

     Use =M-x org-capture-import-remember-templates RET= to import your
     remember templates into capture templates.

**** ~org-jsinfo.el~ has been merged into ~ox-html.el~

     If you were requiring ~ox-jsinfo.el~ in your ~.emacs.el~ file, you
     will have to remove this requirement from your initialization file.

**** Note for third-party developers

     The name of the files for export back-end have changed: we now use the
     prefix =ox-= for those files (like we use the =ob-= prefix for Babel
     files.)  For example ~org-html.el~ is now ~ox-html.el~.

     If your code relies on these files, please update the names in your
     code.

**** Packages moved from core to contrib

     Since packages in Org's core are meant to be part of GNU Emacs, we try
     to be minimalist when it comes to adding files into core.  For 8.0, we
     moved some contributions into the =contrib/= directory.

     The rationale for deciding that these files should live in =contrib/=
     is either because they rely on third-part softwares that are not
     included in Emacs, or because they are not targeting a significant
     user-base.

     - org-colview-xemacs.el
     - org-mac-message.el
     - org-mew.el
     - org-wl.el
     - ox-freedmind.el
     - ox-taskjuggler.el

     Note that ~ox-freedmind.el~ has been rewritten by Jambunathan,
     ~org-mew.el~ has been enhanced by Tokuya Kameshima and
     ~ox-taskjuggler.el~ by Nicolas Goaziou and others.

     Also, the Taskjuggler exporter now uses TJ3 by default.  John Hendy
     wrote [[https://orgmode.org/worg/org-tutorials/org-taskjuggler.html][a tutorial on Worg]] for the TJ3 export.

** New packages in core

*** ~ob-makefile.el~ by Eric Schulte and Thomas S. Dye

    =ob-makefile.el= implements Org Babel support for Makefile tangling.

*** ~ox-man.el~ by Luis Anaya

    =ox-man.el= allows you to export Org files to =man= pages.

*** ~ox-md.el~ by Nicolas Goaziou

    =ox-md.el= allows you to export Org files to Markdown files, using the
    vanilla [[http://daringfireball.net/projects/markdown/][Markdown syntax]].

*** ~ox-texinfo.el~ by Jonathan Leech-Pepin

    =ox-texinfo.el= allows you to export Org files to [[http://www.gnu.org/software/texinfo/][Texinfo]] files.

** New packages in contrib

*** ~ob-julia.el~ by G. Jay Kerns

    [[http://julialang.org/][Julia]] is a new programming language.

    =ob-julia.el= provides Org Babel support for evaluating Julia source
    code.

*** ~ob-mathomatic.el~ by Luis Anaya

    [[http://www.mathomatic.org/][mathomatic]] a portable, command-line, educational CAS and calculator
    software, written entirely in the C programming language.

    ~ob-mathomatic.el~ provides Org Babel support for evaluating mathomatic
    entries.

*** ~ob-tcl.el~ by Luis Anaya

    ~ob-tcl.el~ provides Org Babel support for evaluating [[http://www.tcl.tk/][Tcl]] source code.

*** ~org-bullets.el~ by Evgeni Sabof

    Display bullets instead of stars for headlines.

    Also see [[https://orgmode.org/worg/org-faq.html#sec-8-12][this updated FAQ]] on how to display another character than "*"
    for starting headlines.

*** ~ox-confluence.el~ by Sébastien Delafond

    ~ox-confluence.el~ lets you convert Org files to [[https://confluence.atlassian.com/display/DOC/Confluence%2BWiki%2BMarkup][Confluence Wiki]] files.

*** ~ox-deck.el~ and ~ox-s5.el~ by Rick Frankel

    [[http://imakewebthings.com/deck.js/][deck.js]] is a javascript library for displaying HTML ages as
    presentations.  ~ox-deck.el~ exports Org files to HTML presentations
    using =deck.js=.

    [[http://meyerweb.com/eric/tools/s5/][s5]] is a set of scripts which also allows to display HTML pages as
    presentations.  ~ox-s5.el~ exports Org files to HTML presentations
    using =s5=.

*** ~ox-groff.el~ by Luis Anaya and Nicolas Goaziou

    The [[http://www.gnu.org/software/groff/][groff]] (GNU troff) software is a typesetting package which reads
    plain text mixed with formatting commands and produces formatted
    output.

    Luis Anaya and Nicolas Goaziou implemented ~ox-groff.el~ to allow
    conversion from Org files to groff.

*** ~ox-koma-letter.el~ by Nicolas Goaziou and Alan Schmitt

    This back-end allow to export Org pages to the =KOMA Scrlttr2= format.

*** ~ox-rss.el~ by Bastien

    This back-end lets you export Org pages to RSS 2.0 feeds.  Combined
    with the HTML publishing feature, this allows you to build a blog
    entirely with Org.

** New features

*** Export

**** New export generic options

If you use Org exporter, we advise you to re-read [[https://orgmode.org/org.html#Exporting][the manual section about
it]].  It has been updated and includes new options.

Among the new/updated export options, three are of particular importance:

- [[doc:org-export-allow-bind-keywords][org-export-allow-bind-keywords]] :: This option replaces the old option
     =org-export-allow-BIND= and the default value is =nil=, not =confirm=.
     You will need to explicitly set this to =t= in your initialization
     file if you want to allow =#+BIND= keywords.

- [[doc:org-export-with-planning][org-export-with-planning]] :: This new option controls the export of
     =SCHEDULED:, DEADLINE:, CLOSED:= lines, and planning information is
     now skipped by default during export.  This use to be the job of
     [[doc:org-export-with-timestamps][org-export-with-timestamps]], but this latter option has been given a
     new role: it controls the export of /standalone time-stamps/.  When
     set to =nil=, Org will not export active and inactive time-stamps
     standing on a line by themselves or within a paragraph that only
     contains time-stamps.

To check if an option has been introduced or its default value changed in
Org 8.0, do =C-h v [option] RET= and check if the documentation says that
the variable has been introduced (or changed) in version 24.4 of Emacs.

**** Enhanced default stylesheet for the HTML exporter

See the new default value of [[doc:org-html-style-default][org-html-style-default]].

**** New tags, classes and ids for the HTML exporter

See the new default value of [[doc:org-html-divs][org-html-divs]].

**** Support for tikz pictures in LaTeX export
**** ~org-man.el~: New export function for "man" links
**** ~org-docview.el~: New export function for docview links
*** Structure editing

**** =C-u C-u M-RET= inserts a heading at the end of the parent subtree
**** Cycling to the =CONTENTS= view keeps inline tasks folded

[[doc:org-cycle-hook][org-cycle-hook]] as a new function [[doc:org-cycle-hide-inline-tasks][org-cycle-hide-inline-tasks]] which
prevents the display of inline tasks when showing the content of a subtree.

**** =C-c -= in a region makes a list item for each line

This is the opposite of the previous behavior, where =C-c -= on a region
would create one item for the whole region, and where =C-u C-c -= would
create an item for each line.  Now =C-c -= on the selected region creates
an item per line, and =C-u C-c -= creates a single item for the whole
region.

**** When transposing words, markup characters are now part of the words

In Emacs, you can transpose words with =M-t=.  Transposing =*these*
_words__= will preserve markup.

**** New command [[doc:org-set-property-and-value][org-set-property-and-value]] bound to =C-c C-x P=

This command allows you to quickly add both the property and its value.  It
is useful in buffers where there are many properties and where =C-c C-x p=
can slow down the flow of editing too much.

**** New commands [[doc:org-next-block][org-next-block]] and [[doc:org-previous-block][org-previous-block]]

These commands allow you to go to the previous block (=C-c M-b= or the
speedy key =B=) or to the next block (=C-c M-f= or the speedy key =F=.)

**** New commands [[doc:org-drag-line-forward][org-drag-line-forward]] and [[doc:org-drag-line-backward][org-drag-line-backward]]

These commands emulate the old behavior of =M-<down>= and =M-<up>= but are
now bound to =S-M-<down>= and =S-M-<up>= respectively, since =M-<down>= and
=M-<up>= now drag the whole element at point (a paragraph, a table, etc.)
forward and backward.

**** When a list item has a checkbox, inserting a new item uses a checkbox too
**** When sorting entries/items, only the description of links is considered

Now Org will sort this list

: - [[http://abc.org][B]]
: - [[http://def.org][A]]

like this:

: - [[http://def.org][A]]
: - [[http://abc.org][B]]

by comparing the descriptions, not the links.
Same when sorting headlines instead of list items.
**** New option =orgstruct-heading-prefix-regexp=

For example, setting this option to "^;;; " in Emacs lisp files and using
=orgstruct-mode= in those files will allow you to cycle through visibility
states as if lines starting with ";;; *..." where headlines.

In general, you want to set =orgstruct-heading-prefix-regexp= as a file
local variable.

**** New behavior of [[doc:org-clone-subtree-with-time-shift][org-clone-subtree-with-time-shift]]

The default is now to ask for a time-shift only when there is a time-stamp.
When called with a universal prefix argument =C-u=, it will not ask for a
time-shift even if there is a time-stamp.

**** New option [[doc:org-agenda-restriction-lock-highlight-subtree][org-agenda-restriction-lock-highlight-subtree]]

This defaults to =t= so that the whole subtree is highlighted when you
restrict the agenda view to it with =C-c C-x <= (or the speed command =<=).
The default setting helps ensuring that you are not adding tasks after the
restricted region.  If you find this highlighting too intrusive, set this
option to =nil=.
**** New option [[doc:org-closed-keep-when-no-todo][org-closed-keep-when-no-todo]]

When switching back from a =DONE= keyword to a =TODO= keyword, Org now
removes the =CLOSED= planning information, if any.  It also removes this
information when going back to a non-TODO state (e.g., with =C-c C-t SPC=).
If you want to keep the =CLOSED= planning information when removing the
TODO keyword, set [[doc:org-closed-keep-when-no-todo][org-closed-keep-when-no-todo]] to =t=.

**** New option [[doc:org-image-actual-width][org-image-actual-width]]

This option allows you to change the width of in-buffer displayed images.
The default is to use the actual width of the image, but you can use a
fixed value for all images, or fall back on an attribute like

: #+attr_html: :width 300px
*** Scheduled/deadline

**** Implement "delay" cookies for scheduled items

If you want to delay the display of a scheduled task in the agenda, you can
now use a delay cookie like this: =SCHEDULED: <2004-12-25 Sat -2d>=.  The
task is still scheduled on the 25th but will appear in your agenda starting
from two days later (i.e. from March 27th.)

Imagine for example that your co-workers are not done in due time and tell
you "we need two more days".  In that case, you may want to delay the
display of the task in your agenda by two days, but you still want the task
to appear as scheduled on March 25th.

In case the task contains a repeater, the delay is considered to affect all
occurrences; if you want the delay to only affect the first scheduled
occurrence of the task, use =--2d= instead.  See [[doc:org-scheduled-delay-days][org-scheduled-delay-days]]
and [[doc:org-agenda-skip-scheduled-delay-if-deadline][org-agenda-skip-scheduled-delay-if-deadline]] for details on how to
control this globally or per agenda.

**** Use =C-u C-u C-c C-s= will insert a delay cookie for scheduled tasks

See the previous section for why delay cookies may be useful.

**** Use =C-u C-u C-c C-d= will insert a warning delay for deadline tasks

=C-u C-u C-c C-d= now inserts a warning delay to deadlines.
*** Calendar, diary and appts

**** New variable [[doc:org-read-date-minibuffer-local-map][org-read-date-minibuffer-local-map]]

By default, this new local map uses "." to go to today's date, like in the
normal =M-x calendar RET=.  If you want to deactivate this and to reassign
the "@" key to =calendar-goto-today=, use this:

#+BEGIN_SRC emacs-lisp
  ;; Unbind "." in Org's calendar:
  (define-key org-read-date-minibuffer-local-map (kbd ".") nil)

  ;; Bind "@" to `calendar-goto-today':
  (define-key org-read-date-minibuffer-local-map
              (kbd "@")
              (lambda () (interactive) (org-eval-in-calendar '(calendar-goto-today))))
#+END_SRC

**** In Org's calendar, =!= displays diary entries of the date at point

This is useful when you want to check if you don't already have an
appointment when setting new ones with =C-c .= or =C-c s=.  =!= will
call =diary-view-entries= and display the diary in a separate buffer.

**** [[doc:org-diary][org-diary]]: only keep the descriptions of links

[[doc:org-diary][org-diary]] returns diary information from Org files, but it returns it
in a diary buffer, not in an Org mode buffer.  When links are displayed,
only show their description, not the full links.
*** Agenda

**** New agenda type =agenda*= and entry types =:scheduled* :deadline*=

When defining agenda custom commands, you can now use =agenda*=: this will
list entries that have both a date and a time.  This is useful when you
want to build a list of appointments.

You can also set [[doc:org-agenda-entry-types][org-agenda-entry-types]] either globally or locally in
each agenda custom command and use =:timestamp*= and/or =:deadline*= there.

Another place where this is useful is your =.diary= file:

: %%(org-diary :scheduled*) ~/org/rdv.org

This will list only entries from =~/org/rdv.org= that are scheduled with a
time value (i.e. appointments).

**** New agenda sorting strategies

[[doc:org-agenda-sorting-strategy][org-agenda-sorting-strategy]] allows these new sorting strategies:

| Strategy       | Explanations                             |
|----------------+------------------------------------------|
| timestamp-up   | Sort by any timestamp, early first       |
| timestamp-down | Sort by any timestamp, late first        |
| scheduled-up   | Sort by scheduled timestamp, early first |
| scheduled-down | Sort by scheduled timestamp, late first  |
| deadline-up    | Sort by deadline timestamp, early first  |
| deadline-down  | Sort by deadline timestamp, late first   |
| ts-up          | Sort by active timestamp, early first    |
| ts-down        | Sort by active timestamp, late first     |
| tsia-up        | Sort by inactive timestamp, early first  |
| tsia-down      | Sort by inactive timestamp, late first   |

**** New options to limit the number of agenda entries

You can now limit the number of entries in an agenda view.  This is
different from filters: filters only /hide/ the entries in the agenda,
while limits are set while generating the list of agenda entries.

These new options are available:

- [[doc:org-agenda-max-entries][org-agenda-max-entries]] :: limit by number of entries.
- [[doc:org-agenda-max-todos][org-agenda-max-todos]] :: limit by number of TODOs.
- [[doc:org-agenda-max-tags][org-agenda-max-tags]] :: limit by number of tagged entries.
- [[doc:org-agenda-max-effort][org-agenda-max-effort]] :: limit by effort (minutes).

For example, if you locally set [[doc:org-agenda-max-todos][org-agenda-max-todos]] to 3 in an agenda
view, the agenda will be limited to the first three todos.  Other entries
without a TODO keyword or beyond the third TODO headline will be ignored.

When setting a limit (e.g. about an effort's sum), the default behavior is
to exclude entries that cannot be checked against (e.g. entries that have
no effort property.)  To include other entries too, you can set the limit
to a negative number.  For example =(setq org-agenda-max-tags -3)= will not
show the fourth tagged headline (and beyond), but it will also show
non-tagged headlines.

**** =~= in agenda view sets temporary limits

You can hit =~= in the agenda to temporarily set limits: this will
regenerate the agenda as if the limits were set.  This is useful for
example when you want to only see a list of =N= tasks, or a list of tasks
that take only =N= minutes.

**** "=" in agenda view filters by regular expressions

You can now filter agenda entries by regular expressions using ~=~.  =C-u
== will filter entries out.  Regexp filters are cumulative.  You can set
[[doc:org-agenda-regexp-filter-preset][org-agenda-regexp-filter-preset]] to suit your needs in each agenda view.

**** =|= in agenda view resets all filters

Since it's common to combine tag filters, category filters, and now regexp
filters, there is a new command =|= to reset all filters at once.

**** Allow writing an agenda to an =.org= file

You can now write an agenda view to an =.org= file.  It copies the
headlines and their content (but not subheadings) into the new file.

This is useful when you want to quickly share an agenda containing the full
list of notes.

**** New commands to drag an agenda line forward (=M-<down>=) or backward (=M-<up>=)

It sometimes handy to move agenda lines around, just to quickly reorganize
your tasks, or maybe before saving the agenda to a file.  Now you can use
=M-<down>= and =M-<up>= to move the line forward or backward.

This does not persist after a refresh of the agenda, and this does not
change the =.org= files who contribute to the agenda.

**** Use =%b= for displaying "breadcrumbs" in the agenda view

[[doc:org-agenda-prefix-format][org-agenda-prefix-format]] now allows to use a =%b= formatter to tell Org
to display "breadcrumbs" in the agenda view.

This is useful when you want to display the task hierarchy in your agenda.

**** Use =%l= for displaying the headline's level in the agenda view

[[doc:org-agenda-prefix-format][org-agenda-prefix-format]] allows to use a =%l= formatter to tell Org to
display entries with additional spaces corresponding to their level in the
outline tree.

**** [[doc:org-agenda-write][org-agenda-write]] will ask before overwriting an existing file

=M-x org-agenda-write RET= (or =C-c C-w= from an agenda buffer) used to
overwrite preexisting file with the same name without confirmation.  It now
asks for a confirmation.

**** New commands =M-m= and =M-*= to toggle (all) mark(s) for bulk action

- [[doc:org-agenda-bulk-toggle][org-agenda-bulk-toggle]] :: this command is bound to =M-m= and toggles
     the mark of the entry at point.

- [[doc:org-agenda-bulk-toggle-all][org-agenda-bulk-toggle-all]] :: this command is bound to =M-*= and
     toggles all the marks in the current agenda.

**** New option [[doc:org-agenda-search-view-max-outline-level][org-agenda-search-view-max-outline-level]]

This option sets the maximum outline level to display in search view.
E.g. when this is set to 1, the search view will only show headlines of
level 1.

**** New option [[doc:org-agenda-todo-ignore-time-comparison-use-seconds][org-agenda-todo-ignore-time-comparison-use-seconds]]

This allows to compare times using seconds instead of days when honoring
options like =org-agenda-todo-ignore-*= in the agenda display.

**** New option [[doc:org-agenda-entry-text-leaders][org-agenda-entry-text-leaders]]

This allows you to get rid of the ">" character that gets added in front of
entries excerpts when hitting =E= in the agenda view.

**** New formatting string for past deadlines in [[doc:org-agenda-deadline-leaders][org-agenda-deadline-leaders]]

The default formatting for past deadlines is ="%2d d. ago: "=, which makes
it explicit that the deadline is in the past.  You can configure this via
[[doc:org-agenda-deadline-leaders][org-agenda-deadline-leaders]].  Note that the width of the formatting
string is important to keep the agenda alignment clean.

**** New allowed value =repeated-after-deadline= for [[doc:org-agenda-skip-scheduled-if-deadline-is-shown][org-agenda-skip-scheduled-if-deadline-is-shown]]

When [[doc:org-agenda-skip-scheduled-if-deadline-is-shown][org-agenda-skip-scheduled-if-deadline-is-shown]] is set to
=repeated-after-deadline=, the agenda will skip scheduled items if they are
repeated beyond the current dealine.

**** New option for [[doc:org-agenda-skip-deadline-prewarning-if-scheduled][org-agenda-skip-deadline-prewarning-if-scheduled]]

This variable may be set to nil, t, the symbol `pre-scheduled', or a number
which will then give the number of days before the actual deadline when the
prewarnings should resume.  The symbol `pre-scheduled' eliminates the
deadline prewarning only prior to the scheduled date.

Read the full docstring for details.

**** [[doc:org-class][org-class]] now supports holiday strings in the skip-weeks parameter

For example, this task will now be skipped only on new year's day:

    : * Task
    :   <%%(org-class 2012 1 1 2013 12 12 2 "New Year's Day")>
*** Capture

**** Allow =C-1= as a prefix for [[doc:org-agenda-capture][org-agenda-capture]] and [[doc:org-capture][org-capture]]

With a =C-1= prefix, the capture mechanism will use the =HH:MM= value at
point (if any) or the current =HH:MM= time as the default time for the
capture template.

**** Expand keywords within %(sexp) placeholder in capture templates

If you use a =%:keyword= construct within a =%(sexp)= construct, Org will
expand the keywords before expanding the =%(sexp)=.

**** Allow to contextualize capture (and agenda) commands by checking the name of the buffer

[[doc:org-capture-templates-contexts][org-capture-templates-contexts]] and [[doc:org-agenda-custom-commands-contexts][org-agenda-custom-commands-contexts]]
allow you to define what capture templates and what agenda commands should
be available in various contexts.  It is now possible for the context to
check against the name of the buffer.
*** Tag groups

Using =#+TAGS: { Tag1 : Tag2 Tag3 }= will define =Tag1= as a /group tag/
(note the colon after =Tag1=).  If you search for =Tag1=, it will return
headlines containing either =Tag1=, =Tag2= or =Tag3= (or any combination
of those tags.)

You can use group tags for sparse tree in an Org buffer, for creating
agenda views, and for filtering.

See https://orgmode.org/org.html#Tag-groups for details.

*** Links

**** =C-u C-u M-x org-store-link RET= will ignore non-core link functions

Org knows how to store links from Org buffers, from info files and from
other Emacs buffers.  Org can be taught how to store links from any buffer
through new link protocols (see [[https://orgmode.org/org.html#Adding-hyperlink-types]["Adding hyperlink types"]] in the manual.)

Sometimes you want Org to ignore added link protocols and store the link
as if the protocol was not known.

You can now do this with =C-u C-u M-x org-store-link RET=.

**** =C-u C-u C-u M-x org-store-link RET= on an active region will store links for each lines

Imagine for example that you want to store a link for every message in a
Gnus summary buffer.  In that case =C-x h C-u C-u C-u M-x org-store-link
RET= will store a link for every line (i.e. message) if the region is
active.

**** =C-c C-M-l= will add a default description for links which don't have one

=C-c C-M-l= inserts all stored links.  If a link does not have a
description, this command now adds a default one, so that we are not mixing
with-description and without-description links when inserting them.

**** No curly braces to bracket links within internal links

When storing a link to a headline like

: * See [[https://orgmode.org][Org website]]

[[doc:org-store-link][org-store-link]] used to convert the square brackets into curly brackets.
It does not anymore, taking the link description or the link path, when
there is no description.
*** Table

**** Switching between #+TBLFM lines

If you have several =#+TBLFM= lines below a table, =C-c C-c= on a line will
apply the formulas from this line, and =C-c C-c= on another line will apply
those other formulas.

**** You now use "nan" for empty fields in Calc formulas

If empty fields are of interest, it is recommended to reread the section
[[https://orgmode.org/org.html#Formula-syntax-for-Calc][3.5.2 Formula syntax for Calc]] of the manual because the description for the
mode strings has been clarified and new examples have been added towards
the end.

**** Handle localized time-stamps in formulas evaluation

If your =LOCALE= is set so that Org time-stamps use another language than
english, and if you make time computations in Org's table, it now works by
internally converting the time-stamps with a temporary =LOCALE=C= before
doing computation.

**** New lookup functions

There are now three lookup functions:

- [[doc:org-loopup-first][org-loopup-first]]
- [[doc:org-loopup-last][org-loopup-last]]
- [[doc:org-loopup-all][org-loopup-all]]

See [[https://orgmode.org/org.html#Lookup-functions][the manual]] for details.
*** Startup keywords

These new startup keywords are now available:

| Startup keyword                | Option                                    |
|--------------------------------+-------------------------------------------|
| =#+STARTUP: logdrawer=           | =(setq org-log-into-drawer t)=              |
| =#+STARTUP: nologdrawer=         | =(setq org-log-into-drawer nil)=            |
|--------------------------------+-------------------------------------------|
| =#+STARTUP: logstatesreversed=   | =(setq org-log-states-order-reversed t)=    |
| =#+STARTUP: nologstatesreversed= | =(setq org-log-states-order-reversed nil)=  |
|--------------------------------+-------------------------------------------|
| =#+STARTUP: latexpreview=        | =(setq org-startup-with-latex-preview t)=   |
| =#+STARTUP: nolatexpreview=      | =(setq org-startup-with-latex-preview nil)= |

*** Clocking

**** New option [[doc:org-clock-rounding-minutes][org-clock-rounding-minutes]]

E.g. if [[doc:org-clock-rounding-minutes][org-clock-rounding-minutes]] is set to 5, time is 14:47 and you
clock in: then the clock starts at 14:45.  If you clock out within the next
5 minutes, the clock line will be removed; if you clock out 8 minutes after
your clocked in, the clock out time will be 14:50.

**** New option [[doc:org-time-clocksum-use-effort-durations][org-time-clocksum-use-effort-durations]]

When non-nil, =C-c C-x C-d= uses effort durations.  E.g., by default, one
day is considered to be a 8 hours effort, so a task that has been clocked
for 16 hours will be displayed as during 2 days in the clock display or in
the clocktable.

See [[doc:org-effort-durations][org-effort-durations]] on how to set effort durations and
[[doc:org-time-clocksum-format][org-time-clocksum-format]] for more on time clock formats.

**** New option [[doc:org-clock-x11idle-program-name][org-clock-x11idle-program-name]]

This allows to set the name of the program which prints X11 idle time in
milliseconds.  The default is to use =x11idle=.

**** New option [[doc:org-use-last-clock-out-time-as-effective-time][org-use-last-clock-out-time-as-effective-time]]

When non-nil, use the last clock out time for [[doc:org-todo][org-todo]].  Note that this
option has precedence over the combined use of [[doc:org-use-effective-time][org-use-effective-time]] and
[[doc:org-extend-today-until][org-extend-today-until]].

**** =S-<left/right>= on a clocksum column will update the sum by updating the last clock
**** =C-u 3 C-S-<up/down>= will update clock timestamps synchronously by 3 units
**** New parameter =:wstart= for clocktables to define the week start day
**** New parameter =:mstart= to state the starting day of the month
**** Allow relative times in clocktable tstart and tend options
**** The clocktable summary is now a caption
**** =:tstart= and =:tend= and friends allow relative times like "<-1w>" or "<now>"
*** Babel

**** You can now use =C-c C-k= for [[doc:org-edit-src-abort][org-edit-src-abort]]

This allows you to quickly cancel editing a source block.

**** =C-u C-u M-x org-babel-tangle RET= tangles by the target file of the block at point

This is handy if you want to tangle all source code blocks that have the
same target than the block at point.

**** New options for auto-saving the base buffer or the source block editing buffer

When [[doc:org-edit-src-turn-on-auto-save][org-edit-src-turn-on-auto-save]] is set to =t=, editing a source block
in a new window will turn on =auto-save-mode= and save the code in a new
file under the same directory than the base Org file.

When [[doc:org-edit-src-auto-save-idle-delay][org-edit-src-auto-save-idle-delay]] is set to a number of minutes =N=,
the base Org buffer will be saved after this number of minutes of idle
time.

**** New =:post= header argument post-processes results

     This header argument may be used to pass the results of the current
     code block through another code block for post-processing.  See the
     manual for a usage example.

**** Commented out heading are ignored when collecting blocks for tangling

If you comment out a heading (with =C-c ;= anywhere on the heading or in
the subtree), code blocks from within this heading are now ignored when
collecting blocks for tangling.

**** New option [[doc:org-babel-hash-show-time][org-babel-hash-show-time]] to show a time-stamp in the result hash
**** Do not ask for confirmation if cached value is current

Do not run [[doc:org-babel-confirm-evaluate][org-babel-confirm-evaluate]] if source block has a cache and the
cache value is current as there is no evaluation involved in this case.
**** =ob-sql.el= and =ob-python.el= have been improved.
**** New Babel files only need to =(require 'ob)=

When writing a new Babel file, you now only need to use =(require 'ob)=
instead of requiring each Babel library one by one.
*** Faces

- Org now fontifies radio link targets by default
- In the agenda, use [[doc:org-todo-keyword-faces][org-todo-keyword-faces]] to highlight selected TODO keywords
- New face [[doc:org-priority][org-priority]], enhanced fontification of priority cookies in agenda
- New face [[doc:org-tag-group][org-tag-group]] for group tags

** Miscellaneous

- New speedy key =s= pour [[doc:org-narrow-to-subtree][org-narrow-to-subtree]]
- Handling of [[doc:org-html-table-row][org-html-table-row]] has been updated (incompatible change)
- [[doc:org-export-html-table-tag][org-export-html-table-tag]] is replaced by [[doc:org-html-table-default-attributes][org-html-table-default-attributes]]
- Support using =git-annex= with Org attachments
- org-protocol: Pass optional value using query in url to capture from protocol
- When the refile history is empty, use the current filename as default
- When you cannot change the TODO state of a task, Org displays the blocking task
- New option [[doc:org-mobile-allpriorities][org-mobile-allpriorities]]
- org-bibtex.el now use =visual-line-mode= instead of the deprecated =longlines-mode=
- [[doc:org-format-latex-options][org-format-latex-options]] allows to set the foreground/background colors automatically
- New option [[doc:org-archive-file-header-format][org-archive-file-header-format]]
- New "neg" entity in [[doc:org-entities][org-entities]]
- New function [[doc:org-docview-export][org-docview-export]] to export docview links
- New =:eps= header argument for ditaa code blocks
- New option [[doc:org-gnus-no-server][org-gnus-no-server]] to start Gnus with =gnus-no-server=
- Org is now distributed with =htmlize.el= version 1.43
- ~org-drill.el~ has been updated to version 2.3.7
- ~org-mac-iCal.el~ now supports MacOSX version up to 10.8
- Various improvements to ~org-contacts.el~ and =orgpan.el=

** Outside Org

*** Spanish translation of the Org guide by David Arroyo Menéndez

David (and others) translated the Org compact guide in Spanish:

You can read the [[https://orgmode.org/worg/orgguide/orgguide.es.pdf][PDF guide]].

*** ~poporg.el~ and ~outorg.el~

Two new libraries (~poporg.el~ by François Pinard and ~outorg.el~ by
Thorsten Jolitz) now enable editing of comment-sections from source-code
buffers in temporary Org-mode buffers, making the full editing power of
Org-mode available.  ~outorg.el~ comes together with ~outshine.el~ and
~navi-mode.el~, two more libraries by Thorsten Jolitz with the goal to give
source-code buffers the /look & feel/ of Org-mode buffers while greatly
improving navigation and structure editing.  A detailed description can be
found here: https://orgmode.org/worg/org-tutorials/org-outside-org.html

Here are two screencasts demonstrating Thorsten's tools:

- [[http://youtu.be/nqE6YxlY0rw]["Modern conventions for Emacs Lisp files"]]
- [[http://www.youtube.com/watch?v%3DII-xYw5VGFM][Exploring Bernt Hansen's Org-mode tutorial with 'navi-mode']]

*** MobileOrg for iOS

MobileOrg for iOS back in the App Store The 1.6.0 release was focused on
the new Dropbox API and minor bug fixes but also includes a new ability to
launch in Capture mode.  Track development and contribute [[https://github.com/MobileOrg/mobileorg/issues][on github]].

* Version 7.9.4

This is bug-fix release.

* Version 7.9.3

** No need to require =org-install= anymore

You don't need to require =org-install= anymore.  If you load Org from a
directory extracted from the =.tar.gz= or =.zip= sources, or if you are
using it from a git clone, setting the =load-paths= is enough.

If you want to make sure the correct autoloads are in place, you can do:

#+BEGIN_SRC emacs-lisp
(require 'org-loaddefs.el)
#+END_SRC

** New option [[doc::org-agenda-use-tag-inheritance][org-agenda-use-tag-inheritance]]

[[doc::org-use-tag-inheritance][org-use-tag-inheritance]] controls whether tags are inherited when
org-tags-view is called (either in =tags=, =tags-tree= or =tags-todo=
agenda views.)

When generating other agenda types such as =agenda=, =todo= and
=todo-tree=, tags inheritance is not used when selecting the entries
to display.  Still, you might want to have all tag information correct
in the agenda buffer, e.g. for tag filtering.  In that case, add the
agenda type to this variable.

Setting this variable to nil should considerably speeds up the agenda
generation.

Note that the default was to display inherited tags in the agenda
lines even if `org-use-tag-inheritance' was nil.  The default is now
to *never* display inherited tags in agenda lines, but to /know/ about
them when the agenda type is listed in [[doc::org-agenda-use-tag-inheritance][org-agenda-use-tag-inheritance]].

** New default value nil for [[doc::org-agenda-dim-blocked-tasks][org-agenda-dim-blocked-tasks]]

Using `nil' as the default value speeds up the agenda generation.  You
can hit `#' (or `C-u #') in agenda buffers to temporarily dim (or turn
invisible) blocked tasks.

** New speedy keys for [[doc::org-speed-commands-default][org-speed-commands-default]]

You can now use `:' (instead of `;') for setting tags---this is
consistent with using the `:' key in agenda view.

You can now use `=' for [[doc::org-columns][org-columns]].

** =org-float= is now obsolete, use =diary-float= instead
** No GPL manual anymore

There used to be a GPL version of the Org manual, but this is not the
case anymore, the Free Software Foundation does not permit this.

The GNU FDL license is now included in the manual directly.
    
** Enhanced compatibility with Emacs 22 and XEmacs

Thanks to Achim for his work on enhancing Org's compatibility with
various Emacsen.  Things may not be perfect, but Org should work okay
in most environments.

* Version 7.9.2

/This page describes changes against the 7.8[.x] versions of Org.  It
includes changes in previous 7.9[.x] releases./

** New committers who signed the FSF copyright assigment

Welcome and thanks to these new core contributors:

- Abdó Roig-Maranges
- Andrew Hyatt
- Andrzej Lichnerowicz
- Ethan Ligon
- Feng Shu
- George Kettleborough
- Henning Dietmar Weiss
- Ilya Shlyakhter
- Ivan Kanis
- Konrad Hinsen
- Madan Ramakrishnan
- Max Mikhanosha
- Moritz Ulrich
- Rick Frankel
- Toby Cubitt

** Online documentation for hooks, commands and options

You can read the documentation for hooks, commands (i.e. interactive
functions) and options (i.e. customizable variables) [[https://orgmode.org/worg/doc.html][online]].  Clicking on a
command/option in this ChangeLog will take you to the online documentation
for that command/option.

** New ELPA repository for Org packages

You can now add the Org ELPA repository like this:

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

It contains both the =org-*.tar= package (the core Org distribution, also
available through http://elpa.gnu.org) and the =org-plus*.tar= package (the
extended Org distribution, with non-GNU packages from the =contrib/=
directory.)

See https://orgmode.org/elpa/

** Overview of the new keybindings

| Keybinding    | Speedy | Command                     |
|---------------+--------+-----------------------------|
| =C-c C-x C-z=   |        | [[doc::org-clock-resolve][org-clock-resolve]]           |
| =C-c C-x C-q=   |        | [[doc::org-clock-cancel][org-clock-cancel]]            |
| =C-c C-x C-x=   |        | [[doc::org-clock-in-last][org-clock-in-last]]           |
| =M-h=           |        | [[doc::org-mark-element][org-mark-element]]            |
| =*=             |        | [[doc::org-agenda-bulk-mark-all][org-agenda-bulk-mark-all]]    |
| =C-c C-M-l=     |        | [[doc::org-insert-all-links][org-insert-all-links]]        |
| =C-c C-x C-M-v= |        | [[doc::org-redisplay-inline-images][org-redisplay-inline-images]] |
| =C-c C-x E=     | =E=      | [[doc::org-inc-effort][org-inc-effort]]              |
|               | =#=      | [[doc::org-toggle-comment][org-toggle-comment]]          |
|               | =:=      | [[doc::org-columns][org-columns]]                 |
|               | =W=      | Set =APPT_WARNTIME=           |
| =k=             |        | [[doc::org-agenda-capture][org-agenda-capture]]          |
| C-c ,         | ,      | [[doc::org-priority][org-priority]]                |

** New build system and new packages

*** New build system

Achim implemented a new build system.

The basic method for installing Org is the same:

1. Download or clone Org.
2. run `make install' from the Org directory.
3. Add (require 'org-install) in your .emacs.el.

But the build system is now more flexible and can be more easily
adapted to suit your needs.

See https://orgmode.org/worg/dev/org-build-system.html for details.

*** New packages in core

**** =org-eshell.el= by Konrad Hinsen is now in Org's core

=org-eshell.el= allows you to create links from [[http://www.gnu.org/software/emacs/manual/html_node/eshell/index.html][Eshell]].

*** New packages in contrib/

Note: The =EXPERIMENTAL/= directory has been deleted.  The files
have been moved to the =contrib/lisp/= directory.

**** =org-notify.el= by Peter Münster

From the comment section:

: Get notifications, when there is something to do.
: Sometimes, you need a reminder a few days before a deadline, e.g. to buy a
: present for a birthday, and then another notification one hour before to
: have enough time to choose the right clothes.
: For other events, e.g. rolling the dustbin to the roadside once per week,
: you probably need another kind of notification strategy.
: This package tries to satisfy the various needs.

**** =org-bibtex-extras.el= by Eric Schulte

From the comment section:

: This file add some extra functionality to your bibtex entries which
: are stored as Org-mode headlines using org-bibtex.el.  Most
: features expect that you keep all of your reading notes in a single
: file, set the `obe-bibtex-file' variable to the path to this file.

*** New exporters in contrib/

Nicolas export engine org-export.el lives in the =contrib/lisp/= directory.
To use it:

: Make sure contrib/lisp/ is in your load-path
: M-: (require 'org-export) RET
: M-: (require 'org-e-latex) RET ; or any other library
: M-x org-export-dispatch RET

These are the currently available exporters:

- =org-e-ascii.el= by Nicolas
- =org-e-beamer.el= by Nicolas
- =org-e-groff.el= by Luis Anaya
- =org-e-html.el= by Jambunathan
- =org-e-latex.el= by Nicolas
- =org-e-man.el= by Luis Anaya
- =org-e-odt.el= by Jambunathan
- =org-e-texinfo.el= by Jonathan Leech-Pepin
- =org-md.el= by Nicolas 

If we have enough testers, the new export engine is very likely to replace
the current one for the next major release.  Please report any problem on
the mailing list!

If you want to write a new export backend based on this export engine,
please check the [[https://orgmode.org/worg/dev/org-export-reference.html][online documentation]].

*** New Babel languages

**** Support for execution of Scala code blocks (see lisp/ob-scala.el)
**** Support for execution of IO code blocks (see lisp/ob-io.el)

** Incompatible changes

   - If your code relies on =org-write-agenda=, please use
     [[doc::org-agenda-write][org-agenda-write]] from now on.

   - If your code relies on =org-make-link=, please use =concat=
     instead.

   - =org-link-to-org-use-id= has been renamed to
     =org-id-link-to-org-use-id= and its default value is nil.  The
     previous default was =create-if-interactive-and-no-custom-id=.

** New features and user-visible changes

*** Org Element

org-element.el is a toolbox for parsing and analysing "elements" in an
Org-mode buffer.  This has been written by Nicolas Goaziou and has been
tested for quite some time.  It is now part of Org's core and many core
functions rely on this package.

Two functions might be particularily handy for users: =org-element-at-point=
and =org-element-context=.  See the docstrings for more details.

Below is a list of editing and navigating commands that now rely on
org-element.el.

**** [[doc::org-fill-paragraph][org-fill-paragraph]] has been completely rewritten

The filling mechanisms now rely on org-element, trying to do the right
thing on each element in various contexts.  E.g. filling in a list item
will preserve indentation; filling in message-mode will fall back on the
relevant filling functions; etc.

**** [[doc::org-metaup][org-metaup]] and [[doc::org-metadown][org-metadown]] will drag the element backward/forward

If you want to get the old behavior (i.e. moving a line up and down), you
can first select the line as an active region, then =org-metaup/down= to
move the region backward/forward.  This also works with regions bigger than
just one line.

**** [[doc::org-up-element][org-up-element]] and [[doc::org-down-element][org-down-element]] (respectively =C-c C-^= and =C-c C-_=)

This will move the point up/down in the hierarchy of elements.

**** [[doc::org-backward-element][org-backward-element]] and [[doc::org-forward-element][org-forward-element]] (respectively =M-{= and =M-}=)

This will move the point backward/forward in the hierarchy of elements.

**** [[doc::org-narrow-to-element][org-narrow-to-element]] will narrow to the element at point
**** [[doc::org-mark-element][org-mark-element]] will mark the element at point

This command is bound to =M-h= and will mark the element at point.  If the
point is at a paragraph, it will mark the paragraph.  If the point is at a
list item, it will mark the list item.  Etc.

Note that if point is at the beginning of a list, it will mark the whole
list.

To mark a subtree, you can either use =M-h= on the headline (since there is
no ambiguity about the element you're at) or [[doc::org-mark-subtree][org-mark-subtree]] (=C-c @=)
anywhere in the subtree.

Invoking [[doc::org-mark-element][org-mark-element]] repeatedly will try to mark the next element on
top of the previous one(s).  E.g. hitting =M-h= twice on a headline will
mark the current subtree and the next one on the same level.

*** Org Agenda

**** New option [[doc::org-agenda-sticky][org-agenda-sticky]]

There is a new option =org-agenda-sticky= which enables "sticky"
agendas.  Sticky agendas remain opened in the background so that you
don't need to regenerate them each time you hit the corresponding
keystroke.  This is a big time saver.

When [[doc::org-agenda-sticky][org-agenda-sticky]] is =non-nil=, the agenda buffer will be named
using the agenda key and its description.  In sticky agendas, the =q=
key will just bury the agenda buffers and further agenda commands will
show existing buffer instead of generating new ones.  

If [[doc::org-agenda-sticky][org-agenda-sticky]] is set to =nil=, =q= will kill the single agenda
buffer.

**** New option [[doc::org-agenda-custom-commands-contexts][org-agenda-custom-commands-contexts]]

Setting this option allows you to define specific context where
agenda commands should be available from.  For example, when set
to this value

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands-contexts
        '(("p" (in-file . "\\.txt"))))
#+END_SRC

then the =p= agenda command will only be available from buffers
visiting *.txt files.  See the docstring and the manual for more
details on how to use this.

**** Changes in bulk actions

The set of commands starting with =k ...= as been deleted and the
features have been merged into the "bulk action" feature.

After you marked some entries in the agenda, if you call =B s=, the
agenda entries will be rescheduled using the date at point if on a
date header.  If you are on an entry with a timestamp, you will be
prompted for a date to reschedule your marked entries to, using the
timestamp at point as the default prompt.

You can now use =k= to capture the marked entry and use the date at
point as an overriding date for the capture template.

To bind this behavior to =M-x org-capture RET= (or its keybinding),
set the new option [[doc::org-capture-use-agenda-date][org-capture-use-agenda-date]] to =t=.

**** =N= and =P= in the agenda will move to the next/previous item

**** New command [[doc::org-agenda-bulk-mark-all][org-agenda-bulk-mark-all]] to mark all items

This new command is bound to =*= in agenda mode.

There is also a new option [[doc::org-agenda-bulk-mark-char][org-agenda-bulk-mark-char]] to set the character
to use as a mark for bulk actions.

**** New option [[doc::org-agenda-persistent-marks][org-agenda-persistent-marks]]

When set to =non-nil=, marks will remain visible after a bulk action.  You
can temporarily toggle this by pressing =p= when invoking
[[doc::org-agenda-bulk-action][org-agenda-bulk-action]].

**** New option [[doc::org-agenda-skip-timestamp-if-deadline-is-shown][org-agenda-skip-timestamp-if-deadline-is-shown]]

=Non-nil= means skip timestamp line if same entry shows because of
deadline.

In the agenda of today, an entry can show up multiple times because it has
both a plain timestamp and has a nearby deadline.  When this variable is t,
then only the deadline is shown and the fact that the entry has a timestamp
for or including today is not shown.  When this variable is =nil=, the
entry will be shown several times.

**** New =todo-unblocked= and =nottodo-unblocked= skip conditions

See the [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=f426dadef0c410b5abded3dd9d6bf1123385f0c8][git commit]] for more explanations.

**** Allow category filtering in the agenda

You can now filter the agenda by category.  Pressing "<" will filter by
the category of the item on the current line, and pressing "<" again will
remove the filter.  You can combine tag filters and category filters.

You can use =org-agenda-category-filter= in your custom agenda views and
=org-agenda-category-filter-preset= in your main configuration.

See also the new command [[doc::org-agenda-filter-by-top-category][org-agenda-filter-by-top-category]]: hitting `^'
will filter by "Top" category: only show entries that are of the same
category than the Top category of the entry at point.
*** Org Links

**** Inserting links

When inserting links through [[doc::org-insert-link][org-insert-link]], the description is now
displayed first, followed by the literal link, as the description is often
more useful when you look for the link you want to insert.

Completion now complete both literal links and description.  If you
complete a description, the literal link and its description will be
inserted directly, whereas when you complete the literal link, you will be
prompted for a description (as with Org 7.8.)

In the completion buffer, links to the current buffer are now highlighted.

**** New templates =%h= and =%(sexp)= for abbreviated links

On top of =%s= template, which is replaced by the link tag in abbreviated
links, you can now use =%h= (which does the same than =%s= but does not
hexify the tag) and =%(sexp)= (which can run a function that takes the tag
as its own argument.)

**** New link type =help=

You can now create links from =help= buffers.

For example, if you request help for the command [[doc::org-agenda][org-agenda]] with =C-h f
org-agenda RET=, creating a link from this buffer will let you go back to
the same buffer.

**** New command [[doc::org-insert-all-links][org-insert-all-links]]

This will insert all links as list items.  With a universal prefix
argument, links will not be deleted from =org-stored-links=.

This new command is bound to =C-c C-M-l=.

**** New option [[doc::org-url-hexify-p][org-url-hexify-p]]

When set to =nil=, the =URL= part of a link will not be hexified.

**** Org can now open multiple shell links


**** New option [[doc::org-doi-server-url][org-doi-server-url]] to specify an alternate DOI server

**** RET now follows time stamps links
*** Org Editing

**** [[doc::org-todo][org-todo]] and =org-archive-*= can now loop in the active region

When [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]] is =non-nil=, using [[doc::org-todo][org-todo]]
or =org-archive-*= commands in the active region will loop over headlines.
This is handy if you want to set the TODO keyword for several items, or
archive them quickly.
**** You can now set tags for headlines in a region

If [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]] is =non-nil=, then selecting
the region and hitting =C-c C-q= will set the tags for all headlines in the
region.

**** New command [[doc::org-insert-drawer][org-insert-drawer]] to insert a drawer interactively
**** Comments start with "^[ \t]*# " anywhere on a line

Note that the space after the hashtag is mandatory.  Comments with "^#+"
are not supported anymore.

**** New speed key =#= to toggle the COMMENT cookie on a headline
**** =indent-region-function= is now set to [[doc::org-indent-region][org-indent-region]]

=C-M-\= should now produce useful results.

You can unindent the buffer with [[doc::org-unindent-buffer][org-unindent-buffer]].

**** New option [[doc::org-allow-promoting-top-level-subtree][org-allow-promoting-top-level-subtree]]

When =non-nil=, =S-M-<left>= will promote level-1 subtrees containing other
subtrees.  The level-1 headline will be commented out.  You can revert to
the previous state with =M-x undo RET=.

*** Org Clock
    
**** New keybinding =C-c C-x C-z= for [[doc::org-clock-resolve][org-clock-resolve]]
**** New keybinding =C-c C-x C-q= for [[doc::org-clock-cancel][org-clock-cancel]]
**** New command [[doc::org-clock-in-last][org-clock-in-last]] to clock in the last clocked item

This command is bound to =C-c C-x C-x= and will clock in the last clocked
entry, if any.

**** =C-u M-x= [[doc::org-clock-out][org-clock-out]] =RET= now prompts for a state to switch to
**** =S-M-<up/down>= on a clock timestamps adjusts the previous/next clock
**** New option [[doc::org-clock-continuously][org-clock-continuously]]

When set to =nil=, clocking in a task will first try to find the last
clocked out task and restart from when that task was clocked out.

You can temporarily activate continuous clocking with =C-u C-u
C-u M-x= [[doc::org-clock-in][org-clock-in]] =RET= (three universal prefix arguments) and
=C-u C-u M-x= [[doc::org-clock-in-last][org-clock-in-last]] =RET= (two universal prefix
arguments).

**** New option [[doc::org-clock-frame-title-format][org-clock-frame-title-format]]

This option sets the value of =frame-title-format= when clocking in.

**** New options for controlling the clockreport display

[[doc::org-clock-file-time-cell-format][org-clock-file-time-cell-format]]: Format string for the file time cells in
clockreport.

[[doc::org-clock-total-time-cell-format][org-clock-total-time-cell-format]]: Format string for the total time cells
in clockreport.

**** New options for controlling the clock/timer display

[[doc::org-clock-clocked-in-display][org-clock-clocked-in-display]]: control whether the current clock is
displayed in the mode line and/or frame title.

[[doc::org-timer-display][org-timer-display]]: control whether the current timer is displayed in the
mode line and/or frame title.

This allows the clock and timer to be displayed in the frame title instead
of, or as well as, the mode line.  This is useful for people with limited
space in the mode line but with ample space in the frame title.

*** Org Appearance

**** New option [[doc::org-custom-properties][org-custom-properties]]

The visibility of properties listed in this options can be turn on/off with
[[doc::org-toggle-custom-properties-visibility][org-toggle-custom-properties-visibility]].  This might be useful for
properties used by third-part tools or that you don't want to see
temporarily.

**** New command [[doc::org-redisplay-inline-images][org-redisplay-inline-images]]

This will redisplay all images.  It is bound to =C-c C-x C-M-v=.

**** New entities in =org-entities.el=

There are these new entities:

:     ("tilde" "\\~{}" nil "&tilde;" "~" "~" "~")
:     ("slash" "/" nil "/" "/" "/" "/")
:     ("plus" "+" nil "+" "+" "+" "+")
:     ("under" "\\_" nil "_" "_" "_" "_")
:     ("equal" "=" nil "=" "=" "=" "=")
:     ("asciicirc" "\\textasciicircum{}" nil "^" "^" "^" "^")

**** New face =org-list-dt= for definition terms
**** New face =org-date-selected= for the selected calendar day
**** New face value for =org-document-title=

The face is back to a normal height.

*** Org Columns

**** New speed command =:= to activate the column view
**** New special property =CLOCKSUM_T= to display today's clocked time

You can use =CLOCKSUM_T= the same way you use =CLOCKSUM=.  It will display
the time spent on tasks for today only.

**** Use the =:COLUMNS:= property in columnview dynamic blocks

If the =:COLUMNS:= is set in a subtree, the columnview dynamic block will
use its value as the column format.

**** Consider inline tasks when computing a sum

*** Org Dates and Time Stamps

**** Enhanced [[doc::org-sparse-tree][org-sparse-tree]]

=C-c /= can now check for time ranges.

When checking for dates with =C-c /= it is useful to change the type of
dates that you are interested in.  You can now do this interactively with
=c= after =C-c /= and/or by setting [[doc::org-sparse-tree-default-date-type][org-sparse-tree-default-date-type]] to
the default value you want.

**** Support for hourly repeat cookies

You can now use

: SCHEDULED: <2012-08-20 lun. 08:00 +1h>

if you want to add an hourly repeater to an entry.

**** =C-u C-u C-c .= inserts a time-stamp with no prompt
**** When (setq [[doc::org-read-date-prefer-future][org-read-date-prefer-future]] 'time), accept days in the prompt

"8am Wed" and "Wed 8am" are now acceptable values when entering a date from
the prompt.  If [[doc::org-read-date-prefer-future][org-read-date-prefer-future]] is set to =time=, this will
produce the expected prompt indication.

**** New option [[doc::org-datetree-add-timestamp][org-datetree-add-timestamp]]

When set to =non-nil=, datetree entries will also have a timestamp.  This
is useful if you want to see these entries in a sparse tree with =C-c /=.

*** Org Capture

**** New command [[doc::org-capture-string][org-capture-string]]

M-x [[doc::org-capture-string][org-capture-string]] RET will prompt for a string and a capture template.
The string will be used as an annotation for the template.  This is useful
when capturing in batch mode as it lets you define the content of the
template without being in Emacs.

**** New option [[doc::org-capture-templates-contexts][org-capture-templates-contexts]]

Setting this option allows you to define specific context where
capture templates should be available from.  For example, when
set to this value

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates-contexts
        '(("c" (in-mode . "message-mode"))))
#+END_SRC

then the =c= capture template will only be available from
=message-mode= buffers.  See the docstring and the manual for
more details on how to use this.

**** New =%l= template to insert the literal link
**** New option [[doc::org-capture-bookmark][org-capture-bookmark]]

Org used to automatically add a bookmark with capture a note.  You can now
turn this on by setting [[doc::org-capture-bookmark][org-capture-bookmark]] to =nil=.

**** Expand =%<num>= escape sequences into text entered for <num>'th =%^{PROMPT}= escape

See the manual for more explanations.

**** More control over empty lines

You can use =:empty-lines-before= and =:empty-lines-after= to control the
insertion of empty lines.  Check the manual for more explanations.

**** New hook [[doc::org-capture-prepare-finalize-hook][org-capture-prepare-finalize-hook]]

This new hook runs before the finalization process starts.

*** Org Export

**** New functions =orgtbl-to-table.el= and =orgtbl-to-unicode=

=orgtbl-to-table.el= convert the table to a =table.el= table, and
=orgtbl-to-unicode= will use =ascii-art-to-unicode.el= (when
available) to print beautiful tables.

**** [[doc::org-table-export][org-table-export]] now a bit clever about the target format

When you specify a file name like =table.csv=, [[doc::org-table-export][org-table-export]] will now
suggest =orgtbl-to-csv= the default method for exporting the table.

**** New option [[doc::org-export-date-timestamp-format][org-export-date-timestamp-format]]

The option allows to set a time string format for Org timestamps
in the #+DATE option.
**** LaTeX: New options for exporting table rules :tstart, :hline and :tend

See [[doc::org-export-latex-tables-hline][org-export-latex-tables-hline]] and [[doc::org-export-latex-tables-tend][org-export-latex-tables-tend]].

**** LaTeX: You can now set =:hfmt= from =#+ATTR_LaTeX=
**** Beamer: Add support and keybinding for the =exampleblock= environment

Add support for these languages in [[doc::org-export-language-setup][org-export-language-setup]].  More
languages are always welcome.

**** Beamer: New option [[doc::org-beamer-inherited-properties][org-beamer-inherited-properties]]

This option allows Beamer export to inherit some properties.
Thanks to Carsten for implementing this.

**** ODT: Add support for ODT export in org-bbdb.el
**** ODT: Add support for indented tables (see [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=e9fd334eb4ce4253875d84c34cb9ab750794fda5][this commit]] for details)
**** ODT: Improve the conversion from ODT to other formats
**** ASCII: Swap the level-1/level-2 characters to underline the headlines
**** Support for Chinese, simplified Chinese, Russian, Ukrainian and Japanese
**** HTML: New option [[doc::org-export-html-date-format-string][org-export-html-date-format-string]]

Format string to format the date and time in HTML export.
Thanks to Sébastien Vauban for this patch.

*** Org Babel

**** New =:results drawer= parameter

=:results drawer= replaces =:results wrap=, which is deprecated but still
supported.

**** =:results org= now put results in a =#+BEGIN_SRC org= block

=:results org= used to put results in a =#+BEGIN_ORG= block but it now puts
results in a =#+BEGIN_SRC org= block, wich comma-escaped lines.

=#+BEGIN_ORG= blocks are obsolete.

**** Exporting =#+BEGIN_SRC org= blocks exports the code

It used to exports the results of the code.

*** Miscellaneous

**** New menu entry for [[doc::org-refile][org-refile]]
**** Allow capturing to encrypted entries

If you capture to an encrypted entry, it will be decrpyted before
inserting the template then re-encrypted after finalizing the capture.

**** Inactive timestamps are now handled in tables

Calc can do computation on active time-stamps like <2012-09-29 sat.>.
Inactive time-stamps in a table's cell are now internally deactivated so
that Calc formulas can operate on them.

**** [[doc::org-table-number-regexp][org-table-number-regexp]] accept comma as a decimal mark to represent numbers
**** Org allows a new property =APPT_WARNTIME=

You can set it with the =W= speedy key or set it manually.  When set,
exporting to iCalendar and [[doc::org-agenda-to-appt][org-agenda-to-appt]] will use the value of this
property as the number of minutes for the warning alarm.

**** New command [[doc::org-inc-effort][org-inc-effort]]

This will increment the effort value.

It is bound to =C-c C-x E= and to =E= as a speedy command.

**** Attach: Add support for creating symbolic links

`org-attach-method' now supports a new method =lns=, allowing to attach
symbolic links.
**** Archive: you can now archive to a datetree

**** New option [[doc::org-inlinetask-show-first-star][org-inlinetask-show-first-star]]

=Non-nil= means display the first star of an inline task as
additional marker.  When =nil=, the first star is not shown.

**** New option [[doc::org-latex-preview-ltxpng-directory][org-latex-preview-ltxpng-directory]]

This lets you define the path for the =ltxpng/= directory.

**** You can now use imagemagick instead of dvipng to preview LaTeX fragments
**** You can now turn off [[doc::orgstruct++-mode][orgstruct++-mode]] safely
**** =C-u C-c C-c= on list items to add check boxes

=C-u C-c C-c= will add an empty check box on a list item.

When hit from the top of the list, it will add check boxes for all top
level list items.

**** =org-list-ending-method= and =org-list-end-regexp= are now obsolete

Fall back on using =org-list-end-re= only, which see.

**** org-feed.el now expands =%(sexp)= templates
**** New option [[doc::org-protocol-data-separator][org-protocol-data-separator]]

**** New option [[doc::org-ditaa-jar-option][org-ditaa-jar-option]] to specify the ditaa jar file

**** New possible value for [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]]

When [[doc::org-loop-over-headlines-in-active-region][org-loop-over-headlines-in-active-region]] is set to
=start-level=, the command will loop over the active region but
will only act upon entries that are of the same level than the
first headline in the region.

**** New option [[doc::org-habit-show-all-today][org-habit-show-all-today]]

When set to =t=, show all (even unscheduled) habits on today's agenda.

** Important bug fixes

*** M-TAB on options keywords perform completion correctly again

If you hit =M-TAB= on keywords like =#+TITLE=, Org will try to
perform completion with meaningful values.

*** Add licenses to javascript embedded and external code snippets

Embedded javascript code produced when exporting an Org file to HTML is now
licensed under GPLv3 (or later), and the copyright is owned by the Free
Software Foundation, Inc.

The javascript code for embedding MathJax in the browser mentions the
MathJax copyright and the Apache 2.0 license.

The javascript code for embedding =org-injo.js= in the browser mentions the
copyright of Sebastian Rose and the GPLv3 (or later) license.

=org-export-html-scripts= is now a variable, so that you can
adapt the code and the license to your needs.

See http://www.gnu.org/philosophy/javascript-trap.html for
explanations on why these changes were necessary.
* Version 7.8.11

** Incompatible changes

*** Emacs 21 support has been dropped

    Do not use Org mode 7.xx with Emacs 21, use [[https://orgmode.org/org-6.36c.zip][version 6.36c]] instead.

*** XEmacs support requires the XEmacs development version

    To use Org mode 7.xx with XEmacs, you need to run the developer
    version of XEmacs.  We were about to drop XEmacs support entirely,
    but Michael Sperber stepped in and made changes to XEmacs that
    made it easier to keep the support.  Thanks to Michael for this
    last-minute save.

*** New keys for TODO sparse trees

    The key =C-c C-v= is now reserved for Org Babel action.  TODO
    sparse trees can still be made with =C-c / t= (all not-done
    states) and =C-c / T= (specific states).

*** The Agenda =org-agenda-ndays= is now obsolete

    The variable =org-agenda-ndays= is obsolete - please use
    =org-agenda-span= instead.

    Thanks to Julien Danjou for this.

*** Changes to the intended use of =org-export-latex-classes=

    So far this variable has been used to specify the complete header
    of the LaTeX document, including all the =\usepackage= calls
    necessary for the document.  This setup makes it difficult to
    maintain the list of packages that Org itself would like to call,
    for example for the special symbol support it needs.

    First of all, you can *opt out of this change* in the following
    way: You can say: /I want to have full control over headers, and I
    will take responsibility to include the packages Org needs/.  If
    that is what you want, add this to your configuration and skip the
    rest of this section (except maybe for the description of the
    =[EXTRA]= place holder):

    #+begin_src emacs-lisp
   (setq org-export-latex-default-packages-alist nil
         org-export-latex-packages-alist nil)
    #+end_src

    /Continue to read here if you want to go along with the modified
    setup./

    There are now two variables that should be used to list the LaTeX
    packages that need to be included in all classes.  The header
    definition in =org-export-latex-classes= should then not contain
    the corresponding =\usepackage= calls (see below).

    The two new variables are:

    1. =org-export-latex-default-packages-alist= :: This is the
         variable where Org-mode itself puts the packages it needs.
         Normally you should not change this variable.  The only
         reason to change it anyway is when one of these packages
         causes a conflict with another package you want to use.  Then
         you can remove that packages and hope that you are not using
         Org-mode functionality that needs it.

    2. =org-export-latex-packages-alist= :: This is the variable where
         you can put the packages that you'd like to use across all
         classes.

    The sequence how these customizations will show up in the LaTeX
    document are:

    1. Header from =org-export-latex-classes=
    2. =org-export-latex-default-packages-alist=
    3. =org-export-latex-packages-alist=
    4. Buffer-specific things set with =#+LaTeX_HEADER:=

    If you want more control about which segment is placed where, or
    if you want, for a specific class, have full control over the
    header and exclude some of the automatic building blocks, you can
    put the following macro-like place holders into the header:

    #+begin_example
    [DEFAULT-PACKAGES]      \usepackage statements for default packages
    [NO-DEFAULT-PACKAGES]   do not include any of the default packages
    [PACKAGES]              \usepackage statements for packages
    [NO-PACKAGES]           do not include the packages
    [EXTRA]                 the stuff from #+LaTeX_HEADER
    [NO-EXTRA]              do not include #+LaTeX_HEADER stuff
    #+end_example

    If you have currently customized =org-export-latex-classes=, you
    should revise that customization and remove any package calls that
    are covered by =org-export-latex-default-packages-alist=.  This
    applies to the following packages:

    - inputenc
    - fontenc
    - fixltx2e
    - graphicx
    - longtable
    - float
    - wrapfig
    - soul
    - t1enc
    - textcomp
    - marvosym
    - wasysym
    - latexsym
    - amssymb
    - hyperref

    If one of these packages creates a conflict with another package
    you are using, you can remove it from
    =org-export-latex-default-packages-alist=.  But then you risk that
    some of the advertised export features of Org will not work
    properly.

    You can also consider moving packages that you use in all classes
    to =org-export-latex-packages-alist=.  If necessary, put the place
    holders so that the packages get loaded in the right sequence.  As
    said above, for backward compatibility, if you omit the place
    holders, all the variables will dump their content at the end of
    the header.

*** The constant =org-html-entities= is obsolete

    Its content is now part of the new constant =org-entities=, which
    is defined in the file org-entities.el.  =org-html-entities= was
    an internal variable, but it is possible that some users did write
    code using it.

*** =org-bbdb-anniversary-format-alist= has changed

    Please check the docstring and update your settings accordingly.

*** Deleted =org-mode-p=

    This function has been deleted: please update your code.

** Important new features

*** New Org to ODT exporter

    Jambunathan's Org to ODT exporter is now part of Org.

    To use it, it `C-c C-e o' in an Org file.  See the documentation
    for more information on how to customize it.

*** org-capture.el is now the default capture system

    This replaces the earlier system org-remember.  The manual only
    describes org-capture, but for people who prefer to continue to
    use org-remember, we keep a static copy of the former manual
    section [[https://orgmode.org/org-remember.pdf][chapter about remember]].

    The new system has a technically cleaner implementation and more
    possibilities for capturing different types of data.  See
    [[https://list.orgmode.org/C46F10DC-DE51-43D4-AFFE-F71E440D1E1F@gmail.com][Carsten's announcement]] for more details.

    To switch over to the new system:

    1. Run

     : M-x org-capture-import-remember-templates RET

       to get a translated version of your remember templates into the
       new variable =org-capture-templates=.  This will "mostly" work,
       but maybe not for all cases.  At least it will give you a good
       place to modify your templates.  After running this command,
       enter the customize buffer for this variable with

     : M-x customize-variable RET org-capture-templates RET

       and convince yourself that everything is OK.  Then save the
       customization.

    2. Bind the command =org-capture= to a key, similar to what you did
       with org-remember:

     : (define-key global-map "\C-cc" 'org-capture)

       If your fingers prefer =C-c r=, you can also use this key once
       you have decided to move over completely to the new
       implementation.  During a test time, there is nothing wrong
       with using both system in parallel.

** New libraries

*** New Org libraries
**** org-eshell.el (Konrad Hinsen)

     Implement links to eshell buffers.

**** org-special-blocks (Carsten Dominik)

     This package generalizes the #+begin_foo and #+end_foo tokens.

     To use, put the following in your init file:

     #+BEGIN_EXAMPLE
(require 'org-special-blocks)
#+END_EXAMPLE

     The tokens #+begin_center, #+begin_verse, etc. existed
     previously.  This package generalizes them (at least for the
     LaTeX and html exporters).  When a #+begin_foo token is
     encountered by the LaTeX exporter, it is expanded
     into \begin{foo}.  The text inside the environment is not
     protected, as text inside environments generally is.
     When #+begin_foo is encountered by the html exporter, a div with
     class foo is inserted into the HTML file.  It is up to the user
     to add this class to his or her stylesheet if this div is to mean
     anything.

**** org-taskjuggler.el (Christian Egli)

     Christian Egli's /org-taskjuggler.el/ module is now part of Org.
     He also wrote a [[https://orgmode.org/worg/org-tutorials/org-taskjuggler.html][tutorial]] for it.

**** org-ctags.el (Paul Sexton)

     Targets like =<<my target>>= can now be found by Emacs' etag
     functionality, and Org-mode links can be used to to link to
     etags, also in non-Org-mode files.  For details, see the file
     /org-ctags.el/.

     This feature uses a new hook =org-open-link-functions= which will
     call function to do something special with text links.

     Thanks to Paul Sexton for this contribution.

**** org-docview.el (Jan Böcker)

     This new module allows links to various file types using docview, where
     Emacs displays images of document pages.  Docview link types can point
     to a specific page in a document, for example to page 131 of the
     Org-mode manual:

     : [[docview:~/.elisp/org/doc/org.pdf::131][Org-Mode Manual]]

     Thanks to Jan Böcker for this contribution.

*** New Babel libraries

- ob-picolisp.el (Thorsten Jolitz)
- ob-fortran.el (Sergey Litvinov)
- ob-shen.el (Eric Schulte)
- ob-maxima.el (Eric S Fraga)
- ob-java.el (Eric Schulte)
- ob-lilypond.el (Martyn Jago)
- ob-awk.el (Eric Schulte)

** Other new features and various enhancements

*** Hyperlinks

**** Org-Bibtex -- major improvements

     Provides support for managing bibtex bibliographical references
     data in headline properties.  Each headline corresponds to a
     single reference and the relevant bibliographic meta-data is
     stored in headline properties, leaving the body of the headline
     free to hold notes and comments.  Org-bibtex is aware of all
     standard bibtex reference types and fields.

     The key new functions are

     - org-bibtex-check :: queries the user to flesh out all required
          (and with prefix argument optional) bibtex fields available
          for the specific reference =type= of the current headline.

     - org-bibtex-create :: Create a new entry at the given level,
          using org-bibtex-check to flesh out the relevant fields.

     - org-bibtex-yank :: Yank a bibtex entry on the kill ring as a
          formatted Org-mode headline into the current buffer

     - org-bibtex-export-to-kill-ring :: Export the current headline
          to the kill ring as a formatted bibtex entry.

**** org-gnus.el now allows link creation from messages

     You can now create links from messages.  This is particularly
     useful when the user wants to stored messages that he sends, for
     later check.  Thanks to Ulf Stegemann for the patch.

**** Modified link escaping

     David Maus worked on `org-link-escape'.  See [[https://list.orgmode.org/87k4gysacq.wl%dmaus@ictsoc.de][his message]]:

     : Percent escaping is used in Org mode to escape certain characters
     : in links that would either break the parser (e.g. square brackets
     : in link target oder description) or are not allowed to appear in
     : a particular link type (e.g. non-ascii characters in a http:
     : link).
     :
     : With this change in place Org will apply percent escaping and
     : unescaping more consistently especially for non-ascii characters.
     : Additionally some of the outstanding bugs or glitches concerning
     : percent escaped links are solved.

     Thanks a lot to David for this work.

**** Make =org-store-link= point to directory in a dired buffer

     When, in a dired buffer, the cursor is not in a line listing a
     file, `org-store-link' will store a link to the directory.

     Patch by Stephen Eglen.

**** Allow regexps in =org-file-apps= to capture link parameters

     The way extension regexps in =org-file-apps= are handled has
     changed.  Instead of matching against the file name, the regexps
     are now matched against the whole link, and you can use grouping
     to extract link parameters which you can then use in a command
     string to be executed.

     For example, to allow linking to PDF files using the syntax
     =file:/doc.pdf::<page number>=, you can add the following entry
     to org-file-apps:

     #+begin_example
     Extension: \.pdf::\([0-9]+\)\'
     Command:   evince "%s" -p %1
     #+end_example

     Thanks to Jan Böcker for a patch to this effect.

*** Dates and time

**** Allow relative time when scheduling/adding a deadline

     You can now use relative duration strings like "-2d" or "++3w"
     when calling =org-schedule= or =org-deadline=: it will schedule
     (or set the deadline for) the item respectively two days before
     today and three weeks after the current timestamp, if any.

     You can use this programmatically: =(org-schedule nil "+2d")=
     will work on the current entry.

     You can also use this while (bulk-)rescheduling and
     (bulk-)resetting the deadline of (several) items from the agenda.

     Thanks to Memnon Anon for a heads up about this!

**** American-style dates are now understood by =org-read-date=

     So when you are prompted for a date, you can now answer like this

     #+begin_example
     2/5/3         --> 2003-02-05
     2/5           --> <CURRENT-YEAR>-02-05
     #+end_example

*** Agenda

**** =org-agenda-custom-commands= has a default value

     This option used to be `nil' by default.  This now has a default
     value, displaying an agenda and all TODOs.  See the docstring for
     details.  Thanks to Carsten for this.

**** Improved filtering through =org-agenda-to-appt=

     The new function allows the user to refine the scope of entries
     to pass to =org-agenda-get-day-entries= and allows to filter out
     entries using a function.

     Thanks to Peter Münster for raising a related issue and to
     Tassilo Horn for this idea.  Also thanks to Peter Münster for
     [[git:68ffb7a7][fixing a small bug]] in the final implementation.

**** Allow ap/pm times in agenda time grid

     Times in the agenda can now be displayed in am/pm format.  See
     the new variable =org-agenda-timegrid-use-ampm=.  Thanks to
     C. A. Webber for a patch to this effect.

**** Agenda: Added a bulk "scattering" command

     =B S= in the agenda buffer will cause tasks to be rescheduled a
     random number of days into the future, with 7 as the default.
     This is useful if you've got a ton of tasks scheduled for today,
     you realize you'll never deal with them all, and you just want
     them to be distributed across the next N days.  When called with
     a prefix arg, rescheduling will avoid weekend days.

     Thanks to John Wiegley for this.

*** Exporting

**** Simplification of org-export-html-preamble/postamble

     When set to `t', export the preamble/postamble as usual, honoring
     the =org-export-email/author/creator-info= variables.

     When set to a formatting string, insert this string.  See the
     docstring of these variable for details about available
     %-sequences.

     You can set =:html-preamble= in publishing project in the same
     way: `t' means to honor =:email/creator/author-info=, and a
     formatting string will insert a string.

**** New exporters to Latin-1 and UTF-8

     While Ulf Stegemann was going through the entities list to
     improve the LaTeX export, he had the great idea to provide
     representations for many of the entities in Latin-1, and for all
     of them in UTF-8.  This means that we can now export files rich
     in special symbols to Latin-1 and to UTF-8 files.  These new
     exporters can be reached with the commands =C-c C-e n= and =C-c
     C-e u=, respectively.

     When there is no representation for a given symbol in the
     targeted coding system, you can choose to keep the TeX-macro-like
     representation, or to get an "explanatory" representation.  For
     example, =\simeq= could be represented as "[approx. equal to]".
     Please use the variable =org-entities-ascii-explanatory= to state
     your preference.

**** HTML export: Add class to outline containers using property

     The =HTML_CONTAINER_CLASS= property can now be used to add a
     class name to the outline container of a node in HTML export.

**** Throw an error when creating an image from a LaTeX snippet fails

     This behavior can be configured with the new option variable
     =org-format-latex-signal-error=.

**** Support for creating BEAMER presentations from Org-mode documents

     Org-mode documents or subtrees can now be converted directly in
     to BEAMER presentation.  Turning a tree into a simple
     presentations is straight forward, and there is also quite some
     support to make richer presentations as well.  See the [[https://orgmode.org/manual/Beamer-export.html#Beamer-export][BEAMER
     section]] in the manual for more details.

     Thanks to everyone who has contributed to the discussion about
     BEAMER support and how it should work.  This was a great example
     for how this community can achieve a much better result than any
     individual could.

*** Refiling

**** Refile targets can now be cached

     You can turn on caching of refile targets by setting the variable
     =org-refile-use-cache=.  This should speed up refiling if you
     have many eligible targets in many files.  If you need to update
     the cache because Org misses a newly created entry or still
     offers a deleted one, press =C-0 C-c C-w=.

**** New logging support for refiling

     Whenever you refile an item, a time stamp and even a note can be
     added to this entry.  For details, see the new option
     =org-log-refile=.

     Thanks to Charles Cave for this idea.

*** Completion

**** In-buffer completion is now done using John Wiegley's pcomplete.el

     Thanks to John Wiegley for much of this code.

*** Tables

**** New command =org-table-transpose-table-at-point=

     See the docstring.  This hack from Juan Pechiar is now part of
     Org's core.  Thanks to Juan!

**** Display field's coordinates when editing it with =C-c `=

     When editing a field with =C-c `=, the field's coordinate will
     the displayed in the buffer.

     Thanks to Michael Brand for a patch to this effect.

**** Spreadsheet computation of durations and time values

     If you want to compute time values use the =T= flag, either in
     Calc formulas or Elisp formulas:

     | Task 1 | Task 2 |   Total |
     |--------+--------+---------|
     |  35:00 |  35:00 | 1:10:00 |
     #+TBLFM: @2$3=$1+$2;T

     Values must be of the form =[HH:]MM:SS=, where hours are
     optional.

     Thanks to Martin Halder, Eric Schulte and Carsten for code and
     feedback on this.

**** Implement formulas applying to field ranges

     Carsten implemented this field-ranges formulas.

     : A frequently requested feature for tables has been to be able to define
     : row formulas in a way similar to column formulas.  The patch below allows
     : things like
     :
     : @3=
     : @2$2..@5$7=
     : @I$2..@II$4=
     :
     : as the left hand side for table formulas in order to write a formula that
     : is valid for an entire column or for a rectangular section in a
     : table.

     Thanks a lot to Carsten for this.

**** Sending radio tables from org buffers is now allowed

     Org radio tables can no also be sent inside Org buffers.  Also,
     there is a new hook which get called after a table has been sent.

     Thanks to Seweryn Kokot.

*** Lists

**** Improved handling of lists

     Nicolas Goaziou extended and improved the way Org handles lists.

     1. Indentation of text determines again end of items in
        lists. So, some text less indented than the previous item
        doesn't close the whole list anymore, only all items more
        indented than it.

     2. Alphabetical bullets are implemented, through the use of the
        variable `org-alphabetical-lists'. This also adds alphabetical
        counters like [@c] or [@W].

     3. Lists can now safely contain drawers, inline tasks, or various
        blocks, themselves containing lists. Two variables are
        controlling this: `org-list-forbidden-blocks', and
        `org-list-export-context'.

     4. Improve `newline-and-indent' (C-j): used in an item, it will
        keep text from moving at column 0. This allows to split text
        and make paragraphs and still not break the list.

     5. Improve `org-toggle-item' (C-c -): used on a region with
        standard text, it will change the region into one item. With a
        prefix argument, it will fallback to the previous behavior and
        make every line in region an item. It permits to easily
        integrate paragraphs inside a list.

     6. `fill-paragraph' (M-q) now understands lists. It can freely be
        used inside items, or on text just after a list, even with no
        blank line around, without breaking list structure.

     Thanks a lot to Nicolas for all this!

*** Inline display of linked images

    Images can now be displayed inline.  The key C-c C-x C-v does
    toggle the display of such images.  Note that only image links
    that have no description part will be inlined.

*** Implement offsets for ordered lists

    If you want to start an ordered plain list with a number different
    from 1, you can now do it like this:

    : 1. [@start:12] will star a lit a number 12

*** Babel: code block body expansion for table and preview

    In org-babel, code is "expanded" prior to evaluation. I.e. the
    code that is actually evaluated comprises the code block contents,
    augmented with the extra code which assigns the referenced data to
    variables. It is now possible to preview expanded contents, and
    also to expand code during during tangling. This expansion takes
    into account all header arguments, and variables.

    A new keybinding `C-c M-b p' bound to `org-babel-expand-src-block'
    can be used from inside of a source code block to preview its
    expanded contents (which can be very useful for debugging).
    tangling

    The expanded body can now be tangled, this includes variable
    values which may be the results of other source-code blocks, or
    stored in headline properties or tables. One possible use for this
    is to allow those using org-babel for their emacs initialization
    to store values (e.g. usernames, passwords, etc...) in headline
    properties or in tables.

    Org-babel now supports three new header arguments, and new default
    behavior for handling horizontal lines in tables (hlines), column
    names, and rownames across all languages.

*** Editing Convenience and Appearance

**** New command =org-copy-visible= (=C-c C-x v=)

     This command will copy the visible text in the region into the
     kill ring.  Thanks to Florian Beck for this function and to
     Carsten for adding it to org.el and documenting it!

**** Make it possible to protect hidden subtrees from being killed by =C-k=

     See the new variable =org-ctrl-k-protect-subtree=.  This was a
     request by Scott Otterson.

**** Implement pretty display of entities, sub-, and superscripts.

     The command =C-c C-x \= toggles the display of Org's special
     entities like =\alpha= as pretty unicode characters.  Also, sub
     and superscripts are displayed in a pretty way (raised/lower
     display, in a smaller font).  If you want to exclude sub- and
     superscripts, see the variable
     =org-pretty-entities-include-sub-superscripts=.

     Thanks to Eric Schulte and Ulf Stegeman for making this possible.

**** New faces for title, date, author and email address lines

     The keywords in these lines are now dimmed out, and the title is
     displayed in a larger font, and a special font is also used for
     author, date, and email information.  This is implemented by the
     following new faces:

     =org-document-title=
     =org-document-info=
     =org-document-info-keyword=

     In addition, the variable =org-hidden-keywords= can be used to
     make the corresponding keywords disappear.

     Thanks to Dan Davison for this feature.

**** Simpler way to specify faces for tags and todo keywords

     The variables =org-todo-keyword-faces=, =org-tag-faces=, and
     =org-priority-faces= now accept simple color names as
     specifications.  The colors will be used as either foreground or
     background color for the corresponding keyword.  See also the
     variable =org-faces-easy-properties=, which governs which face
     property is affected by this setting.

     This is really a great simplification for setting keyword faces.
     The change is based on an idea and patch by Ryan Thompson.

**** <N> in tables now means fixed width, not maximum width

     Requested by Michael Brand.

**** Better level cycling function

     =TAB= in an empty headline cycles the level of that headline
     through likely states.  Ryan Thompson implemented an improved
     version of this function, which does not depend upon when exactly
     this command is used.  Thanks to Ryan for this improvement.

**** Adaptive filling

     For paragraph text, =org-adaptive-fill-function= did not handle
     the base case of regular text which needed to be filled.  This is
     now fixed.  Among other things, it allows email-style ">"
     comments to be filled correctly.

     Thanks to Dan Hackney for this patch.

**** `org-reveal' (=C-c C-r=) also decrypts encrypted entries (org-crypt.el)

     Thanks to Richard Riley for triggering this change.

**** Better automatic letter selection for TODO keywords

     When all first letters of keywords have been used, Org now
     assigns more meaningful characters based on the keywords.

     Thanks to Mikael Fornius for this patch.

*** Clocking

**** Clock: Allow synchronous update of timestamps in CLOCK log

     Using =S-M-<up/down>= on CLOCK log timestamps will
     increase/decrease the two timestamps on this line so that
     duration will keep the same.  Note that duration can still be
     slightly modified in case a timestamp needs some rounding.

     Thanks to Rainer Stengele for this idea.

**** Localized clock tables

     Clock tables now support a new new =:lang= parameter, allowing
     the user to customize the localization of the table headers.  See
     the variable =org-clock-clocktable-language-setup= which controls
     available translated strings.

**** Show clock overruns in mode line

     When clocking an item with a planned effort, overrunning the
     planned time is now made visible in the mode line, for example
     using the new face =org-mode-line-clock-overrun=, or by adding an
     extra string given by =org-task-overrun-text=.

     Thanks to Richard Riley for a patch to this effect.

**** Clock reports can now include the running, incomplete clock

     If you have a clock running, and the entry being clocked falls
     into the scope when creating a clock table, the time so far spent
     can be added to the total.  This behavior depends on the setting
     of =org-clock-report-include-clocking-task=.  The default is
     =nil=.

     Thanks to Bernt Hansen for this useful addition.

*** Misc

**** Improvements with inline tasks and indentation

     There is now a configurable way on how to export inline tasks.
     See the new variable =org-inlinetask-export-templates=.

     Thanks to Nicolas Goaziou for coding these changes.

**** A property value of "nil" now means to unset a property

     This can be useful in particular with property inheritance, if
     some upper level has the property, and some grandchild of it
     would like to have the default settings (i.e. not overruled by a
     property) back.

     Thanks to Robert Goldman and Bernt Hansen for suggesting this
     change.

**** New helper functions in org-table.el

     There are new functions to access and write to a specific table field.
     This is for hackers, and maybe for the org-babel people.

     #+begin_example
     org-table-get
     org-table-put
     org-table-current-line
     org-table-goto-line
     #+end_example

**** Archiving: Allow to reverse order in target node

     The new option =org-archive-reversed-order= allows to have
     archived entries inserted in a last-on-top fashion in the target
     node.

     This was requested by Tom.

**** Org-reveal: Double prefix arg shows the entire subtree of the parent

     This can help to get out of an inconsistent state produced for
     example by viewing from the agenda.

     This was a request by Matt Lundin.

* Version 7.8

** Summary

- Jambunathan's ODT exporter is now part of Org's core.
- Nicolas' new export engine is now part of =contrib/=
- Standard code block keywords
- 10 new committers
- Many bugfixes

See below for details.

** New committers who signed the FSF copyright assigment

Here is the list of new contributors who signed the FSF papers
since Org 7.7 - welcome, and thanks for your contributions!

- Andreas Leha
- Christian Moe
- Julian Gehring
- Max Mikhanosha
- Michael Brand
- Niels Giessen
- Pieter Praet
- Sergey Litvinov
- Thomas Holst
- Thorsten Jolitz

** The ODT exporter is now part of Org's core

- Full refresh of the OpenDocument Text section in the
  manual.  All new features listed below are fully-documented.
- Associate custom styles on per-file basis using
  =#+ODT_STYLES_FILE:= directive.
- Fontify code listings using an enhanced version of
  =htmlfontify.el= and generate line numbers natively.
- Embed MathML and OpenDocument formula files.
- Use LaTeX to MathML converter -- say MathToWeb
  (http://www.mathtoweb.com/) -- for handling LaTeX Math
  fragments.
- In tables, use column width cookies to control relative width
  of columns.
- Also for tables, you can specify custom styles using
  =#+ATTR_ODT:= lines.
- Lots of bug fixes.

*Experimental*

The following features are /experimental/.  These features are
specific to the ODT export engine and their implementation and
usage could change considerably in future versions.

- Support for list tables -- see this [[http://lists.gnu.org/archive/html/emacs-orgmode/2011-09/msg00017.html][message on the list]].
- Support for annotation blocks -- see this [[http://lists.gnu.org/archive/html/emacs-orgmode/2011-10/msg01251.html][message on the list]].

Special thanks to Jambunathan for his work and his patience
through the process of integrating this vital contribution into
Org's core.

** New export engine by Nicolas

See the comment sections in org-element.el and in org-export.el
(in =contrib/lisp/=).  Also check the experimental LaTeX exporter
using in =EXPERIMENTAL/org-e-latex.el=.

Check Nicolas' announcement [[http://comments.gmane.org/gmane.emacs.orgmode/49416][on the list]] and hack around!

Thanks a lot to Nicolas for this great and promising achievement.

** Incompatible changes

*** Standardized code block keywords
:PROPERTIES:
:CUSTOM_ID: standardized-code-block-keywords
:END:

Following a round of on-list discussion, many code block synonyms
have been removed.  You can safely move forward the following
syntax:

- call lines are specified with #+call:
- code blocks are named with #+name:
- results are named with #+name:, however results generated by a
  code block may still be labeled with #+results:, and tables
  named with #+tblname: will be considered to be named results

The following function may be used to update an existing Org mode
buffer to the new syntax:

#+begin_src emacs-lisp
  (defun update-org-buffer ()
    "Update an Org mode buffer to the new data, code block and call line syntax."
    (interactive)
    (save-excursion
      (flet ((to-re (lst) (concat "^[ \t]*#\\+" (regexp-opt lst t)
                                  "\\(\\[\\([[:alnum:]]+\\)\\]\\)?\\:[ \t]*"))
             (update (re new)
                     (goto-char (point-min))
                     (while (re-search-forward re nil t)
                       (replace-match new nil nil nil 1))))
        (let ((old-re (to-re '("RESULTS" "DATA" "SRCNAME" "SOURCE")))
              (lob-re (to-re '("LOB")))
              (case-fold-search t))
          (update old-re "name")
          (update lob-re "call")))))
#+end_src

*Note*: If an old version of Org mode (e.g., the one shipped with
Emacs) is installed on your system, many of the important
variables will be pre-defined with a =defvar= and *will not* have
their values automatically updated -- these include the
following:

- =org-babel-data-names=
- =org-babel-result-regexp=
- =org-babel-src-block-regexp=
- =org-babel-src-name-regexp=
- =org-babel-src-name-w-name-regexp=

It may be necessary to either remove the source code of older
versions of Org mode or to explicitly evaluate the ob.el file.

*** Removed the =#+BABEL:= keyword

Code block header arguments may now be specified using the
standard =#+Property:= keyword.  See [[#accumulating-property-keywords][Property names ending in =+=
accumulate]] for more information on the extended property syntax.

*** Deleted =org-mode-p= ([[git:4bbdfd22][git]])

This function has been deleted: please update your hacks if you
relied on it.

** New features and user-visible improvements

*** Day names are optional when you type timestamps manually ([[git:278d5afa][git]])

You can type "<2011-12-12>" or [2011-12-12] and modify this timestamps with
S-<right> like other timestamps.  Thanks to Carsten for implementing this.

*** Improved filtering through =org-agenda-to-appt= ([[git:db04ef74][git]])

The new function allows the user to refine the scope of entries
to pass to =org-agenda-get-day-entries= and allows to filter out
entries using a function.
    
Thanks to Peter Münster for raising a related issue and to
Tassilo Horn for this idea.  Also thanks to Peter Münster for
[[git:68ffb7a7][fixing a small bug]] in the final implementation.

*** =org-agenda-date-later= jumps to today when modifying past date ([[git:f20eef318e9e66481dde560dc5e388e911b28aab][git]])

The command =org-agenda-date-later= (<S-right> in the Agenda
Mode) directly jumps to today.  Thanks to Carsten for
implementing this.

*** Use prefix arg 0 to inhibit note taking for TODO change ([[git:773596e3][git]])

See Carsten's comment: "Sometimes I want to quickly make a few TODOs done
in the agenda and I want to bypass the note taking I have normally set
up.  With this change, I can press `0 t d' in the agenda to do this."

Thanks to Carsten for implementing this.

*** Various improvements to =org-indent.el=

Nicolas Goaziou worked on refactoring and improving
=org-indent.el=, which should now be faster.  It also better
combines with =visual-line-mode=.

*** Property names ending in =+= accumulate
:PROPERTIES:
:CUSTOM_ID: accumulating-property-keywords
:END:

This results in the following behavior.

#+begin_src org
  ,#+property: var  foo=1
  ,#+property: var+ bar=2
  
  ,#+begin_src emacs-lisp
  ,  (+ foo bar)
  ,#+end_src
  
  ,#+results:
  ,: 3
  
  ,#+begin_src emacs-lisp
  ,  (org-entry-get (point) "var" t)
  ,#+end_src
  
  ,#+results:
  ,: foo=1 bar=2
  
  ,* overwriting a file-wide property
  ,  :PROPERTIES:
  ,  :var:      foo=7
  ,  :END:
  
  ,#+begin_src emacs-lisp
  ,  foo
  ,#+end_src
  
  ,#+results:
  ,: 7
  
  ,#+begin_src emacs-lisp
  ,  (org-entry-get (point) "var" t)
  ,#+end_src
  
  ,#+results:
  ,: foo=7
  
  ,* appending to a file-wide property
  ,  :PROPERTIES:
  ,  :var+:      baz=3
  ,  :END:
  
  ,#+begin_src emacs-lisp
  ,  (+ foo bar baz)
  ,#+end_src
  
  ,#+results:
  ,: 6
  
  ,#+begin_src emacs-lisp
  ,  (org-entry-get (point) "var" t)
  ,#+end_src
  
  ,#+results:
  ,: foo=1 bar=2 baz=3
#+end_src

*** =org-agenda-custom-commands= has a default value ([[git:b3de2dbb953dcadacafeb179899ab9df184da4ff][git]])

This option used to be `nil' by default.  This now has a default
value, displaying an agenda and all TODOs.  See the docstring for
details.  Thanks to Carsten for this.

*** =outline-demote/promote= points to =org-demote/promote-subtree=

Users who use this outline commands in =outline-mode= will want
them to behave the Org way in Org.  Thanks to Michael Brand for
the suggestion.

*** New escape characters for =org-log-note-headings= ([[git:a5d4783a7eacf6bf67317408e7c4feaea71b746e][git]])

The option =org-log-note-headings= now supports %d and %D for
inactive and active timestamps.  This affect the behavior of the
command =org-store-log-note=.  Thanks to John J Foerch for a
patch for this.

*** New command =org-table-transpose-table-at-point= ([[git:b67b6b7844f619f40a79dff69e700f24ac8d6ac9][git]])

See the docstring.  This hack from Juan Pechiar is now part of
Org's core.  Thanks to Juan!

*** Allow recursive edit of minibuffer ([[git:5091facd7f4ec80cce86049d6d84a164cb017970][git]])

You can now use the command =C-c != (=org-time-stamp-inactive=)
when prompted e.g. for a link name.  This is because the central
function =org-completing-read= now support recursive edit.  Only
=C-c != is available at the moment, but if you can think of a
useful command to use, please let me know.

Thanks to Skip Collins for the idea and to Nick Dokos for the
implementation.

*** Allow dynamic construction of the publishing destination ([[git:af0789a5a8951a87f050abb79313012f261bf4f0][git]])

Thanks to Kai Tetzlaff for adding this.

*** Set the capture default time to the prompt time ([[git:acfd6ff3][git]])

In the file+datetree+promt target type, the user is being asked
for a date, where to file an entry.  In the template, he can use
the escape placeholders for active and inactive time stamps.  So
far, these were filled with todays date.  This behavior changed
so that, also at %t and %u, the date to use is the one entered at
the prompt.
    
Reported by Erik Hetzner and fixed by Carsten.

*** =org-agenda-skip-additional-timestamps-same-entry= defaults to `nil' ([[git:aefd49b9098950a6bf8ebf95160d9b5ae94f2ec0][git]])
*** org-sudoku.el -- small sudoku solver

Carsten wrote org-sudoku.el, a little sudoku solver, which lives
in the contrib/ directory.

From [[https://list.orgmode.org/3692D35F-2C42-43E5-AB4C-731A1887BA12@gmail.com][his message]]: "my daughter got stuck with a couple of SUDOKU
puzzles during the vacation (where wh had no internet
connection), so I hacked a small SUDOKU solver that reads a 9x9
Org table and solves it as a sudoku puzzle.  A little silly, but
maybe fun for someone - I have pushed it into the contrib/lisp
directory."
** Code Block related features and improvements
*** Added [[http://cran.r-project.org/web/packages/tikzDevice/index.html][tikzDevice]] support to ob-R.el
*** Support for Pico Lisp code blocks

Thanks to Thorsten Jolitz Pico Lisp code blocks are now
supported.  See =ob-picolisp.el= for more information.

*** Extension to the =eval= code block header argument

The =eval= code block header argument now accepts four (six)
possible values the meaning of which is shown in the table below.

| never or no               | The code block will not be evaluated under any     |
|                           | circumstances.                                     |
| query                     | Evaluation of the code block will require a query. |
| never-export or no-export | The code block will not be evaluated during export |
|                           | but may still be called                            |
| query-export              | Evaluation of the code block during export will    |
|                           | require a query.                                   |

*** Update of intermediate results during code block evaluation

When set to t, the new =org-babel-update-intermediate= variable
will update in-buffer results for code blocks which are evaluated
in the resolution of a variable reference.  This can be used to
ensure that the latest returned results are always shown in
buffer.

*** Support for Fortran code block is now in the core

Thanks to Sergey Litvinov for contributing this support.

*** The =sbe= function allows header argument specification

If first variable is a string and not a cons cell, then interpret
it as a string of header arguments to be passed to the code
block.

*** Support for Shen code blocks

See http://www.shenlanguage.org/ for information on Shen.

A major mode for shen code blocks is available through the GNU
ELPA.

** New options and faces

*** New option =org-export-html-headline-anchor-format= ([[git:b7f5efdc4e1ed07f295d28a05fab3588c4194110][git]])

Format for anchors in HTML headlines.

It requires to %s: both will be replaced by the anchor referring
to the headline (e.g. "sec-2").  When set to `nil', don't insert
HTML anchors in headlines.

This was requested by Alan L Tyree.

*** New option =org-table-formula-field-format= ([[git:7a513b2c00e83f81c8bf1d3abe482d00a2946abc][git]])

Format for fields which contain the result of a formula.
For example, using \"~%s~\" will display the result within tilde
characters.  Beware that modifying the display can prevent the
field from being used in another formula.

Thanks to Dov Grobgeld for this idea.

*** New option =org-loop-over-headlines-in-active-region= ([[git:e67a28e9][git]])

When set to `t', some commands will loop over the active
region.  Currently, =org-schedule= and =org-deadline= uses this
option: pressing =C-c C-s= or =C-c C-d= when the region is active
will let you schedule/deadline all the visible headlines in the
region.

Thanks a lot to David Maus for implementing this.

*** New option =org-catch-invisible-edits= ([[git:31d9fd44][git]])

This option makes it possible to check what is the right thing to do before
editing invisible regions.  Here are the possible values of this option:

: +nil              Do not check, so just do invisible edits.
: +error            Throw an error and do nothing.
: +show             Make point visible, and do the requested edit.
: +show-and-error   Make point visible, then throw an error and abort the edit.
: +smart            Make point visible, and do insertion/deletion if it is
:                   adjacent to visible text and the change feels predictable.

See the docstring for more details.

Thanks to Carsten for implementing this.

*** New option =org-export-latex-table-caption-above=

Let the user place a caption above its table in LaTeX.
Thanks to Thomas Dye for a patch to this effect.

*** New option =org-agenda-follow-indirect= ([[git:e53f62eba9569b78540481bda4b5e7a6b4016983][git]])

By setting `org-agenda-follow-indirect' to a non-nil value,
`org-agenda-follow-mode' will use an indirect buffer to display
only the current item, rather than the whole agenda file in which
it lives.  

Thanks to Dave Abrahams for implementing this.

*** New option =org-refile-active-region-within-subtree= ([[git:c25165c25dc9fdb5b57b3c66b2e0ec0efdbeb7ad][git]])

Non-nil means also refile active region within a subtree.

By default =org-refile= doesn't allow refiling regions if they
don't contain a set of subtrees, but it might be convenient to do
so sometimes: in that case, the first line of the region is
converted to a headline before refiling.

Thanks to Jeff Horn for raising the issue of refiling a list
item, and to Nicolas Goaziou, Nick Dokos and Suvayu Ali for
discussing them patiently.  

*** New option =org-latex-to-mathml-convert-command= 

This option lets you specify a way to convert LaTeX fragments to
MathML.  See also =org-latex-to-mathml-jar-file= and the
docstring of =org-create-math-formula=.

Thanks to Jambunathan K for implementing this.

*** New option =org-properties-postprocess-alist= ([[git:eb4b0358155c91bdb7071ad455f011d2fe629b97][git]])

See its docstring:

: Alist of properties and functions to adjust inserted values.
: Elements of this alist must be of the form
: 
:   ([string] [function])
: 
: where [string] must be a property name and [function] must be a
: lambda expression: this lambda expression must take one argument,
: the value to adjust, and return the new value as a string.
: 
: For example, this element will allow the property "Remaining"
: to be updated wrt the relation between the "Effort" property
: and the clock summary:
: 
:  (("Remaining" 
:      (lambda(value)
:        (let ((clocksum (org-clock-sum-current-item))
:              (effort (org-duration-string-to-minutes
:                      (org-entry-get (point) "Effort"))))
:          (org-minutes-to-hh:mm-string (- effort clocksum))))))

This is inspired by a request from Pascal Mattia.

*** New options =org-habit-today-glyph= and =org-habit-completed-glyph= ([[git:0c099370691469d8078121ba2b0567bd19a628c3][git]])

This gives you control over the character used for displaying
today (default is `!') and days on which a task has been
completed (default is `*').  Thanks to John Wiegley for this.

*** New option =org-bibtex-type-property-name= ([[git:4fbefd87aa6ce30e6d6bc7c115c9b59042ed02f0][git]])

Configurable property name for bibtex entry types.  Thanks to
Eric Schulte for this.

*** New face =org-agenda-filter-tags= ([[git:63969951][git]])

This face is used for highlighting the tag(s) filter in the
modeline.  Thanks to Sébastien Vauban for this idea and its
implementation.

*** New faces =org-agenda-calendar-event= and =org-agenda-calendar-sexp= ([[git:bfe779fe677e8a23dbf712dd42160a35af1285fa][git]])

=org-agenda-calendar-event= is the face used to show events and
appointments in the agenda, and =org-agenda-calendar-sexp= the
one used to show events computed from a S-expression.  

Thanks to Sébastien Vauban for this addition.

** Important bugfixes

*** Respect =org-export-with-tags= when exporting a subtree ([[git:a0815816][git]])

Thanks to Suvayu Ali for spotting this problem and fixing it.

*** Fix XEmacs compatibility issue when creating an indirect buffer ([[git:d493a0ec][git]])

Thanks to Michael Sperber for this fix.

** Testing

*** New test function =org-test-with-temp-text-in-file= ([[git:1f206ed4]])

* Version 7.7

** COMMENT Incompatible changes
** New features and user-visible improvements

*** New command =org-copy-visible= (=C-c C-x v=)

This command will copy the visible text in the region into the
kill ring.

Thanks to Florian Beck for this function and to Carsten for
adding it to org.el and documenting it!

*** New hook =org-ctrl-c-ctrl-c-final-hook=

This hook will be called when nothing special can be performed by
the busy =C-c C-c= key.  Thanks to Paul Sexton for this idea!

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=eaafa42948427da37c065c8294edd0d0f30cccd4][(git commit)]]

*** Allow relative time when scheduling/adding a deadline

You can now use relative duration strings like "-2d" or "++3w"
when calling =org-schedule= or =org-deadline=: it will schedule
(or set the deadline for) the item respectively two days before
today and three weeks after the current timestamp, if any.

You can use this programmatically: =(org-schedule nil "+2d")=
will work on the current entry.

You can also use this while (bulk-)rescheduling and
(bulk-)resetting the deadline of (several) items from the agenda.

Thanks to Memnon Anon for a heads up about this!

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=88eada52a63539b8866b9be861ea72ffbcafb37e][(git commit)]]

*** New functions: =org-todo-yesterday= and =org-agenda-todo-yesterday=

This is useful when you need to mark things done yesterday.

Thanks to Max Mikhanosha for this patch.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=dea1a6f87b1fcd0122796a6603948bf131d4ff69][(git commit)]]

*** =org-set-property= defaults to the last interactively modified property

When setting a property with =C-c C-x p=, it will offered the
last interactively modified property as a default choice.  If
this command is called on a property line, the property in this
line will take precedence over the last set property.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=9a2bf023467ad97fd171422c06541651c24b6014][(git commit)]]

*** Clock: Allow synchronous update of timestamps in CLOCK log

Using =S-M-<up/down>= on CLOCK log timestamps will
increase/decrease the two timestamps on this line so that
duration will keep the same.  Note that duration can still be
slightly modified in case a timestamp needs some rounding.

Thanks to Rainer Stengele for this idea.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=db731a971546aef8a1003df8f73462fc6dfd6a5a][(git commit)]]

*** Clock: New function =org-clock-remove-empty-clock-drawer=

This function removes empty =CLOCK= drawers and has been added to
=org-clock-out-hook=: when clocking out, if no CLOCK log has been
inserted and the drawer is empty, the drawer will be removed.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=65b64bea53e73ea73a4b791a1057b074db144b23][(git commit)]]

*** Capture: new escape sequence =%F= for templates

Using =%F= in capture templates will insert the full path of the
file or the directory the capture mechanism was called from
(whereas =%f= only insert the filename.)

Thanks to Nicolas Goaziou for this change.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=819fbec64160c3c33884b116734c01f56be7606b][(git commit)]]

*** Agenda: new variable =org-agenda-bulk-custom-functions= for custom bulk functions

When using =org-agenda-bulk-action= in agenda view, the user
could already call custom functions by pressing =f= and entering
the function's name.

This variable lets the user add custom choices and reach them
more quickly.  Set the variable to an alist of keys (chars) and
functions, and these keys will be accessible through the
=org-agenda-bulk-action= interface.

If there is a conflict between custom keys and hardcoded choices,
the latter ones take precedence.

Thanks to Julien Cubizolles for triggering this idea.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=1029a9251741c2cdf10281866a2fbbdaf2e1cb25][(git commit)]]

*** Refile: exclude irrelevant headings

When refiling from an org-mode buffer, the current heading and
its subheadings will be excluded from the list of possible
targets.

This only works when =org-refile-use-cache= is =nil= and in
org-mode buffers, not in agenda buffers.

Thanks to Jason Dunsmore for this idea!

*** Lists: new variable =org-list-use-circular-motion=

This variable allows some commands to consider lists as cyclic
structures.  For example, when non-nil, moving past the last item
of a list with S-down will bring you back to the first one.

*** Lists: New variable =org-list-indent-offset=

This variable helps improving readability of sub-items by
increasing their indentation.  E.g., if =org-list-indent-offset=
is set to 2, you may see the following list:

#+begin_example
- First item
	  - Sub-item 1
	  - Sub-item 2
- Second item
#+end_example

*** Table: New flag ";t" to tailor the display of computed durations

See the new variable =org-table-duration-custom-format= and the
updated example from the manual:

|  Task 1 |   Task 2 | Total |
|---------+----------+-------|
| 3:02:20 | -2:07:00 |  0.92 |
#+TBLFM: @2$3=$1+$2;t

In this example, =0.92= is a fraction of hour, the default for
=org-table-duration-custom-format=.

Thanks to Daniel E. Doherty for discussions about this.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=70fab165e1966b32e08ed05776ca19e711d1d1e9][(git commit)]]

*** Table: display field's coordinates when editing it with =C-c `=

When editing a field with =C-c `=, the field's coordinate will
the displayed in the buffer.

Thanks to Michael Brand for a patch to this effect.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=e7eb56f39b5b843bc1487bb49c58e99e51c81fc1][(git commit)]]

*** Babel: support for =java= code blocks

Evaluation of blocks of Java code is now possible.  Currently
only external evaluation of Java code is supported (i.e., no
session evaluation) and only the =:results output= results are
collected.  Code blocks are compiled to a Java class file which
are then evaluated and the values printed to STDOUT are returned.

Java code blocks required a =:classname= header argument which is
used by the compiler to name =.java= and =.class= files.

Example Java code block:
#+begin_src org
  ,#+begin_src java :classname myfirstjavaprog
  ,  class myfirstjavaprog
  ,  {
  ,      public static void main(String args[])
  ,      {
  ,          System.out.println("Hello World!");
  ,      }
  ,  }
  ,#+end_src
  
  ,#+results:
  ,: Hello World!
#+end_src

*** Babel: support for =fortran= code blocks by Sergey Litvinov

The =contrib/babel/langs/= contains the new library
=ob-fortran.el= by Sergey Litvinov.

Thanks to him for this addition.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=2249abb8ad4bb266c5eb808fce1f7e6be9173628][(git commit)]]

*** Babel: support for the [[http://fomus.sourceforge.net/][fomus]] language by Torsten Anders

=ob-fomus.el= has been added to =contrib/babel/langs/=.

Thanks to Torsten Anders for contributing this functionality.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=baa83dacc732c51e15a593b02218bc5f9ef7fb2e][(git commit)]]

*** Publish: hide .orgx files and use theindex.org directly

When :makeindex is `non-nil' in the publishing options, Org will
export an index.  It populates the directory with .orgx files:
those files are now hidden (.file.orgx).  Also the index is
directly stored in the file =theindex.org=, not in the file
=theindex.inc= (which you can delete).

Thanks to Nathan Neff and Carsten for pointing at the problems
and solutions.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=f0d7acfb7867518529d63fe3d111f5f3cf39a61f][(git commit)]]

*** Export: new variable =org-export-html-divs= to allow custom divs

The default value of =org-export-html-divs= is =("preamble"
"content" "postamble")= and is used to define the =<div "%s">=
for the main structure of the exported HTML file.

Note that modifying the default value will break compatibility
with the =org-info.js= script.

Also note that the variable =org-export-html-content-div= will
still be checked for compatibility reasons but is not a custom
variable anymore.

Thanks to Sébastian Vauban for a preliminary version of this
patch.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=2f1fbc58be1dc48621217d666da7bc46c3c5d84e][(git commit)]]

*** Export: new variable =org-export-latex-quotes= to customize quotes in LaTeX export

This allows users to define what quotes they want to use as a
replacement of english double-quotes while exporting to LaTeX.

In particular, if you use the csquote package, you can configure
Org to output something like \endquote{some quoted text} instead
of "some quoted text".

Thanks to Frederik for bringing this issue up, and to Thomas S.
Dye, Nick Dokos and Stefan Nobis for elaborating this solution.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=2b9afb9e63d2fd60a3bb09e33c9d4abb01586339][(git commit)]]

** Important bugfixes

*** Duration computations now work for complex ranges in tables

Thanks to Christian Moe for signaling this problem.

*** Handle recursive setup files correctly

Thanks to Stefan Vollmar for mentioning this problem.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=bbb2ef510ae8fbf28296c8968b99a24408c7c3ce][(git commit)]]

** Details

*** =org-map-entries= can now have 'region as its scope

Thanks to David Maus for suggesting related improvements to
=org-map-entries=.  This one prepares the possibility of letting
some commands to loop over the active region.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=59e7fc4d3a4ee441d4716ca37fd41a2fa64e04d5][(git commit)]]

*** org-depend.el: new chain-find-next trigger option

See the updated docstring of this file.

Thanks a lot to Max Mikhanosha for this!

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=b1279dde0fec5e043b294117d9b999eb99be9a0f][(git commit)]]

*** Export: new experimental exporter to MoinMoin by Puneeth Chaganti.

The =EXPERIMENTAL/= directory contains a new file org-mm.el that
allows you to export an Org file to a MoinMoin file.

Thanks to Puneeth Chaganti for this addition.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=a90b876b936820f6a80cc2ffa807bc29a9de73eb][(git commit)]]

*** Export: new default for =org-export-html-preamble=

The default value included the title.  It now defaults to the
empty string, as the title is hardcoded and included in the
"content" div.  Including the title here is necessary to let
=org-info.js= find it and display the page properly.

*** Export: new variable =org-lparse-use-flashy-warning= defaulting to =nil=

Flashy and verbose warnings while exporting to ODT have been
disabled.  Set this to =t= if you want it back.

*** Export: new default value for =org-export-latex-image-default-option=

This used to be =width=10em= and this is now width=.9\linewidth,
which makes more sense.

Thanks to Sebastien Vauban for this suggestion.

[[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/commit/?id=46a5bde601980c47eccd06d87b82dbae85b20704][(git commit)]]

*** Export: allow =org-export-latex-href-format= to have only one "%s"

This is useful when you want to use \url{link} instead of the
default \href{link}{path}.

Thanks to Henri-Paul Indiogine for bringing this up.

** Known issues

*** The ODT exporter will choke when using some Org-defined strings

For example, using the hungarian version of the table of
contents, as defined in =org-export-language-setup=, the ODT
exporter will complain about a problem with the translated
string.

The workaround is to customize =org-export-language-setup= 
and to use accents directly.

* Version 7.6

** Incompatible changes
** New features and user-visible improvements

*** Integration of Jambunathan's OpenDocumentText Exporter

**** Activation

Org mode 7.6 supports exporting to OpenDocument Text (=odt=)
format using org-odt.el.  Depending on how you installed Org,
this module can be enabled in one of the following ways:

1. If you have downloaded the Org from the Web, either as a
   distribution =.zip= or =.tar.gz= file, or as a Git archive,
   enable the =odt= option in the variable =org-modules=.

2. If you are using Org mode 7.6 that comes bundled with
   Emacs-24.0.50 (or future Emacs-24.1), then you can install the
   OpenDocumentText exporter using the package manager.  Check
   the list of available packages with =M-x list-packages= and
   install the =org-odt= package.

Thanks a lot to Jambunathan K for this great contribution.

**** Keybindings

The following interactive commands are provided:

1. =C-c C-e o= (=org-export-as-odt=): Export as an =odt= file.

2. =C-c C-e O= (=org-export-as-odt-and-open=): Export as an =odt=
   file and open the resulting file.

See the =contrib/odt/README.org= file for further details; you
may check in particular the commands =M-x org-lparse= and =M-x
org-export-convert=.

*** Ob-Lilypond -- new Babel language to allow score generation

ob-lilypond - an org-babel language, provided to allow LilyPond
music score generation, complete with optional auditioning via
midi, whilst leveraging the full power of org mode, and literate
programming.  See https://github.com/mjago/ob-lilypond for more
documentation.

Thanks to Martyn Jago for this addition.

*** Org-Bibtex -- major improvements

Provides support for managing bibtex bibliographical references
data in headline properties.  Each headline corresponds to a
single reference and the relevant bibliographic meta-data is
stored in headline properties, leaving the body of the headline
free to hold notes and comments.  Org-bibtex is aware of all
standard bibtex reference types and fields.

The key new functions are

- org-bibtex-check :: queries the user to flesh out all required
     (and with prefix argument optional) bibtex fields available
     for the specific reference =type= of the current headline.

- org-bibtex-create :: Create a new entry at the given level,
     using org-bibtex-check to flesh out the relevant fields.

- org-bibtex-yank :: Yank a bibtex entry on the kill ring as a
     formatted Org mode headline into the current buffer

- org-bibtex-export-to-kill-ring :: Export the current headline
     to the kill ring as a formatted bibtex entry.

*** Spreadsheet computation of durations and time values

If you want to compute time values use the =T= flag, either in
Calc formulas or Elisp formulas:

| Task 1 | Task 2 |   Total |
|--------+--------+---------|
|  35:00 |  35:00 | 1:10:00 |
#+TBLFM: @2$3=$1+$2;T

Values must be of the form =[HH:]MM:SS=, where hours are
optional.

Thanks to Martin Halder, Eric Schulte and Carsten for code and
feedback on this.

*** Links within inlined footnotes.

It as also possible to have footnotes side-by-side correctly
exported. New variables =org-export-latex-footnote-separator=,
=org-export-html-footnote-separator= and
=org-export-docbook-footnote-separator= are used to separate them
in that case.

Fontification of footnotes is also more accurate.

*** New variable =org-export-with-tasks=

Non-nil means include TODO items for export.

This may have the following values:

- t                    include tasks independent of state.
- todo                 include only tasks that are not yet done.
- done                 include only tasks that are already done.
- nil                  remove all tasks before export
- list of TODO kwds    keep only tasks with these keywords

Thanks to Carsten for implementing this!

*** New variable =org-export-latex-timestamp-inactive-markup=

This variable allows the user to define the LaTeX markup for
inactive timestamps.  It defaults to the same markup than active
timestamps.  Thanks to Eric S Fraga for this patch.

*** New =org-default= face

=M-x customize-face RET org-default RET= will let you define the
default face for =org-mode= buffers.

*** Babel improvements
**** In line code block call syntax
It is now possible to call code blocks from within blocks of
prose.

The new syntax is exactly analogous to the existing =#+call:=
line syntax, only it may be present embedded in a block of prose
for example =call_double(num=8)= would call the =double= code
block assigning the =num= variable to the value =8=.

**** Optional variable names in code block calls
Variable names are now optional when passing variables to a code
block reference.  Un-named variables will be assigned in order as
shown below.

: #+source: minus
: #+begin_src emacs-lisp :var a=0 :var b=0
:   (- a b)
: #+end_src
:
: #+call: minus(a=8, b=4)
:
: #+call: minus(8,4)

**** Sub-tree ID as valid code block variable reference
It is now possible to assign the textual contents of an Org mode
subtree to a code block variable using the ID of the subtree.
Both custom IDs and Org mode IDs may be used.  For example;

#+begin_src org
  ,#+begin_src sh :var text=foo
  ,  echo "$text"|wc
  ,#+end_src

  ,#+results:
  ,: 8      58     415

  ,* example foo
  ,  :PROPERTIES:
  ,  :CUSTOM_ID: foo
  ,  :END:

  ,Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec
  ,hendrerit tempor tellus. Donec pretium posuere tellus. Proin quam
  ,nisl, tincidunt et, mattis eget, convallis nec, purus. Cum sociis
  ,natoque penatibus et magnis dis parturient montes, nascetur ridiculus
  ,mus. Nulla posuere. Donec vitae dolor. Nullam tristique diam non
  ,turpis. Cras placerat accumsan nulla. Nullam rutrum. Nam vestibulum
  ,accumsan nisl.
#+end_src

**** =org-babel-tangle-body-hook= for reprocessing code block bodies during tangling
**** =padline= header argument controls newline padding during tangling
**** Maxima code blocks are now supported

Thanks to Eric Fraga for contributing this support.

**** =awk= code blocks are now supported
**** Added =xmpfilter= to Ruby code blocks for annotated code output
**** New =noweb-ref= header argument

This header argument may be used to concatenate the bodies of
many code blocks into a single noweb reference.  This brings
Org mode's tangling functionality in line with traditional noweb
tangling.

A no web reference like the following

#+begin_src org
  ,#+begin_src sh
  ,  <<the-ref>>
  ,#+end_src
#+end_src

will now expand to include the bodies of all code blocks which
are named =the-ref=, as well as all code blocks which have a
=:noweb-ref= header argument set to the value =the-ref=.

*** New tests

The =tests/= directory has been extensively updated.

** Important bugfixes

*** Org-exp-blocks --- proper handling of recursively nested blocks

During export pre-processing org-exp-blocks will now ensure that
all matched blocks contain a proper balanced number of
recursively nested blocks.

Before this fix nested blocks such as the following would break
during export.

#+begin_src org
  ,#+begin_src org
  ,  ,#+begin_example
  ,  ,  nested example
  ,  ,#+end_example
  ,#+end_src
#+end_src

*** List handling

Fix an infinite loop when a list has an end of block string
without the corresponding beginning.

Auto-filling cannot happen at a location where it would otherwise
insert a new item.

** Details

*** Footnotes have gone through some bug-fixing:

- properly ignore footnotes in comments,
- export calls to previously defined footnotes in LaTeX using
  \footnotemark,
- export footnotes before first heading (LaTeX),
- export footnotes when selecting a subtree not holding their
  definition (LaTeX).

*** Many small bug fixes have been applied to list handling

- fix `org-timer-item',
- fix insertion of a new item with a non-nil `indent-tabs-mode',
- fix use of `fill-region' in an item,
- correct export lists within footnotes and footnotes within lists,
- correctly export lists containing macros,
- don't ignore with-case specification when sorting a list,
- better indentation handling when changing an item to an headline
  or the other way,
- fix check-boxes' cookies updating.

* Version 7.5

** Incompatible changes

*** Code block variable initialized with Emacs Lisp code in tables and lists

It is no longer possible to assign code block variables using
executable Emacs Lisp statements contained in tables or lists.
As per the following example.
#+tblname: table
| (a b c) |

#+begin_src perl :var data=table[0,0]
  $data
#+end_src

#+results:
: (a b c)

Thanks to Vladimir Alexiev for raising this issue.

*** `org-bbdb-anniversary-format-alist' has changed

Please check the docstring and update your settings accordingly.
** New features and user-visible improvements

*** Implement formulas applying to field ranges

Carsten implemented this field-ranges formulas.

: A frequently requested feature for tables has been to be able to define
: row formulas in a way similar to column formulas.  The patch below allows
: things like
:
: @3=
: @2$2..@5$7=
: @I$2..@II$4=
:
: as the left hand side for table formulas in order to write a formula that
: is valid for an entire column or for a rectangular section in a
: table.

Thanks a lot to Carsten for this.

*** Improved handling of lists

Nicolas Goaziou extended and improved the way Org handles lists.

1. Indentation of text determines again end of items in
   lists. So, some text less indented than the previous item
   doesn't close the whole list anymore, only all items more
   indented than it.

2. Alphabetical bullets are implemented, through the use of the
   variable `org-alphabetical-lists'. This also adds alphabetical
   counters like [@c] or [@W].

3. Lists can now safely contain drawers, inline tasks, or various
   blocks, themselves containing lists. Two variables are
   controlling this: `org-list-forbidden-blocks', and
   `org-list-export-context'.

4. Improve `newline-and-indent' (C-j): used in an item, it will
   keep text from moving at column 0. This allows to split text
   and make paragraphs and still not break the list.

5. Improve `org-toggle-item' (C-c -): used on a region with
   standard text, it will change the region into one item. With a
   prefix argument, it will fallback to the previous behavior and
   make every line in region an item. It permits to easily
   integrate paragraphs inside a list.

6. `fill-paragraph' (M-q) now understands lists. It can freely be
   used inside items, or on text just after a list, even with no
   blank line around, without breaking list structure.

Thanks a lot to Nicolas for all this!

*** Modified link escaping

David Maus worked on `org-link-escape'.  See [[https://list.orgmode.org/87k4gysacq.wl%dmaus@ictsoc.de][his message]]:

: Percent escaping is used in Org mode to escape certain characters
: in links that would either break the parser (e.g. square brackets
: in link target oder description) or are not allowed to appear in
: a particular link type (e.g. non-ascii characters in a http:
: link).
:
: With this change in place Org will apply percent escaping and
: unescaping more consistently especially for non-ascii characters.
: Additionally some of the outstanding bugs or glitches concerning
: percent escaped links are solved.

Thanks a lot to David for this work.

*** Simplification of org-export-html-preamble/postamble

When set to `t', export the preamble/postamble as usual, honoring
the =org-export-email/author/creator-info= variables.

When set to a formatting string, insert this string.  See the
docstring of these variable for details about available
%-sequences.

You can set =:html-preamble= in publishing project in the same
way: `t' means to honor =:email/creator/author-info=, and a
formatting string will insert a string.

*** New command `org-agenda-append-agenda'

You can now use `org-agenda-append-agenda' to dynamically add new
agendas views to the current one.  It is particularily useful to
compare multiple small agendas.

*** Localized clock tables

Clock tables now support a new new =:lang= parameter, allowing
the user to customize the localization of the table headers.  See
the variable =org-clock-clocktable-language-setup= which controls
available translated strings.

*** New sorting options when publishing projects

The =:sitemap-sort-file= option now allows sorting the sitemap
file (anti-)alphabetically and (anti-)chronogically.  Thanks a
lot to Manuel Giraud for a patch to this effet.

*** Testing with ERT

Martyn Jago added new tests to =testing/= - thanks to him!
*** New file in contrib/: org-notmuch.el

Org is now distributed with =org-notmuch.el=, by Matthieu
Lemerre.  See explanations in the header of =org-notmuch.el=:

: =org-notmuch.el= implements links to notmuch messages and
: "searchs". A search is a query to be performed by notmuch; it is
: the equivalent to folders in other mail clients. Similarly, mails
: are refered to by a query, so both a link can refer to several
: mails.

*** org-gnus.el now allows link creation from messages

You can now create links from messages.  This is particularily
useful when the user wants to stored messages that he sends, for
later check.  Thanks to Ulf Stegemann for the patch.

** Important bug fixes

*** Capturing to narrowed buffers

You can now safely capture entries to narrowed buffers.  Thanks a
lot to Memnon Anon for bringing this up.

*** Better handling of the new `org-agenda-span' variable

Agendas were a bit confused by the introduction of this variable,
in particular block agendas.  This is now fixed.

Thanks to Julien and Carsten for helping find the right fix for
this issue, and to Michael Brand and Matt Lundin for their
patient testing and reporting.

*** Security warning: using org-crypt with auto-save

To prevent Emacs from auto-saving encrypted entries in clear
text, the user should not use auto-save with org-crypt.el.  We
now send a warning when users are both using auto-saving and
org-crypt.el.  Thanks to Peter Jones for bringing this up.

** Details

*** Babel
**** :file argument causes results to be written to file for all languages
:file <filename> should be understood as saying "write the result
to <filename> and return a link to <filename>".

This works for all languages. For graphics languages (e.g. ditaa, dot,
gnuplot) there is no change in behavior: "result" in the above is the
graphics, and a link to the image is placed in the org buffer. For
general-purpose languages (e.g. emacs-lisp, python, R, ruby, shell),
the "result" written to file is the normal org-babel result (string,
number, table).

In order to return a file link from a src block without telling babel
to save any results to that file, use :results <filename> and do not
use :file. The code block can of course write arbitrary content to
<filename>.

Some examples:

Save the output of ls -l as a .csv file (recall that :results value is
the default):

#+begin_src sh :file dirlisting.csv :sep ,
 ls -l
#+end_src

Send the text output of ls -l directly to file:

#+begin_src sh :results output :file dirlisting.txt
 ls -l
#+end_src

**** R requires :results graphics :file filename when generating graphics
":results graphics" is now required in addition to ":file
filename" in order for graphical output to be sent automatically
to file. If :file is supplied, but not ":results graphics", then
non-graphical, "value" or "output" results are written to file,
depending on which of those options is in effect.
**** Calc code blocks can now accept vectors
For example;

#+begin_src calc :var y=[1 2 3]
  3 y
#+end_src

#+results:
: [3, 6, 9]

Thanks to Eric S. Fraga for raising this issue

**** Code blocks with empty bodies are now acceptable

Previously these caused errors on export.  Thanks to Martyn Jago
for this patch.

**** Emacs Lisp variable assignments which don't eval cleanly passed literally

This makes it possible to easily pass through non-elisp variable
assignments which may initially look like valid elisp.

**** Unified naming of =c++= functions to =C++=
Thanks to Martyn Jago for this patch.

**** `org-babel-execute-buffer' and `org-babel-execute-subtree' now eval inline code blocks as well

**** New :mkdirp header argument creates parent dirs of tangle targets

**** New ":comments noweb" option for wrapping noweb references in comment links

This can be useful to allow backward linking from tangle code
files to the original code block holding noweb-expanded content.

**** Allow detangling of text containing '\'s -- Thanks to Seth Burleigh

**** =:sep= specifies table separator when opening or writing tabular results

**** `org-edit-src-content-indentation' can now be a buffer-local variable
*** All export configuration variables can now be buffer-local variables
*** org-complete.el has been renamed to org-pcomplete.el

In case you were manually loading =org-complete.el= (which is
*not* necessary anyway), please be aware that the name of this
library was changed to =org-pcomplete.el=.

*** New user options for LaTeX source code export via minted and listings packages

New variables `org-export-latex-listings-options' and
`org-export-latex-minted-options' allow package options to be
controlled; `org-export-latex-custom-lang-environments' allows
arbitrary configuration on a per-language basis.

*** Effort durations now support 2d, 2m, etc.

Effort duration can now be set as 2h (for 2 hours), etc.  This
will be converted to minutes automatically when clocking in an
entry with an effort property.   See the =org-effort-durations=
variable.

Thanks a lot to Lawrence Mitchell for this patch.

*** New option :clock-keep for capture templates

A capture template with =:clock-keep t= will prevent the refiling
process from clocking out the entry.  If =:clock-resume= is also
`t', =:clock-keep= will take precedence and =:clock-resume= will
be ignored.

So now =:immediate-finish t :clock-in t :clock-keep t= makes
sense: it will capture a new task and clock it.

*** Misc

**** New command `org-agenda-bulk-mark-regexp'

=M-x org-agenda-bulk-mark-regexp RET= will mark agenda entries
which headings match against a regular expression.  You can call
this command with the `%' key from an agenda buffer.

**** New command `org-agenda-reset-view'

Julien Danjou implemented this:

: This new command lets you switch to day/week/month/year view.
:
: When switching to day or week view, this setting becomes the default for
: subsequent agenda refreshes.  Since month and year views are slow to
: create, they do not become the default.  A numeric prefix argument may be
: used to jump directly to a specific day of the year, ISO week, month, or
: year, respectively.  For example, `32 d' jumps to February 1st, `9 w' to
: ISO week number 9.  When setting day, week, or month view, a year may be
: encoded in the prefix argument as well.  For example, `200712 w' will jump
: to week 12 in 2007.  If such a year specification has only one or two
: digits, it will be mapped to the interval 1938-2037. `v SPC'' will reset to
: what is set in `org-agenda-span'.

Thanks a lot to Julien for this.

**** New options for ignoring past or future items in the global todo list

This patch gives users greater control over which past or future items
they would like to ignore in the global todo list. By setting
org-agenda-todo-ignore-scheduled to 7, for instance, a user can ignore all
items scheduled 7 or more days in the future. Similarly, by setting
org-agenda-todo-ignore-scheduled to -1, a user can ignore all items that
are truly in the past (unlike the 'past setting, which ignores items
scheduled today).

See the docstrings of these variables:

- org-agenda-todo-ignore-deadlines
- org-agenda-todo-ignore-scheduled
- org-agenda-todo-ignore-timestamp

Thanks a lot to Matt Lundin for implementing this and to Paul
Sexton for the idea.

**** New variable `org-export-table-remove-empty-lines'

When set to `nil', don't remove empty tables when exporting
tables.  This was requested by Eric S Fraga.

**** New variable `org-table-fix-formulas-confirm'

Sometime, editing the structure of a table should not edit the
corresponding formulas.  This new variable lets the user decide
whether he wants to confirm formula fixes or not.

**** New variable `org-export-initial-scope'

This variable controls the initial scope when exporting with `org-export'.
It can be set to 'buffer or 'subtree.  If there is an active region, tell
it when prompting the user for an export command.

**** Show and use the default refile location

M-x org-refile RET now shows the default refile location.  Thanks to
Tassilo Horn for a patch to this effect.

**** New variable `org-archive-subtree-add-inherited-tags'

Non-nil means append inherited tags when archiving a subtree.

**** New variable `org-export-current-backend'

This variable is dynamically set by exporters.  You can check
against its value anytime in your code to see if you are
exporting to HTML, LaTeX, etc.  Possible values are 'html,
'latex, 'ascii, 'docbook.  Thanks to Eric Schulte and Dan Davison
for ideas and patches in this area.

**** New hook `org-clock-before-select-task-hook'

Hook called in task selection just before prompting the user.

Thanks to Benjamin Drieu for the patch.

**** = = emphasis now uses \protectedtexttt
**** Author's email now included in the LaTeX title

When `org-export-email-info' is non-nil, the LaTeX title will
also include the author's email.  Thanks to Lawrence Mitchell for
the patch.


**** Update contrib/scripts/ditaa.jar to ditaa v0.9 of 2009-11-24

**** New variable `org-mobile-files-exclude-regexp'

This variable lets you exclude files that you don't want in
org-mobile-files.

**** New variable `org-confirm-elisp-link-not-regexp'

Set this to a regexp if you want to skip the confirmation step for
Elisp/Shell code matching this regexp.

**** New variable `org-attach-store-link-p'

When set to `t', store link to the attached file, at its original location.

**** `org-table-use-standard-references' now defaults to 'from

**** Better `org-agenda-repeating-timestamp-show-all'

When this is set to a list of TODO keywords, the agenda will only show
occurrences of repeating stamps for these TODO keywords.

**** New command `org-narrow-to-block'

This command (`C-x n b') will narrow the buffer to the current block.
* Version 7.4
:PROPERTIES:
:VISIBILITY: content
:CUSTOM_ID: v7.4
:END:

** Incompatible changes

*** Agenda: rework ndays and span handling

The variable =org-agenda-ndays= is obsolete - please use
=org-agenda-span= instead.

Thanks to Julien Danjou for this.

** Details

*** Improvements with inline tasks and indentation

There is now a configurable way on how to export inline tasks.  See
the new variable =org-inlinetask-export-templates=.

Thanks to Nicolas Goaziou for coding these changes.

*** Agenda: Added a bulk "scattering" command

=B S= in the agenda buffer will cause tasks to be rescheduled a random
number of days into the future, with 7 as the default.  This is useful
if you've got a ton of tasks scheduled for today, you realize you'll
never deal with them all, and you just want them to be distributed
across the next N days.  When called with a prefix arg, rescheduling
will avoid weekend days.

Thanks to John Wiegley for this.

*** In-buffer completion is now done using John Wiegleys pcomplete.el

Thanks to John Wiegley for much of this code.

*** Sending radio tables from org buffers is now allowed

Org radio tables can no also be sent inside Org buffers.  Also,
there is a new hook which get called after a table has been sent.

Thanks to Seweryn Kokot.

*** Command names shown in manual

The reference manual now lists command names for most commands.
Thanks to Andreas Röhler who started this project.

*** Allow ap/pm times in agenda time grid

Times in the agenda can now be displayed in am/pm format.  See the new
variable =org-agenda-timegrid-use-ampm=.  Thanks to C. A. Webber for
a patch to this effect.

*** Rewriten clock table code

The entire clocktable code has been rewritten to add more options and
to make hacking time reports easier.

Thanks to Erwin Vrolijk for a patch introducing clock tables for
quarters.

*** Babel
**** Add =msosql= engine to sql code blocks
SQL code blocks can now be executed using the =myosql= engine
using the osql command (from MS SQL Server) on Windows systems.

Thanks to Sébastien Vauban for this contribution.

**** Python code blocks now accept a =preamble= header argument
This allows specification of coding declarations and library imports
which must take place in the beginning of a file of executed python
code (note this header argument is used during code block evaluation
unlike the =shebang= header argument which is used during tangling).
For example

#+begin_src org
  ,#+begin_src python :preamble # -*- coding: utf-8 -*- :return s
  ,s = "é"
  ,#+end_src
#+end_src

Thanks to Vincent Beffara for this idea.

**** Code block name is shown during evaluation query
When the user is queried about the evaluation of a named code block
the name of the code block is now displayed.

Thanks to Tom Dye for this suggestion.

**** Clojure code blocks results insertion
The results of Clojure code blocks have been improved in two ways.
1. lazy sequences are now expanded for insertion into the Org mode
   buffer
2. pretty printing of results is now possible with both "code" and
   "data" pretty print formats

Thanks to Rick Moynihan for suggesting these changes.

**** Python code blocks now accept a =:return= header argument
This alleviates the need to explicitly insert return statements into
the bode of Python code blocks.  This change both
- allows the same python code blocks to be run both in sessions and
  externally
- removes the floating =return= statements which violated python
  syntax

Thanks to Darlan Cavalcante for proposing this feature.

**** =:results wrap= header argument wraps code block results
The new =:results wrap= wraps code blocks results in a custom
environment making it possible to offset their contents during
export.  For example

#+begin_src org
  ,#+begin_src emacs-lisp :results wrap
  ,  "code block results"
  ,#+end_src

  ,#+results:
  ,#+BEGIN_RESULT
  ,: code block results
  ,#+END_RESULT
#+end_src

Thanks to Sébastien Vauban for persistently suggesting this enhancement.

**** Code block error buffer wiped clean between executions
Previously the code block error buffer accumulated errors making it
difficult to distinguish between previous and current errors.  This
buffer is now cleaned before every interactive code block evaluation.

**** Lists now recognized by code blocks
It is now possible for code blocks to both read and write list
contents from and to Org mode buffers.  For example

#+begin_src org
  ,#+results: a-list
  ,- babel
  ,- and
  ,- org-mode

  ,#+source: a-list
  ,#+begin_src emacs-lisp :var lst=a-list :results list
  ,  (reverse lst)
  ,#+end_src
#+end_src

**** Calc added as a supported code block language
The Emacs Calc package can be used through =calc= code blocks allowing
both regular arithmetic operations as well as stack based
calculation.  For example

#+begin_src org
  ,#+source: calc-stack
  ,#+begin_src calc
  ,  8
  ,  1
  ,  '+
  ,  9
  ,  '*
  ,#+end_src

  ,#+results: calc-stack
  ,: 81

  ,#+source: calc-arithmetic
  ,#+begin_src calc :var in=calc-stack
  ,  in / 9
  ,#+end_src

  ,#+results: calc-arithmetic
  ,: 9
#+end_src

**** "org-babel-detangle" propagates change to source code files into code blocks
`org-babel-detangle' can be used to propagate changes to pure source
code files tangled from embedded code blocks in Org mode files back to
the original code blocks in the Org mode file.  This can be used on
collaborative projects to keep embedded code blocks up to date with
edits made in pure source code files.

* Version 7.02

:PROPERTIES:
:CUSTOM_ID: v7.02
:END:

** Incompatible Changes
*** Code block hashes
Due to changes in the code resolving code block header arguments
hashing of code block results should now re-run a code block when
an argument to the code block has changed.  As a result of this
change *all* code blocks with cached results will be re-run after
upgrading to the latest version.

*** Testing update
Anyone using the org-mode test suite will need to update the jump
repository for test navigation by executing the following from
the root of the org-mode repository.
: git submodule update
Failure to update this repository will cause loading of
org-test.el to throw errors.
** Details
*** Org-babel speed commands
All Org-babel commands (behind the C-c C-v key prefix) are now
available as speed commands when the point is on the first line of a
code block.  This uses the existing Org mode speed key mechanisms.

Thanks to Jambunathan K for implementation this new feature.

*** Fontify code in code blocks.

Source code in code blocks can now be fontified.  Please customize the
varable =org-src-fontify-natively=. For very large blocks (several
hundreds of lines) there can be delays in editing such fontified
blocks, in which case C-c ' should be used to bring up a dedicated
edit buffer.

Thanks to Dan Davison for this.

*** Language-mode commands are available in the Org-buffer
    The most general machinery for doing this is the macro
    `org-babel-do-in-edit-buffer'. There is also the convenience
    function `org-babel-do-key-sequence-in-edit-buffer' which makes
    use of this macro, and is bound to C-c C-v C-x and C-c C-v x. If
    there is an active region contained within the code block, then
    this is inherited by the edit buffer. Some examples of the sorts
    of usage this permits are

C-c C-v C-x M-;       comment region according to language
C-c C-v C-x C-M-\     indent region according to language

Users can make these more convenient, e.g.

(defun my/org-comment-dwim (&optional arg)
    (interactive "P")
    (or (org-babel-do-key-sequence-in-edit-buffer "\M-;")
        (comment-dwim arg)))

(define-key org-mode-map "\M-;" 'my/org-comment-dwim)

A common instance of this general pattern is built in to Org mode,
controlled by the variable `org-src-tab-acts-natively': if this
variable is set, then TAB in a code block has the effect that it would
have in the language major mode buffer.

*** Org-babel commands are available in language-mode edit buffer
    Mirroring the language-native commands in Org buffers above, a new
    macro `org-src-do-at-code-block' and convenience function
    `org-src-do-key-sequence-at-code-block' provide the converse. When
    used in a language major-mode edit buffer (i.e. a buffer generated
    by C-c '), `org-src-do-key-sequence-at-code-block' executes a key
    sequence at the code block in the source Org buffer.  The command
    bound to the key sequence in the Org-babel key map is executed
    remotely with point temporarily at the start of the code block in
    the Org buffer.

    The command is not bound to a key by default, to avoid conflicts
    with language major mode bindings. To bind it to C-c @ in all
    language major modes, you could use

  (add-hook 'org-src-mode-hook
            (lambda () (define-key org-src-mode-map "\C-c@"
                    'org-src-do-key-sequence-at-code-block)))

    In that case, for example, C-c @ t issued in code edit buffers
    would tangle the current Org code block, C-c @ e would execute
    the block and C-c @ h would display the other available
    Org-babel commands.

*** Multi-line header arguments to code blocks
Code block header arguments can now span multiple lines using the
new =#+header:= or =#+headers:= lines preceding a code block or
nested in between the name and body of a named code block.
Examples are given below.

- multi-line header arguments on an un-named code block
  : #+headers: :var data1=1
  : #+begin_src emacs-lisp :var data2=2
  :   (message "data1:%S, data2:%S" data1 data2)
  : #+end_src
  :
  : #+results:
  : : data1:1, data2:2

- multi-line header arguments on a named code block
  :   #+source: named-block
  :   #+header: :var data=2
  :   #+begin_src emacs-lisp
  :     (message "data:%S" data)
  :   #+end_src
  :
  :   #+results: named-block
  :   : data:2

*** Unified handling of variable expansion for code blocks
The code used to resolve variable references in code block header
arguments has now been consolidated.  This both simplifies the
code base (especially the language-specific files), and ensures
that the arguments to a code block will not be evaluated multiple
times.  This change should not be externally visible to the
Org mode user.
*** Improved Caching
Code block caches now notice if the value of a variable argument
to the code block has changed, if this is the case the cache is
invalidated and the code block is re-run.  The following example
can provide intuition for the new behavior.
#+begin_src org :exports code
  ,#+srcname: random
  ,#+begin_src R :cache yes
  ,runif(1)
  ,#+end_src

  ,#+results[a2a72cd647ad44515fab62e144796432793d68e1]: random
  ,: 0.4659510825295

  ,#+srcname: caller
  ,#+begin_src emacs-lisp :var x=random :cache yes
  ,x
  ,#+end_src

  ,#+results[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
  ,: 0.254227238707244
#+end_src

*** Added :headers header argument for LaTeX code blocks
This makes it possible to set LaTeX options which must take place in
the document pre-amble for LaTeX code blocks.  This header argument
accepts either a single string or a list, e.g.

#+begin_src org
  ,#+begin_src latex :headers \usepackage{lmodern} :file name1.pdf
  ,  latex body
  ,#+end_src

  ,#+begin_src latex :headers '("\\usepackage{mathpazo}" "\\usepackage{fullpage}") :file name2.pdf
  ,  latex body
  ,#+end_src
#+end_src

*** New function `org-export-string'
Allows exporting directly from a string to the specified export format.
*** Code block header argument ":noweb tangle"
Only expands <<noweb>> syntax references when tangling, not during
export (weaving).
*** New function `org-babel-switch-to-session-with-code'
C-c C-v z (`org-babel-switch-to-session-with-code') is a variant of
C-c C-v C-z (`org-babel-switch-to-session'): instead of switching to
the session buffer, it splits the window between (a) the session
buffer and (b) a language major-mode edit buffer for the code block in
question. This can be convenient for using language major mode for
interacting with the session buffer.

*** Improvements to R sessions
    R now uses standard ESS code evaluation machinery in the :results
    value case, which avoids unnecessary output to the comint
    buffer. In addition, the R command responsible for writing the
    result to file is hidden from the user.  Finally, the R code edit
    buffer generated by C-c ' is automatically linked to the ESS
    session if the current code block is using :session.

*** Temporary file directory
All babel temporary files are now kept in a single sub-directory in
the /tmp directory and are cleaned up when Emacs exits.

*** Function for demarcating blocks `org-babel-demarcate-block'
Can be called to wrap the region in a block, or to split the block
around point, bound to (C-c C-v d).

*** Function for marking code block contents `org-babel-mark-block'
    Bound to C-M-h in the babel key map (i.e. C-c C-v C-M-h by
    default).  This can be useful in conjunction with
    `org-babel-do-in-edit-buffer', for example for language-native
    commenting or indenting of the whole block.
*** Lists of anniversaries are now handeled better

When several anniversaries are defined in the bbdb anniversaries
field (separated by semicolon), this is now handled nicely by the
agenda.

Thanks to Łukasz Stelmach for a patch to this effect.

*** Table fields are now aligned better, new <c> cookie.

In HTML export, table fields are now properly aligned in accord
with automatic alignment in org, or as set by the =<r>=, =<l>=, and
=<c>= cookies.  The =<c>= cookie is new and has no effect in
Org, but it does do the right thing in HTML export.  A LaTeX export
implementation will follow, but is currently still missing.

*** Update freemind converter to include body text

The freemind exporter now incorporates body text into the mind
map.

Thanks to Lennard Borgman for this patch.

*** Make footnotes work correctly in message-mode
The footnotes code now searches for =message-signature-separator=
(which is "-- " by default) in order to place footnotes before the
signature.  Thanks to Tassilo Horn for this patch.

*** Improve XEmacs compatibility

Org mode 7.02 now runs again in 21.4.22 if the new XEmacs base
package is installed.

Thanks to Uwe Bauer, Volker Ziegler, Michael Sperber and others
for a discussion that lead to this nice result.

*** Make it configurable wether agenda jumping prefers the future

When jumping to a date from the agenda using the =j= key, you may
or may not like the property of Org's date reader to prefer the
future when you enter incomplete dates.   This can now be
configured using the variable =org-agenda-jump-prefer-future'.

*** Add publishing functions for ASCII, Latin-1 and UTF-8

There are now publishing functions =org-publish-org-to-ascii=,
=org-publish-org-to-latin1=, and =org-publish-org-to-utf8=.

Thanks to Matthias Danzl for showing how to do this.

*** Indentation and headline insertion after inline tasks

Indentation in inline tasks, and headline insertion after inline
tasks now behave as expected.

*** Encryption in MobileOrg finally works

As soon as MobilOrg 1.5 hits the Apple's AppStore, you can
encrypt your org files on public servers.  Please see the
documentation of MobileOrg and Appendix B of the manual for more
details.

*** MobileOrg: Do not force to insert IDs

If you dislike the property of MobileOrg to insert ID properties
for in all entries being part of an agenda view, you can now turn
this off using the variable
=org-mobile-force-id-on-agenda-items=.  When this variable is set
to =nil=, MobileOrg will use outline paths to identify entries.
Note that this may fail if several entries have identical outline
paths.

*** LaTeX minted package for fontified source code export
Patch by Dan Davison.

A non-nil value of `org-export-latex-minted' means to export source
code using the minted package, which will fontify source code
with color.  If you want to use this, you need to make LaTeX use the
minted package. Add minted to `org-export-latex-packages-alist', for
example using customize, or with something like

  (require 'org-latex)
  (add-to-list 'org-export-latex-packages-alist '("" "minted"))

In addition, it is neccessary to install
pygments (http://pygments.org), and to configure
`org-latex-to-pdf-process' so that the -shell-escape option is
passed to pdflatex.

*** Allow to use texi2dvi or rubber for processing LaTeX to pdf

Please see the variable =org-export-latex-to-pdf-process= for
more information.

Thanks to Olivier Schwander for the rubber part.

*** New STARTUP keywords to turn on inline images

If you want to inline images whenever you visit an Org file, use

: #+STARTUP: inlineimages

*** Support for user-extensible speed commands.

There is a new hook =org-speed-command-hook=.  Thanks to
Jambunathan for a patch to this effect.

*** Add macro to insert property values into exported text

you can use {{{property{NAME}}}} to insert the value of a
property upon export.

Thanks to David Maus for a patch to this effect.

*** LaTeX package fixes

We updated the list of default packages loaded by LaTeX exported
files.

*** Allow "#" and "%" in tags

Tags can now also contain the characters =#= and =%=, in addition
to =@= and letters.

*** Show command names in manual

Andreas Röhler is adding command names to keys in the manual.
This will take a while to complete, but a start has been made.

*** Make backslash escape "-" in property matches

When entering a tags/property query, "-" is a logical operator.
However, "-" is also allowed in property names.  So you can now
write "SOME\-NAME" to work around this issue.

This was a request by Ilya Shlyakhter.

*** Document quick insertion of empty structural elements

Org mode has a built-in template mechanism for inserting block
templates.  This was undocumented until now.

Thanks to Jambunathan K for the patch.

*** Implement MathJax support

Org mode now uses MathJax to display math on web pages.  We serve
MathJax from the orgmode.org server, at least for the time being
(thanks Bastien!).  If you are going to use this for pages which
are viewed often, please install MathJax on your own webserver.

To return to the old way of creating images and inserting them
into web pages, you would have to set

: (setq org-export-with-LaTeX-fragments 'dvipng)

or on a per-file basis

: #+OPTIONS: LaTeX:dvipng

*** Agenda: Allow compact two-column display in agenda dispatcher

If you have many custom agenda commands, you can have the display
in the dispatcher use two columns with the following settings

: (setq org-agenda-menu-show-match nil
:       org-agenda-menu-two-column t)

This was a request by John Wiegley.

*** Add org-wikinodes.el as a contributed package

One frequent request has been to be able to use CamelCase words
for automatic cross links in a Wiki created by Org.  THis is now
possible with org-wikinodes.el, which is available in the contrib
directory.  We also have some [[https://orgmode.org/worg/org-contrib/org-wikinodes.php][documentation]] for this feature up
on Worg.

*** Timer/clock enhancements

=org-timer-set-timer= displays a countdown timer in the modeline.
From the agenda, `J' invokes =org-agenda-clock-goto=.

* Version 7.01
:PROPERTIES:
:CUSTOM_ID: v7.01
:END:

** Incompatible Changes

*** Emacs 21 support has been dropped

Do not use Org mode 7.xx with Emacs 21, use [[https://orgmode.org/org-6.36c.zip][version 6.36c]] instead.

*** XEmacs support requires the XEmacs development version

To use Org mode 7.xx with XEmacs, you need to run the developer
version of XEmacs.   I was about to drop XEmacs support entirely,
but Michael Sperber stepped in and made changes to XEmacs that
made it easier to keep the support.  Thanks to Michael for this
last-minute save.  I had hoped to be able to remove
xemacs/noutline.el from release 7 by moving it into XEmacs, but
this is not yet done.

*** Org-babel configuration changes
:PROPERTIES:
:CUSTOM_ID: ob-configuration-changes
:END:

Babel took the integration into Org mode as an opportunity to do
some much needed house cleaning.  Most importantly we have
simplified the enabling of language support, and cleared out
unnecessary configuration variables -- which is great unless you
already have a working configuration under the old model.

The most important changes regard the /location/ and /enabling/
of Babel (both core functionality and language specific support).

- Babel :: Babel is now part of the core of Org mode, so it is
     now loaded along with the rest of Org mode.  That means that
     there is /no configuration/ required to enable the main
     Babel functionality.  For current users, this means that
     statements like
     #+begin_src emacs-lisp
       (require 'org-babel)
     #+end_src
     or
     #+begin_src emacs-lisp
       (require 'org-babel-init)
     #+end_src
     that may by lying around in your configuration must now be
     removed.
- load path :: Babel (including all language specific files --
     aside from those which are located in the =contrib/=
     directory for reasons of licencing) now lives in the base of
     the Org mode lisp directory, so /no additional directories/
     need to be added to your load path to use babel.  For Babel
     users this means that statements adding babel-specific
     directories to your load-path should now be removed from
     your config.
- language support :: It is no longer necessary to require
     language specific support on a language-by-language basis.
     Specific language support should now be managed through the
     `org-babel-load-languages' variable.  This variable can be
     customized using the Emacs customization interface, or
     through the addition of something like the following to your
     configuration (note: any language not mentioned will /not/
     be enabled, aside from =emacs-lisp= which is enabled by
     default)
     #+begin_src emacs-lisp
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((R . t)
          (ditaa . t)
          (dot . t)
          (emacs-lisp . t)
          (gnuplot . t)
          (haskell . nil)
          (ocaml . nil)
          (python . t)
          (ruby . t)
          (screen . nil)
          (sh . t)
          (sql . nil)
          (sqlite . t)))
     #+end_src

	   Despite this change it is still possible to add
	   language support through the use of =require=
	   statements, however to conform to Emacs file-name
	   regulations all Babel language files have changed
	   prefix from =org-babel-*= to =ob-*=, so the require
	   lines must also change e.g.
	   #+begin_src emacs-lisp
       (require 'org-babel-R)
	   #+end_src
	   should be changed to
	   #+begin_src emacs-lisp
       (require 'ob-R)
	   #+end_src

We have eliminated the =org-babel-tangle-w-comments= variable as
well as the two main internal lists of languages, namely
- =org-babel-interpreters= and
- =org-babel-tangle-langs=

so any config lines which mention those variables, can/should be
stripped out in their entirety.  This includes any calls to the
=org-babel-add-interpreter= function, whose sole purpose was to
add languages to the =org-babel-interpreters= variable.

With those calls stripped out, we may still in some cases want to
associate a file name extension with certain languages, for
example we want all of our emacs-lisp files to end in a =.el=, we
can do this will the =org-babel-tangle-lang-exts= variable.  In
general you shouldn't need to touch this as it already has
defaults for most common languages, and if a language is not
present in org-babel-tangle-langs, then babel will just use the
language name, so for example a file of =c= code will have a =.c=
extension by default, shell-scripts (identified with =sh=) will
have a =.sh= extension etc...

The configuration of /shebang/ lines now lives in header
arguments.  So the shebang for a single file can be set at the
code block level, e.g.

#+begin_src org
  ,#+begin_src clojure :shebang #!/usr/bin/env clj
  ,  (println "with a shebang line, I can be run as a script!")
  ,#+end_src
#+end_src

Note that whenever a file is tangled which includes a /shebang/
line, Babel will make the file executable, so there is good
reason to only add /shebangs/ at the source-code block level.
However if you're sure that you want all of your code in some
language (say shell scripts) to tangle out with shebang lines,
then you can customize the default header arguments for that
language, e.g.

#+begin_src emacs-lisp
  ;; ensure this variable is defined defined
  (unless (boundp 'org-babel-default-header-args:sh)
    (setq org-babel-default-header-args:sh '()))

  ;; add a default shebang header argument
  (add-to-list 'org-babel-default-header-args:sh
               '(:shebang . "#!/bin/bash"))
#+end_src

The final important change included in this release is the
addition of new security measures into Babel.  These measures are
in place to protect users from the accidental or uninformed
execution of code.  Along these lines /every/ execution of a code
block will now require an explicit confirmation from the user.
These confirmations can be stifled through customization of the
`org-confirm-babel-evaluate' variable, e.g.
#+begin_src emacs-lisp
  ;; I don't want to be prompted on every code block evaluation
  (setq org-confirm-babel-evaluate nil)
#+end_src

In addition, it is now possible to remove code block evaluation
form the =C-c C-c= keybinding.  This can be done by setting the
=org-babel-no-eval-on-ctrl-c-ctrl-c= variable to a non-nil value,
e.g.
#+begin_src emacs-lisp
  ;; I don't want to execute code blocks with C-c C-c
  (setq org-babel-no-eval-on-ctrl-c-ctrl-c t)
#+end_src

An additional keybinding has been added for code block
evaluation, namely =C-c C-v e=.

Whew! that seems like a lot of effort for a /simplification/ of
configuration.

*** New keys for TODO sparse trees

The key =C-c C-v= is now reserved for Org Babel action.  TODO
sparse trees can still be made with =C-c / t= (all not-done
states) and =C-c / T= (specific states).

*** Customizable variable changes for DocBook exporter

To make it more flexible for users to provide DocBook exporter
related commands, we start to use format-spec to format the
commands in this release.  If you use DocBook exporter and use it
to export Org files to PDF and/or FO format, the settings of the
following two customizable variables need to be changed:

- =org-export-docbook-xslt-proc-command=
- =org-export-docbook-xsl-fo-proc-command=

Instead of using =%s= in the format control string for all
arguments, now we use /three/ different format spec characters:

- =%i=: input file argument
- =%o=: output file argument
- =%s=: XSLT stylesheet argument

For example, if you set =org-export-docbook-xslt-proc-command= to

: java com.icl.saxon.StyleSheet -o %s %s /path/to/docbook.xsl

in the past, now you need to change it to

: java com.icl.saxon.StyleSheet -o %o %i %s

and set a new customizable variable called
=org-export-docbook-xslt-stylesheet= to =/path/to/docbook.xsl=.

Please check the documentation of these two variables for more
details and other examples.

Along with the introduction of variable
=org-export-docbook-xslt-stylesheet=, we also added a new
in-buffer setting called =#+XSLT:=.  You can use this setting to
specify the XSLT stylesheet that you want to use on a per-file
basis.  This setting overrides
=org-export-docbook-xslt-stylesheet=.

** Details

*** Org Babel is now part of the Org core
See [[#ob-configuration-changes][Org-babel configuration changes]] for instructions on how to
update your babel configuration.

The most significant result of this change is that Babel now has
documentation!  It is part of Org mode's documentation, see
Chapter 14 [[https://orgmode.org/manual/Working-with-source-code.html#Working-with-source-code][Working With Source Code]].  The Babel keybindings
are now listed in the refcard, and can be viewed from any
Org mode buffer by pressing =C-c C-v h=.  In addition this
integration has included a number of bug fixes, and a significant
amount of internal code cleanup.

*** The default capture system for Org mode is now called org-capture

This replaces the earlier system org-remember.  The manual only
describes org-capture, but for people who prefer to continue to
use org-remember, we keep a static copy of the former manual
section [[https://orgmode.org/org-remember.pdf][chapter about remember]].

The new system has a technically cleaner implementation and more
possibilities for capturing different types of data.  See
[[https://list.orgmode.org/C46F10DC-DE51-43D4-AFFE-F71E440D1E1F@gmail.com][Carsten's announcement]] for more details.

To switch over to the new system:

1. Run

   : M-x org-capture-import-remember-templates RET

   to get a translated version of your remember templates into the
   new variable =org-capture-templates=.  This will "mostly" work,
   but maybe not for all cases.  At least it will give you a good
   place to modify your templates.  After running this command,
   enter the customize buffer for this variable with

   : M-x customize-variable RET org-capture-templates RET

   and convince yourself that everything is OK.  Then save the
   customization.

2. Bind the command =org-capture= to a key, similar to what you did
   with org-remember:

   : (define-key global-map "\C-cc" 'org-capture)

   If your fingers prefer =C-c r=, you can also use this key once
   you have decided to move over completely to the new
   implementation.  During a test time, there is nothing wrong
   with using both system in parallel.

*** Implement pretty display of entities, sub-, and superscripts.

The command =C-c C-x \= toggles the display of Org's special
entities like =\alpha= as pretty unicode characters.  Also, sub
and superscripts are displayed in a pretty way (raised/lower
display, in a smaller font).  If you want to exclude sub- and
superscripts, see the variable
=org-pretty-entities-include-sub-superscripts=.

Thanks to Eric Schulte and Ulf Stegeman for making this possible.

*** Help system for finding entities

The new command =M-x org-entities-help= creates a structured
buffer that lists all entities available in Org.  Thanks to Ulf
Stegeman for adding the necessary structure to the internal
entity list.

*** New module to create Gantt charts

Christian Egli's /org-taskjuggler.el/ module is now part of Org.
He also wrote a [[https://orgmode.org/worg/org-tutorials/org-taskjuggler.html][tutorial]] for it.

*** Refile targets can now be cached

You can turn on caching of refile targets by setting the variable
=org-refile-use-cache=.  This should speed up refiling if you
have many eligible targets in many files.  If you need to update
the cache because Org misses a newly created entry or still
offers a deleted one, press =C-0 C-c C-w=.

*** Enhanced functionality of the clock resolver

Here are the new options for the clock resolver:

: i/q/C-g  Ignore this question; the same as keeping all the idle time.
:
: k/K      Keep X minutes of the idle time (default is all).  If this
:          amount is less than the default, you will be clocked out
:          that many minutes after the time that idling began, and then
:          clocked back in at the present time.
: g/G      Indicate that you \"got back\" X minutes ago.  This is quite
:          different from 'k': it clocks you out from the beginning of
:          the idle period and clock you back in X minutes ago.
: s/S      Subtract the idle time from the current clock.  This is the
:          same as keeping 0 minutes.
: C        Cancel the open timer altogether.  It will be as though you
:          never clocked in.
: j/J      Jump to the current clock, to make manual adjustments.

For all these options, using uppercase makes your final state
to be CLOCKED OUT.  Thanks to John Wiegley for making these
changes.

*** A property value of "nil" now means to unset a property

This can be useful in particular with property inheritance, if
some upper level has the property, and some grandchild of it
would like to have the default settings (i.e. not overruled by a
property) back.

Thanks to Robert Goldman and Bernt Hansen for suggesting this
change.

*** The problem with comment syntax has finally been fixed

Thanks to Leo who has been on a year-long quest to get this fixed
and finally found the right way to do it.

*** Make it possible to protect hidden subtrees from being killed by =C-k=

This was a request by Scott Otterson.
See the new variable =org-ctrl-k-protect-subtree=.

*** New module org-mac-link-grabber.el

This module allows to grab links to all kinds of applications on
a mac.  It is available in the contrib directory.

Thanks to Anthony Lander for this contribution.

*** LaTeX export: Implement table* environment for wide tables

Thanks to Chris Gray for a patch to this effect.

*** When cloning entries, remove or renew ID property

Thanks to David Maus for this change.

* Version 6.36

 :PROPERTIES:
 :CUSTOM_ID: v6.36
 :END:

** Details
*** Inline display of linked images

Images can now be displayed inline.  The key C-c C-x C-v does
toggle the display of such images.  Note that only image links
that have no description part will be inlined.

*** Implement offsets for ordered lists

If you want to start an ordered plain list with a number
different from 1, you can now do it like this:

: 1. [@start:12] will star a lit a number 12

*** Extensions to storing and opening links to Wanderlust messages

- Remove filter conditions for messages in a filter folder

  If customization variable `org-wl-link-remove-filter' is non-nil,
  filter conditions are stripped of the folder name.

- Create web links for messages in a Shimbun folder

  If customization variable `org-wl-shimbun-prefer-web-links' is
  non-nil, calling `org-store-link' on a Shimbun message creates a
  web link to the messages source, indicated in the Xref: header
  field.

- Create web links for messages in a nntp folder

  If customization variable `org-wl-nntp-prefer-web-links' is
  non-nil, calling `org-store-link' on a nntp message creates a web
  link either to gmane.org if the group can be read trough gmane or
  to googlegroups otherwise. In both cases the message-id is used as
  reference.

- Open links in namazu search folder

  If `org-wl-open' is called with one prefix, WL opens a namazu
  search folder for message's message-id using
  `org-wl-namazu-default-index' as search index.  If this variable is
  nil or `org-wl-open' is called with two prefixes Org asks for the
  search index to use.

Thanks to David Maus for these changes.

*** Org-babel: code block body expansion for table and preview

In org-babel, code is "expanded" prior to evaluation. I.e. the
code that is actually evaluated comprises the code block
contents, augmented with the extra code which assigns the
referenced data to variables. It is now possible to preview
expanded contents, and also to expand code during during
tangling. This expansion takes into account all header arguments,
and variables.

A new key-binding C-c M-b p bound to
`org-babel-expand-src-block' can be used from inside of a
source code block to preview its expanded contents (which can
be very useful for debugging).  tangling

The expanded body can now be tangled, this includes variable
values which may be the results of other source-code blocks, or
stored in headline properties or tables. One possible use for
this is to allow those using org-babel for their emacs
initialization to store values (e.g. usernames, passwords,
etc…) in headline properties or in tables.

Org-babel now supports three new header arguments, and new
default behavior for handling horizontal lines in tables
(hlines), column names, and rownames across all languages.

* Version 6.35
 :PROPERTIES:
 :CUSTOM_ID: v6.35
 :END:

** Incompatible Changes

*** Changes to the intended use of =org-export-latex-classes=

So far this variable has been used to specify the complete header
of the LaTeX document, including all the =\usepackage= calls
necessary for the document.  This setup makes it difficult to
maintain the list of packages that Org itself would like to call,
for example for the special symbol support it needs.  Each time I
have to add a package, I have to ask people to revise the
configuration of this variable.  In this release, I have tried to
fix this.

First of all, you can *opt out of this change* in the following
way: You can say: /I want to have full control over headers, and
I will take responsibility to include the packages Org needs/.
If that is what you want, add this to your configuration and skip
the rest of this section (except maybe for the description of the
=[EXTRA]= place holder):

#+begin_src emacs-lisp
  (setq org-export-latex-default-packages-alist nil
        org-export-latex-packages-alist nil)
#+end_src

/Continue to read here if you want to go along with the modified
setup./

There are now two variables that should be used to list the LaTeX
packages that need to be included in all classes.  The header
definition in =org-export-latex-classes= should then not contain
the corresponding =\usepackage= calls (see below).

The two new variables are:

1. =org-export-latex-default-packages-alist= :: This is the
     variable where Org mode itself puts the packages it needs.
     Normally you should not change this variable.  The only
     reason to change it anyway is when one of these packages
     causes a conflict with another package you want to use.
     Then you can remove that packages and hope that you are not
     using Org mode functionality that needs it.

2. =org-export-latex-packages-alist= :: This is the variable
     where you can put the packages that you'd like to use across
     all classes.  For example, I am putting =amsmath= and =tikz=
     here, because I always want to have them.

The sequence how these customizations will show up in the LaTeX
document are:
1. Header from =org-export-latex-classes=
2. =org-export-latex-default-packages-alist=
3. =org-export-latex-packages-alist=
4. Buffer-specific things set with =#+LaTeX_HEADER:=

If you want more control about which segment is placed where, or
if you want, for a specific class, have full control over the
header and exclude some of the automatic building blocks, you can
put the following macro-like place holders into the header:

#+begin_example
[DEFAULT-PACKAGES]      \usepackage statements for default packages
[NO-DEFAULT-PACKAGES]   do not include any of the default packages
[PACKAGES]              \usepackage statements for packages
[NO-PACKAGES]           do not include the packages
[EXTRA]                 the stuff from #+LaTeX_HEADER
[NO-EXTRA]              do not include #+LaTeX_HEADER stuff
#+end_example

If you have currently customized =org-export-latex-classes=, you
should revise that customization and remove any package calls that
are covered by =org-export-latex-default-packages-alist=.  This
applies to the following packages:

- inputenc
- fontenc
- fixltx2e
- graphicx
- longtable
- float
- wrapfig
- soul
- t1enc
- textcomp
- marvosym
- wasysym
- latexsym
- amssymb
- hyperref

If one of these packages creates a conflict with another package
you are using, you can remove it from
=org-export-latex-default-packages-alist=.  But then you risk
that some of the advertised export features of Org will not work
properly.

You can also consider moving packages that you use in all classes
to =org-export-latex-packages-alist=.  If necessary, put the
place holders so that the packages get loaded in the right
sequence.  As said above, for backward compatibility, if you omit
the place holders, all the variables will dump their content at
the end of the header.

Damn, this has become more complex than I wanted it to be.  I
hope that in practice, this will not be complicated at all.

*** The constant =org-html-entities= is obsolete

Its content is now part of the new constant =org-entities=, which
is defined in the file org-entities.el.  =org-html-entities= was
an internal variable, but it is possible that some users did
write code using it - this is why I am mentioning it here.

** Editing Convenience and Appearance

*** New faces for title, date, author and email address lines.

The keywords in these lines are now dimmed out, and the title is
displayed in a larger font, and a special font is also used for
author, date, and email information.  This is implemented by the
following new faces:

org-document-title
org-document-info
org-document-info-keyword

In addition, the variable =org-hidden-keywords= can be used to
make the corresponding keywords disappear.

Thanks to Dan Davison for this feature.

*** Simpler way to specify faces for tags and todo keywords

The variables =org-todo-keyword-faces=, =org-tag-faces=, and
=org-priority-faces= now accept simple color names as
specifications.  The colors will be used as either foreground or
background color for the corresponding keyword.  See also the
variable =org-faces-easy-properties=, which governs which face
property is affected by this setting.

This is really a great simplification for setting keyword faces.
The change is based on an idea and patch by Ryan Thompson.

*** <N> in tables now means fixed width, not maximum width

Requested by Michael Brand.

*** Better level cycling function

=TAB= in an empty headline cycles the level of that headline
through likely states.  Ryan Thompson implemented an improved
version of this function, which does not depend upon when exactly
this command is used.  Thanks to Ryan for this improvement.

*** Adaptive filling

For paragraph text, =org-adaptive-fill-function= did not handle the
base case of regular text which needed to be filled.  This is now
fixed.  Among other things, it allows email-style ">" comments
to be filled correctly.

Thanks to Dan Hackney for this patch.

*** `org-reveal' (=C-c C-r=) also decrypts encrypted entries (org-crypt.el)

Thanks to Richard Riley for triggering this change.

*** Better automatic letter selection for TODO keywords

When all first letters of keywords have been used, Org now assigns
more meaningful characters based on the keywords.

Thanks to Mikael Fornius for this patch.

** Export

*** Much better handling of entities for LaTeX export

Special entities like =\therefore= and =\alpha= now know if
they need to be in LaTeX math mode and are formatted accordingly.

Thanks to Ulf Stegemann for the tedious work to make this
possible.

*** LaTeX export: Set coding system automatically

The coding system of the LaTeX class will now be set to the value
corresponding to the buffer's file coding system.  This happens
if your setup sets up the file to have a line
=\usepackage[AUTO]{inputenc}= (the default setup does this).

*** New exporters to Latin-1 and UTF-8

While Ulf Stegemann was going through the entities list to
improve the LaTeX export, he had the great idea to provide
representations for many of the entities in Latin-1, and for all
of them in UTF-8.  This means that we can now export files rich
in special symbols to Latin-1 and to UTF-8 files.  These new
exporters can be reached with the commands =C-c C-e n= and =C-c
C-e u=, respectively.

When there is no representation for a given symbol in the
targeted coding system, you can choose to keep the TeX-macro-like
representation, or to get an "explanatory" representation.  For
example, =\simeq= could be represented as "[approx. equal to]".
Please use the variable =org-entities-ascii-explanatory= to state
your preference.

*** Full label/reference support in HTML, Docbook, and LaTeX backends

=#+LABEL= definitions for tables and figures are now fully
implemented in the LaTeX, Docbook, and HTML interfaces.
=\ref{xxx}= is expanded to a valid link in all backends.

*** BEAMER export: Title of the outline frame is now customizable

The new option =org-outline-frame-title= allows to set the
title for outline frames in Beamer presentations.

Patch by Łukasz Stelmach.

*** BEAMER export: fragile frames are better recognized

A =lstlisting= environment now also triggers the fragile option in
a beamer frame, just like =verbatim= environments do.

Thanks to Eric Schulte for this patch.

*** BEAMER export: Protect <...> macro arguments

Macros for the BEAMER package can have arguments in angular
brackets.  These are now protected just like normal arguments.

Requested by Bill Jackson.

*** HTML export: Add class to outline containers using property

The =HTML_CONTAINER_CLASS= property can now be used to add a
class name to the outline container of a node in HTML export.

*** New option =org-export-email-info= to turn off export of the email address

Default is actually off now.

*** Throw an error when creating an image from a LaTeX snippet fails

This behavior can be configured with the new option variable
=org-format-latex-signal-error=.

** Index generation

Org mode can now produce a 2-level subject index spanning an
entire publishing project.  Write index entries in your files as

#+begin_src org
  ,* What is org-mode?
  ,#+index: Org mode
  ,#+index: Definitions!Org mode
#+end_src

where the first line will produce an index entry /Org mode/,
while the second line will create /Definitions/ with a sub-item
/Org mode/.  Three-level entries are not supported.

To produce the index, set

#+begin_src emacs-lisp
:makeindex t
#+end_src

in the project definition in =org-publish-project-alist=.  You
may have to force re-export of all files to get the index by
using a =C-u= prefix to the publishing command:

#+begin_example
C-u M-x org-publish-all
#+end_example

Whenever an Org file is published in this project, a new file
with the extension "orgx" will be written.  It contains the index
entries and corresponding jump target names.  When all project
files are published, Org will produce a new file "theindex.inc"
containing the index as a to-level tree.  This file can be
included into any project file using

#+begin_src org
  ,#+include: "theindex.inc"
#+end_src

Org mode will also create a file "theindex.org" with this include
statement, and you can build a more complex structure (for
example style definitions, top and home links, etc) around this
statement.  When this file already exists, it will not be
overwritten by Org.

Thanks to Stefan Vollmar for initiating and driving this feature.

*** TODO Still need to do the LaTeX portion

** MobileOrg

*** Encrypting stage files for MobileOrg

Since the use of (often pubic) servers is needed for MobileOrg,
it is now possible to encrypt the files to be staged for
MobileOrg.  Version 1.2 of MobileOrg will be needed for this
feature, and Richard Moreland will show instructions on his
website once that is available.  Basically, on the Org-side this
will require the following settings:

#+begin_src emacs-lisp
  (setq org-mobile-use-encryption t
        org-mobile-encryption-password "My_MobileOrg_Password")
#+end_src

So the password will be visible in your local setup, but since
the encryption is only for the public server, this seems
acceptable.

** Agenda

*** Specify entry types as an option

Custom Agenda commands can now limit the sets of entry types
considered for this command by binding =org-agenda-entry-types=
temporarily in the options section of the command.  This can lead to
significant speedups, because instead of laboriously finding entries
and then rejecting them, a whole search cycle is skipped.  For more
information see this [[https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html#orgf395e43][worg page]].

Thanks to Matt Lundin for this feature.

*** Speed up multiple calls to org-diary by only doing buffer prep once

Also a patch by Matt Lundin.

*** Show and hide deadlines in the agenda

You can now hide all deadline entries in the agenda by pressing
=!=.

Thanks to John Wiegley for this feature.

*** Agenda: Allow to suppress deadline warnings for entries also scheduled

The the docstring of the variable
=org-agenda-skip-deadline-prewarning-if-scheduled=.

*** Expand file names in org-agenda-files (external file case)

If you are using a file to manage the list of agenda files, the
names in this file can now contain environment variables and "~"
to write them more compactly and portable.

Thanks to Mikael Fornius for a patch to this effect.

*** Agenda: Allow TODO conditions in the skip functions

The agenda skip function has now special support for skipping
based on the TODO state.  Here are just two examples, see the
manual for more information.

#+begin_src emacs-lisp
(org-agenda-skip-entry-if 'todo '(\"TODO\" \"WAITING\"))
(org-agenda-skip-entry-if 'nottodo 'done)
#+end_src

Thanks to Łukasz Stelmach for this patch.

*** Extracting the time-of-day when adding diary entries

The time of day can now be extracted from new diary entries made
from the agenda with (for example) =i d=.  When
=org-agenda-insert-diary-extract-time= is set, this is done, and
the time is moved into the time stamp.

Thanks to Stephen Eglen for this feature.

*** The customization group org-font-lock has been renamed

The new name is `org-appearance'.

Thanks to Dan Davison for a patch to this effect.

*** The TODO list: Allow skipping scheduled or deadlined entries

Skipping TODO entries in the global TODO list based on whether
they are scheduled or have a deadline can now be controlled in
more detail.  Please see the docstrings of
=org-agenda-todo-ignore-scheduled= and
=org-agenda-todo-ignore-deadline=.

Thanks to Łukasz Stelmach for patches to this effect.

** Hyperlinks

*** Make =org-store-link= point to directory in a dired buffer

When, in a dired buffer, the cursor is not in a line listing a
file, `org-store-link' will store a link to the directory.

Patch by Stephen Eglen.

*** Allow regexps in =org-file-apps= to capture link parameters

The way extension regexps in =org-file-apps= are handled has
changed.  Instead of matching against the file name, the regexps
are now matched against the whole link, and you can use grouping
to extract link parameters which you can then use in a command
string to be executed.

For example, to allow linking to PDF files using the syntax
=file:/doc.pdf::<page number>=, you can add the following entry to
org-file-apps:

#+begin_example
Extension: \.pdf::\([0-9]+\)\'
Command:   evince "%s" -p %1
#+end_example

Thanks to Jan Böcker for a patch to this effect.

** Clocking

*** Show clock overruns in mode line

When clocking an item with a planned effort, overrunning the
planned time is now made visible in the mode line, for example
using the new face =org-mode-line-clock-overrun=, or by adding an
extra string given by =org-task-overrun-text=.

Thanks to Richard Riley for a patch to this effect.

** Tables

*** Repair the broken support for table.el tables again.

Tables created with the table.el package now finally work again
in Org mode.  While you cannot edit the table directly in the
buffer, you can use  =C-c '= to edit it nicely in a temporary
buffer.

Export of these tables to HTML seem to work without problems.
Export to LaTeX is imperfect.  If fails if the table contains
special characters that will be replaced by the exporter before
formatting the table.  The replacement operation changes the
length of some lines, breaking the alignment of the table fields.
Unfortunately this is not easy to fix.  It is also not an option
to not do these replacements.  The table.el LaTeX exporter will
for example not escape "&" in table fields, causing the exported
tables to be broken.

** Misc

*** New logging support for refiling

Whenever you refile an item, a time stamp and even a note can be
added to this entry.  For details, see the new option
=org-log-refile=.

Thanks to Charles Cave for this idea.

*** New helper functions in org-table.el

There are new functions to access and write to a specific table
field.  This is for hackers, and maybe for the org-babel people.

#+begin_example
org-table-get
org-table-put
org-table-current-line
org-table-goto-line
#+end_example

*** Tables: Field coordinates for formulas, and improved docs

Calc and Emacs-Lisp formulas for tables can access the current
field coordinates with =@#= and =$#= for row and column,
respectively.  These can be useful in some formulas.  For
example, to sequentially number the fields in a column, use
~=@#~ as column equation.

One application is to copy a column from a different table.  See
the manual for details.

Thanks to Michael Brand for this feature.

*** Archiving: Allow to reverse order in target node

The new option =org-archive-reversed-order= allows to have
archived entries inserted in a last-on-top fashion in the target
node.

Requested by Tom.

*** Better documentation on calc accuracy in tables

Thanks to Michael Brand for this fix.

*** Clock reports can now include the running, incomplete clock

If you have a clock running, and the entry being clocked falls
into the scope when creating a clock table, the time so far spent
can be added to the total.  This behavior depends on the setting
of =org-clock-report-include-clocking-task=.  The default is
=nil=.

Thanks to Bernt Hansen for this useful addition.

*** American-style dates are now understood by =org-read-date=

So when you are prompted for a date, you can now answer like this

#+begin_example
2/5/3         --> 2003-02-05
2/5           --> <CURRENT-YEAR>-02-05
#+end_example

*** org-timer.el now allows just one timer

There is now only a single free timer supported by org-timer.el.
Thanks to Bastien for cleaning this up, after a bug report in
this area by Frédéric Couchet.

*** Remember: Allow to file as sibling of current clock

=C-3 C-c C-c= will file the remember entry as a sibling of the
last filed entry.

Patch by Łukasz Stelmach.

*** Org-reveal: Double prefix arg shows the entire subtree of the parent

This can help to get out of an inconsistent state produced for
example by viewing from the agenda.

This was a request by Matt Lundin.

*** Add org-secretary.el by Juan Reyero to the contrib directory

org-secretary.el is a possible setup for group work using
Org mode.

Thanks to Juan Reyero for this contribution.

** Babel

Eric and Dan have compiled the following list of changes in and
around org-babel.

- Added support for Matlab and Octave.
- Added support for C and C++ code blocks.
- Added support for the Oz programming language.
  Thanks to Torsten Anders for this contribution
- Can now force literal interpretation of table cell contents
  with extra "$" in table formula.
  Thanks to Maurizio Vitale for this suggestion.
- Variable references which look like lisp forms are now
  evaluated.
- No longer adding extension during tangling when filename is
  provided.
  Thanks to Martin G. Skjæveland and Nicolas Girard for prompting this.
- Added `org-babel-execute-hook' which runs after code block
  execution.
- Working directories and remote execution

  This introduces a new header argument :dir. For the duration of
  source block execution, default-directory is set to the value
  of this header argument. Consequences include:

  - external interpreter processes run in that directory
  - new session processes run in that directory (but existing
    ones are unaffected)
  - relative paths for file output are relative to that directory

  The name of a directory on a remote machine may be specified
  with tramp syntax (/user@host:path), in which case the
  interpreter executable will be sought in tramp-remote-path, and
  if found will execute on the remote machine in the specified
  remote directory.
- Tramp syntax can be used to tangle to remote files.
  Thanks to Maurizio Vitale and Rémi Vanicat.
- org-R removed from contrib.
- gnuplot can now return it's string output -- when session is
  set to "none".
- Now including source code block arguments w/source name on
  export.
- Now able to reference file links as results.
- Allow pdf/png generation directly from latex source blocks
  with :file header argument.

* Version 6.34
 :PROPERTIES:
 :CUSTOM_ID: v6.34
 :END:

** Incompatible changes

*** Tags in org-agenda-auto-exclude-function must be lower case.

When defining an =org-agenda-auto-exclude-function=, you need to
be aware that tag that is being passed into the function is
always lower case - even if it was defined in upper case
originally.

** Details

*** Support for creating BEAMER presentations from Org mode documents

Org mode documents or subtrees can now be converted directly in to
BEAMER presentation.  Turning a tree into a simple presentations is
straight forward, and there is also quite some support to make richer
presentations as well.  See the [[https://orgmode.org/manual/Beamer-export.html#Beamer-export][BEAMER section]] in the manual for more
details.

Thanks to everyone who has contributed to the discussion about BEAMER
support and how it should work.  This was a great example for how this
community can achieve a much better result than any individual could.

*** Hyperlinks

**** Add Paul Sexton's org-ctags.el

Targets like =<<my target>>= can now be found by Emacs' etag
functionality, and Org mode links can be used to to link to etags,
also in non-Org mode files.  For details, see the file /org-ctags.el/.

This feature uses a new hook =org-open-link-functions= which will call
function to do something special with text links.

Thanks to Paul Sexton for this contribution.

**** Add Jan Böcker's org-docview.el

This new module allows links to various file types using docview,
where Emacs displays images of document pages.  Docview link
types can point to a specific page in a document, for example to
page 131 of the Org mode manual:

: [[docview:~/.elisp/org/doc/org.pdf::131][Org mode Manual]]

Thanks to Jan Böcker for this contribution.

**** New link types that force special ways of opening the file

- =file+sys:/path/to/file=  will use the system to open the file,
  like double-clicking would.
- file+emacs:/path/to/file will force opening the linked file
  with Emacs.

This was a request by John Wiegley.

**** Open all links in a node

When using =C-c C-o= on a headline to get a list of links in the
entry, pressing =RET= will open *all* links.  This allows
something like projects to be defined, with a number of files
that have to be opened by different applications.

This was a request by John Wiegley.

*** Agenda Views

**** Improve the logic of the search view.

The logic of search views is changed a bit.  See the docstring of
the function =or-search-view=.

These changes resulted from a discussion with Matt Lundin.

**** New face for entries from the Emacs diary

Entries that enter the Agenda through the Emacs diary now get the
face =org-agenda-diary=.

This was a request by Thierry Volpiatto.

**** New function `org-diary-class' to schedule classes with skipped weeks.

This was a request by Daniel Martins.

**** Empty matcher means prompt in agenda custom commands

When an agenda custom command has an empty string as MATCH
element, so far this would lead to a meaningless search using an
empty matcher.  Now an empty (or white) string will be
interpreted just like a nil matcher, i.e. the user will be
prompted for the match.

**** Agenda: Selectively remove some tags from agenda display

If you use tags very extensively, you might want to exclude some
from being displayed in the agenda, in order to keep the display
compact.  See the new option =org-agenda-hide-tags-regexp= for
details.

This was largely a patch by Martin Pohlack.

*** Export

**** Direct export of only the current subtree

Pressing =1= after =C-c C-e= and before the key that selects the
export backend, only the current subtree will be exported,
exactly as it you had selected it first with =C-c @=.  So for
example, =C-c C-e 1 b= will export the current subtree to HTML
and open the result in the browser.

**** Direct export of enclosing node

Pressing =SPC= after =C-c C-e= and before the key that selects
the export backend, the enclosing subree that is set up for
subtree export will be exported, exactly as it you had selected
it first with =C-c @=.  So for example, =C-c C-e SPC d= will find
the enclosing node with a LaTeX_CLASS property or an
EXPORT_FILE_NAME property and export that.

**** Caching export images

Images that are created for example using LaTeX or ditaa for
inclusion into exported files are now cached.  This works by
adding a hash to the image name, that reflects the source code
and all relevant settings.  So as long as the hash does not
change, the image does not have to be made again.  His can lead
to a substantial reduction in export/publishing times.

Thanks to Eric Schulte for a patch to this effect.

**** Preserving line breaks for export no longer works

ASCII export always preserves them - no other export format
does.  We had attempted to use =\obeylines= for this in LaTeX,
but that does create too many problems.

**** New symbols =\EUR= and =\checkmark=

=\EUR= symbols from Marvosym package, and =\checkmark= are now
supported symbols in Org mode, i.e. they will be exported
properly to the various backends.

**** Allow LaTeX_CLASS_OPTIONS to set options, also from a property

You can set the options to the =\documentclass= command on a
per-file basis, using

: #+LaTeX_CLASS_OPTIONS: [11pt]

or on a per-tree basis using the corresponding property.  The
defined string will replace the default options entirely.

**** The encoding of LaTeX files is now handled property

Org now makes sure that the encoding used by the file created
through the export mechanism is reflected correctly in the

: \usepackage[CODINGSYSTEM]{inputenc}

command.  So as long as the =org-export-latex-classes= definition
contains an =\usepackage[utf8]{inputenc}= statement, that
statement will be modified so that the correct option is used.

If you wan to use special encodings, for example =utf8x= instead
of =utf8=, see the variable =org-export-latex-inputenc-alist=.

This was a request by Francesco Pizzolante.

*** Property API enhancements

**** Make a new special property BLOCKED, indicating if entry is blocked

A new special property BLOCKED returns "t" when the entry is
blocked from switching the TODO state to a DONE state.

This was a request by John Wiegley.

**** New hooks for external support for allowed property values

It is now possible to hook into Org in order to provide the
allowed values for any property with a lisp function.  See the
docstring of the variable =org-property-allowed-value-functions=

**** Allow unrestricted completion on properties

When listing the allowed values for a property, for example with
a =:name_ALL:= property, completion on these values enforces that
one of the values will be chosen.  Now, if you add ":ETC" to the
list of allowed values, it will be interpreted as a switch, and
the completion will be non-restrictive, so you can also choose to
type a new value.

*** Changes to Org-babel

- The documentation for Org-babel has been drastically improved
  and is available on Worg at
  https://orgmode.org/worg/org-contrib/babel/
- Source-code block names are now exported to HTML and LaTeX
- Org-babel functions are now bound to keys behind a common key
  prefix (see https://orgmode.org/manual/Working-with-source-code.html)
- Results are now foldable with TAB
- Header argument values can now be lisp forms
- Readable aliases for #+srcname: and #+resname:
- Sha1 hash based caching of results in buffer
- Can now index into variable values
- org-babel-clojure now supports multiple named sessions

*** Miscellaneous changes

**** Make =C-c r C= customize remember templates

=C-c r C= is now a shortcut for

:  M-x customize-variable RET org-remember-templates RET

This was a proposal by Adam Spiers.

**** Use John Gruber's regular expression for URL's

We now use a better regexp to spot plain links in text.  This
regexp is adopted from [[http://daringfireball.net/2009/11/liberal_regex_for_matching_urls][John Gruber's blogpost]].

Thanks to William Henney for the pointer.

**** Implement tag completion of all tags in all agenda files

The new option =org-complete-tags-always-offer-all-agenda-tags=
makes Org complete all tags from all agenda files if non-nil.
Usually, setting it locally to t in org-remember buffers is the
most useful application of this new feature.

Thanks to Tassilo Horn for a patch to this effect.

* Version 6.33
 :PROPERTIES:
 :CUSTOM_ID: v6.33
 :END:

** Incompatible changes

*** Reorganize key bindings for archiving

The following keys now do archiving

- C-c C-x C-a :: archive using the command specified in
     =org-archive-default-command=.  This variable is by default
     set to =org-archive-subtree=, which means arching to the
     archive file.

The three specific archiving commands are available through

- C-c C-x C-s ::    archive to archive file
- C-c C-x a ::     toggle the archive tag
- C-c C-x A ::   move to archive sibling

These bindings work the same in an Org file, and in the agenda.

In addition:

- In the agenda you can also use =a= to call the default archiving
  command, but you need to confirm the command with =y= so that this
  cannot easily happen by accident.

- For backward compatibility, =C-c $= in an org-mode file, and
  =$= in the agenda buffer continue to archive to archive file.


** Details

*** Level indentation cycling new empty entries and plain list items
:PROPERTIES:
:ID: 1CBF16C9-031C-4A03-A5EE-09B6AAB6209C
:END:

To speed up data entry, TAB now behaves special in an empty
headline, i.e. if the current line only contains the headline
starter stars, maybe a TOD keyword, but no further content.  This
is usually the situation just after creating a new headline with
=M-RET= or =M-S-RET=.

Then, TAB will first make the current entry a child of the
entry above, then a parent, then a grand parent etc until it
reaches top level.  Yet another TAB and you will be back at the
initial level at which the headline was created.

New plain list items behave in just the same way.

Sounds strange?  Try it, it is insanely fast when entering data.
If you still don't like it, turn it off by customizing
=org-cycle-level-after-item/entry-creation=.

Thanks to [[https://list.orgmode.org/20524da70910071107s55fff3ecj4d92f2bc9511b970@mail.gmail.com][Samuel Wales]] and [[https://list.orgmode.org/F423AE52-4791-478E-AE96-5B80B088FF30@gmail.com][John Wiegley]] for ideas that
contributed to this new feature.

*** Speed commands at the start of a headline

If you set the variable =org-use-speed-commands=, the cursor
position at the beginning of a headline (i.e. before the first
star) becomes special.  Single keys execute special commands in
this place, for example outline navigation with =f=, =b=, =n=,
and =p=, equivalent to the corresponding =C-c C-f=, =C-c C-b=,
=C-c C-n=, and =C-c C-f= commands.  The full list of commands can
be seen by pressing =?= at the special location.  More commands
can be added and existing ones modified by configuring the
variable =org-speed-commands-user=.

This was a request by John Wiegley, based on similar speed
navigation in /allout.el/.

*** Logging changes in scheduling and deadline time stamps

Setting the variables =org-log-reschedule= and
=org-log-redeadline= to either =time= or =note= will arrange for
recording a logbook entry whenever a scheduling date or deadline
is changed.

This was a request by Rick Moynihan.

*** File remember notes into a date tree

Remember notes can now be filed to a location in a date tree.  A
date tree is an outline tree with years as top levels, months as
level 2 headings, and days as level three headings.  These are
great for journals and for recording appointments and other loose
dates because it will be easy to find all entries referencing a
particular date, and it will be easy to archive all such entry
from last year, for example.

To select date tree filing, set the HEADLINE part of the remember
template to the symbol =date-tree=.  The date tree will be build
in the file on top level.  However, if the file contains an entry
with a non-nil =DATE_TREE= property, then the tree will be build
under that headline.

*** New commands to create entries from agenda and calendar

If you make the variable =org-agenda-diary-file= point to an
org-mode file, the =i= key in both the agenda buffer and in the
Emacs calendar will be made to insert entries into that Org file.
The dates at the cursor and the mark are being used when making
entries for specific dates or blocks.  In the new file,
anniversaries will be collected under a special headline, and
day/block entries will be filed into a date tree (see previous
section).

This was a request by Stephen Eglen.

*** A new freemind exporter has been integrated with Org mode

org-freemind.el has a number of entry points (for details, see
the source code), but you can also use Org's =C-c C-e m= to
export a file or a selected subtree.

Thanks to Lennart Borgman for this contribution.  An earlier
version of this file was part of the nxhtml package, under the
name /freemind.el/.

*** Drawers are now exported properly

Drawers are now exported when the configuration requires it,
i.e. if the variable `org-export-with-drawers' is t or a list
containing the drawers to export.

*** Min/Max/Mean age operators in Column View.

This lets you see how much time has passed since the specified
timestamp property each entry. The three operators (=@min=,
=@max=, =@mean=) show either the age of the youngest or oldest
entry or the average age of the children.

Thanks to James TD Smith for a patch to this effect.

*** Allow source code block indentation to be preserved

If =org-src-preserve-indentation= is non-nil, or if a block has a
=-i= switch, then the behavior of org-exp-blocks is altered as
follows:

1. Indentation is not removed before passing the block contents
   to the block-transforming plugin.

2. The result returned by the plugin is not re-indented.

3. Editing the source code block with =C-c '= preserves it's
   indentation.

Thanks to Dan Davison for this feature.

*** Frame/window control when switching to source code edit buffer.

When switching to a source code editing buffer with =C-c '=, you
can now control the frame / window setup using the new variable
=org-src-window-setup=.

Thanks to Dan Davison for this feature.

*** Refile an entry to the current clock

You can now quickly refile an entry to become a child of the
entry currently being clocked.  The keys for doing this are
=C-2 C-c C-w=.

This was a request by Bernt Hansen.

*** Make =C-c C-o= open the attachment directory is there are no links

If there is no link in an entry, =C-c C-o= will now open the
attachment directory instead.

This was a request/patch by John Wiegley.

*** org-mac-iCal.el: work with calendar "groups"

Some calendar systems (Google, Zimbra) handle subscriptions to
multiple calendars (or to an account) by grouping them under a
single caldav directory in the calendar tree.  org-mac-iCal used
to assumes there is only one ics file created per caldav
directory, so while it *creates* all of the needed merged ics
files, it only copies one of them to ~/Library/Calendar before
importing the contents into the diary.

Thanks to Doug Hellmann for a patch to fix this.

*** New module /org-learn.el/ in the contrib directory

The file implements the learning algorithm described at
http://supermemo.com/english/ol/sm5.htm, which is a system for reading
material according to "spaced repetition".  See
http://en.wikipedia.org/wiki/Spaced_repetition for more details.

Thanks to John Wiegley for this contribution.

*** New contributed package /org-git-link.el/

/org-git-link.el/ defines two new link types. The =git= link type
is meant to be used in the typical scenario and mimics the =file=
link syntax as closely as possible.  The =gitbare= link type
exists mostly for debugging reasons, but also allows e.g.
linking to files in a bare git repository for the experts.

Thanks to Raimar Finken for this contribution.

*** /org-annotation-helper.el/ and /org-browser-url.e./ have been removed
Please switch to /org-protocol.el/, into which contains the same
functionality in a more general framework.
*** The contributed /org-export-freemind/ package has been removed.
Org now contains a new freemind exporter, /org-freemind.el/.

** Org-babel Changes
- Clojure is supported [Thanks to Joel Boehland]
- Perl is supported
- Ruby and Python now respond to the :file header argument
- Added :results_switches header argument for passing switches
  through to raw src blocks
- Preserve indentation in source blocks on export and tangle
- Possible to evaluate noweb reference on tangling or code block
  evaluation
- Allowing multiple noweb references on a single line
- Cleaned up the passing of parameter values from Org-babel to
  language specific functions

* Older changes

For even older Changes, see [[file:Changes_older.org][older changes]].
